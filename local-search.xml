<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Leetcode】130.被围绕的区域</title>
    <link href="/2021/02/17/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F/"/>
    <url>/2021/02/17/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="130-被围绕的区域"><a href="#130-被围绕的区域" class="headerlink" title="130 被围绕的区域"></a>130 被围绕的区域</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二维的矩阵，包含 ‘X’ 和 ‘O’（字母 O）。</p><p>找到所有被 ‘X’ 围绕的区域，并将这些区域里所有的 ‘O’ 用 ‘X’ 填充。</p><pre><code>示例:X X X XX O O XX X O XX O X X运行你的函数后，矩阵变为：X X X XX X X XX X X XX O X X解释:被围绕的区间不会存在于边界上，换句话说，任何边界上的 &#39;O&#39; 都不会被填充为 &#39;X&#39;。 任何不在边界上，或不与边界上的 &#39;O&#39; 相连的 &#39;O&#39; 最终都会被填充为 &#39;X&#39;。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</code></pre><h2 id="方法-DFS"><a href="#方法-DFS" class="headerlink" title="方法(DFS)"></a>方法(DFS)</h2><p>据题意，我们需要将矩阵中的中的’O’分为以下两种：</p><ul><li>边界上的’O’和与边界上相邻的’O’</li><li>被’X’围绕的’O’  </li></ul><p>对于后者，我们需要将其改为’X’。而前者则无需改动。</p><p>先写一个深度优先遍历的函数，暂且叫它感染函数。它能实现将所有与当前位置相连的’O’修改成’#’。<br>所以第一步，我们先处理矩阵的四个边界，若在遍历边界的时候遇到’O’,则进入感染过程，将与边界上的’O’相连的’O’全都改写成’#’，以将上述两种’O’区别开来。</p><p>第二步，我们遍历整个矩阵，若遇到’O’，则这个’O’是被围绕的’O’，于是将其改为’X’。若遇到’#’，则代表其是边界上的’O’，于是将其改为’O’。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(board == <span class="hljs-keyword">null</span> || board.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//第一步：处理边界</span><br>    <span class="hljs-keyword">int</span> rows = board.length;<br>    <span class="hljs-keyword">int</span> cols = board[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; cols ; j++)&#123;<br>        <span class="hljs-keyword">if</span>(board[<span class="hljs-number">0</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            infect(board, <span class="hljs-number">0</span>, j);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; cols ; j++)&#123;<br>        <span class="hljs-keyword">if</span>(board[rows - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            infect(board, rows - <span class="hljs-number">1</span>, j);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rows ; i++)&#123;<br>        <span class="hljs-keyword">if</span>(board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            infect(board, i, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; rows; i++)&#123;<br>        <span class="hljs-keyword">if</span>(board[i][cols - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            infect(board, i, cols - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//第二步：遍历矩阵</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.length; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].length; j++)&#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>                board[i][j] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                board[i][j] = <span class="hljs-string">&#x27;O&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infect</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= board.length || j &gt;= board[<span class="hljs-number">0</span>].length || board[i][j] == <span class="hljs-string">&#x27;X&#x27;</span> || board[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        <span class="hljs-keyword">return</span>;<br>    board[i][j] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>    infect(board, i - <span class="hljs-number">1</span>, j);<br>    infect(board, i + <span class="hljs-number">1</span>, j);<br>    infect(board, i, j - <span class="hljs-number">1</span>);<br>    infect(board, i, j + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】127.单词接龙</title>
    <link href="/2021/02/17/127.%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/"/>
    <url>/2021/02/17/127.%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/</url>
    
    <content type="html"><![CDATA[<h1 id="127-单词接龙"><a href="#127-单词接龙" class="headerlink" title="127.单词接龙"></a>127.单词接龙</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p><p>每次转换只能改变一个字母。<br>转换过程中的中间单词必须是字典中的单词。</p><p>说明:</p><ul><li>如果不存在这样的转换序列，返回 0。</li><li>所有单词具有相同的长度。</li><li>所有单词只由小写字母组成。</li><li>字典中不存在重复的单词。</li><li>你可以假设 beginWord 和 endWord 是非空的，且二者不相同。</li></ul><p>示例：</p><pre><code>示例 1:输入:beginWord = &quot;hit&quot;,endWord = &quot;cog&quot;,wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]输出: 5解释: 一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,返回它的长度 5。示例 2:输入:beginWord = &quot;hit&quot;endWord = &quot;cog&quot;wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]输出: 0解释: endWord &quot;cog&quot; 不在字典中，所以无法进行转换。</code></pre><h2 id="方法（广度优先遍历）"><a href="#方法（广度优先遍历）" class="headerlink" title="方法（广度优先遍历）"></a>方法（广度优先遍历）</h2><p>我们可以把beginWord、endWord还有wordList中的所有单词想象成一张无向图中的节点。如果两个单词只有一个字符不同，则这两个节点相连。</p><p><img src="/img/127.%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99.jpg"></p><p>因此题意就变为了：在beginWord到endWord两个节点间，找到一条最短路径。我们由“最短”想到了广度优先遍历。</p><p>要进行BFS，我们需要两个复制结构：</p><ul><li>一个队列</li><li>一个visited数组(或集合)，记录一个节点有没有被BFS遍历过，以避免重复遍历造成在图中无限循环。</li></ul><p>注意：对于树的BFS只需要一个队列即可，因为树从上到下的结构决定了不会在其中重复遍历。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ladderLength</span><span class="hljs-params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;<br>    <span class="hljs-comment">//将wordList中的单词加入HashSet，以便我们在之后快速查询一个单词是否在字典中</span><br>    Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(wordList);<br>    <span class="hljs-comment">//如果字典中有beginWord，先要把它删掉</span><br>    <span class="hljs-keyword">if</span>(set.contains(beginWord))<br>        set.remove(beginWord);<br>    Queue&lt;String&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-comment">//uesd集合记录哪些字符串已经在BFS中被遍历过</span><br>    Set&lt;String&gt; used = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    queue.add(beginWord);<br>    used.add(beginWord);<br>    <span class="hljs-keyword">int</span> step = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//进入BFS流程</span><br>    <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>        <span class="hljs-keyword">int</span> size = queue.size();<br>        step++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>            String str = queue.poll();<br>            <span class="hljs-comment">//如果找到了endWord，直接返回</span><br>            <span class="hljs-keyword">if</span>(str.equals(endWord))<br>                <span class="hljs-keyword">return</span> step;<br>            <span class="hljs-comment">//依次尝试将str中的每一个字符修改为a到z中的一个，看看字典中有没有相应字符</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; str.length(); j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-string">&#x27;a&#x27;</span>; k &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; k++)&#123;<br>                    <span class="hljs-keyword">char</span>[] arr = str.toCharArray();<br>                    arr[j] = (<span class="hljs-keyword">char</span>)k;<br>                    String new_str = <span class="hljs-keyword">new</span> String(arr);<br>                    <span class="hljs-keyword">if</span>(set.contains(new_str) &amp;&amp; !used.contains(new_str))&#123;<br>                        queue.add(new_str);<br>                        used.add(new_str);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】200.岛屿数量</title>
    <link href="/2021/02/17/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <url>/2021/02/17/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200.岛屿数量"></a>200.岛屿数量</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><pre><code>示例 1:输入:[[&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;0&#39;],[&#39;1&#39;,&#39;1&#39;,&#39;0&#39;,&#39;1&#39;,&#39;0&#39;],[&#39;1&#39;,&#39;1&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;],[&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;]]输出: 1示例 2:输入:[[&#39;1&#39;,&#39;1&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;],[&#39;1&#39;,&#39;1&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;],[&#39;0&#39;,&#39;0&#39;,&#39;1&#39;,&#39;0&#39;,&#39;0&#39;],[&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;1&#39;,&#39;1&#39;]]输出: 3解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>每遍历矩阵中的一个值，进入到感染函数中去，感染函数会把连在一块的1全部变成2。感染过程完成后，岛数量加1（初始为0）。之后遍历过程中如果是2或0直接跳过，直到再遇到1时进入感染过程。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-keyword">null</span> || m.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> N = m.length;<br>    <span class="hljs-keyword">int</span> M = m[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-keyword">if</span> (m[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                res++;<br>                infect(m, i, j, N, M);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infect</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] m, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> M)</span> </span>&#123;<br>    <span class="hljs-comment">//只当一个位置为1时才进行感染过程</span><br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= N || j &lt; <span class="hljs-number">0</span> || j &gt;= M || m[i][j] != <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    m[i][j] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>    infect(m, i + <span class="hljs-number">1</span>, j, N, M);<br>    infect(m, i - <span class="hljs-number">1</span>, j, N, M);<br>    infect(m, i, j + <span class="hljs-number">1</span>, N, M);<br>    infect(m, i, j - <span class="hljs-number">1</span>, N, M);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】133.克隆图</title>
    <link href="/2021/02/17/133%20%E5%85%8B%E9%9A%86%E5%9B%BE/"/>
    <url>/2021/02/17/133%20%E5%85%8B%E9%9A%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="133-克隆图"><a href="#133-克隆图" class="headerlink" title="133 克隆图"></a>133 克隆图</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你无向连通图中一个节点的引用，请你返回该图的深拷贝（克隆）。</p><p>图中的每个节点都包含它的值 val（int） 和其邻居的列表（list[Node]）。</p><pre><code>class Node &#123;    public int val;    public List&lt;Node&gt; neighbors;&#125;</code></pre><p> 邻接列表 是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。</p><p>给定节点将始终是图中的第一个节点（值为 1）。你必须将 给定节点的拷贝 作为对克隆图的引用返回。</p><h2 id="方法一（DFS）"><a href="#方法一（DFS）" class="headerlink" title="方法一（DFS）"></a>方法一（DFS）</h2><p>深拷贝一个图的意思为：要重新构建一张新的图，其中所有的节点都需要new出来，图的值和结构都和原图一样。</p><p>根据给定的这个节点，可以通过深度优先遍历走遍图中的所有节点。每到一个节点，先判断其是否访问过。</p><ul><li>若这个节点已经访问过，则直接返回它的拷贝节点。</li><li>若这个节点还未访问过，就根据这个节点new出一个新的拷贝节点。先给这个新节点赋值，再填充它的邻接列表。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">//map的key为原图中的节点，value为根据它拷贝出的新节点</span><br>    Map&lt;Node, Node&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">//此递归函数会返回node的深拷贝节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">cloneGraph</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        <span class="hljs-comment">//递归结束条件</span><br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//若这个节点已经访问过，则直接返回它的拷贝节点。</span><br>        <span class="hljs-keyword">if</span>(map.containsKey(node))<br>            <span class="hljs-keyword">return</span> map.get(node);<br>        <span class="hljs-comment">//若这个节点还未访问过，就根据这个节点构造一个新的拷贝节点</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(node.val);<br>        <span class="hljs-comment">//这时已经访问完了节点node，因此要更新map</span><br>        map.put(node, newNode);<br>        <span class="hljs-comment">//根据node的邻接列表，填充新节点newNode的邻接列表</span><br>        <span class="hljs-keyword">for</span>(Node neighbor: node.neighbors)&#123;<br>            newNode.neighbors.add(cloneGraph(neighbor));<br>        &#125;<br>        <span class="hljs-keyword">return</span> newNode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度：O(N) 每个节点只会被访问一次</li><li>空间复杂度：O(N) 哈希表需要O(N)的空间，递归使用的栈深度需要O(H)的空间（H为图的深度）。总空间复杂度为O(N)</li></ul><h2 id="方法二（BFS）"><a href="#方法二（BFS）" class="headerlink" title="方法二（BFS）"></a>方法二（BFS）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">cloneGraph</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//map的key为原图中的节点，value为根据它拷贝出的新节点</span><br>        Map&lt;Node, Node&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Queue&lt;Node&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-comment">//先将node节点入队列</span><br>        queue.add(node);<br>        map.put(node, <span class="hljs-keyword">new</span> Node(node.val));<br>        <span class="hljs-comment">//通过BFS遍历到所有节点，在遍历的过程中更新map</span><br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            Node temp = queue.poll();<br>            <span class="hljs-keyword">for</span>(Node neighbor: temp.neighbors)&#123;<br>                <span class="hljs-comment">//如果此节点未被遍历过，一方面正常的走BFS的流程，将其入队列</span><br>                <span class="hljs-comment">//另一方面构造它的拷贝节点，填充拷贝节点的值，并更新map</span><br>                <span class="hljs-keyword">if</span>(!map.containsKey(neighbor))&#123;<br>                    map.put(neighbor, <span class="hljs-keyword">new</span> Node(neighbor.val));<br>                    queue.add(neighbor);<br>                &#125;<br>                <span class="hljs-comment">//填充该节点neighbor对应的拷贝节点neighbor&#x27;的邻接列表</span><br>                <span class="hljs-comment">//在邻接链表中加入temp&#x27;和neighbor&#x27;的邻接关系</span><br>                map.get(neighbor).neighbors.add(map.get(temp));<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//至此，所有新节点的值和邻接列表都已填充好，可以返回。</span><br>        <span class="hljs-keyword">return</span> map.get(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度：O(N) 每个节点只会被访问一次</li><li>空间复杂度：O(N) 哈希表需要O(N)的空间，BFS所用的队列最多需要O(N)的空间，总空间复杂度为O(N)</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】207.课程表</title>
    <link href="/2021/02/17/207.%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <url>/2021/02/17/207.%E8%AF%BE%E7%A8%8B%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207.课程表"></a>207.课程表</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]</p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><p> </p><pre><code>示例 1:输入: 2, [[1,0]] 输出: true解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。示例 2:输入: 2, [[1,0],[0,1]]输出: false解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>对于这种问题，我们都可以画一张有向图，其中节点对应课程，有向边表示优先级顺序。<br>那么在优先级限制下的调度问题就等价于拓扑排序问题。</p><p><strong>**拓扑排序</strong>：给定一幅有向图，将所有的节点排序，使得所有有向边均从排在前面的节点指向排在后面的节点。</p><p>而一旦一个优先级问题的有向图中存在环，则不可能找出一个正确的拓扑排序。因此，本题目实则是判断这个有向图中是否存在环。我们有DFS和BFS两种方式。</p><h2 id="方法一-DFS"><a href="#方法一-DFS" class="headerlink" title="方法一(DFS)"></a>方法一(DFS)</h2><p>算法步骤：</p><ul><li>首先进行建图操作，即通过给定的prerequisites建立一张用邻接表表示的图。</li><li>status数组用于记录节点的访问状态，访问过了标记 -1，正在访问标记 1，还未访问标记 0</li><li>从图中的每个节点开始进行深度优先搜索，一旦从该节点出发可以找到环，则返回false.如果从所有节点开始都找不到环，则返回true。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    List&lt;List&lt;Integer&gt;&gt; adj;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-keyword">int</span>[][] prerequisites)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] status = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>            status[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//第一步：将给定的prerequisites转换为邻接表</span><br>        adj = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>            adj.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] item: prerequisites)&#123;<br>            adj.get(item[<span class="hljs-number">1</span>]).add(item[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-comment">//从图中的每一个节点开始进行DFS，如果以任意一个节点开始都不存在环，则返回true</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)&#123;<br>            <span class="hljs-keyword">if</span>(dfs(i, status))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//判断从节点i出发，能否找到一个环。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> status[])</span></span>&#123;<br>        <span class="hljs-comment">//若当前节点i在此轮dfs中的状态为正在访问，说明在本轮dfs中之前遍历到了i,现在又回到了i，则存在环</span><br>        <span class="hljs-keyword">if</span>(status[i] == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">//如果当前节点i在之前某次dfs中已经访问完了，说明从i出发不会有环，返回false。</span><br>        <span class="hljs-keyword">if</span>(status[i] == -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        status[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> neighbor : adj.get(i))&#123;<br>            <span class="hljs-comment">//如果从i的一个邻居neighbor出发可以找到一个环，因为i可以走到neighbor。所以从i出发也可以找到一个环，返回true</span><br>            <span class="hljs-keyword">if</span>(dfs(neighbor, status))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//此刻i已经访问完，标记其为已访问</span><br>        status[i] = -<span class="hljs-number">1</span>;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度：O(n + m) 对图进行深度优先搜索的时间复杂度</li><li>空间复杂度：O(n + m) 邻接表需要O(n + m)的空间，DFS队列需要O(n)的栈空间，总空间复杂度为O(n + m)</li></ul><h2 id="方法二（BFS"><a href="#方法二（BFS" class="headerlink" title="方法二（BFS)"></a>方法二（BFS)</h2><p>算法步骤：</p><ul><li>准备一个队列，先让入度为0的节点入队列。（入度为0代表此课无先修课程，可以选）</li><li>接着进入BFS流程，每次让队首节点出列，并相应地更新相连节点的入度。（出列代表课被选，同时相邻节点的先修课程就少了一门）</li><li>如果某个节点的入度更新后为0，则让它入队列。</li></ul><p>我们用一个变量count记录遍历过的节点数。如果BFS流程走完时，count不等于prerequisites，则意味着无法选齐所有的课，返回false。否则返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    List&lt;List&lt;Integer&gt;&gt; adj;<br>    <span class="hljs-keyword">int</span>[] indegree;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-keyword">int</span>[][] prerequisites)</span> </span>&#123;<br>        <span class="hljs-comment">//根据给定的prerequisites构造邻接表和入度表</span><br>        adj = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        indegree = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>            adj.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] item: prerequisites)&#123;<br>            adj.get(item[<span class="hljs-number">1</span>]).add(item[<span class="hljs-number">0</span>]);<br>            indegree[item[<span class="hljs-number">0</span>]]++;<br>        &#125;<br>        <span class="hljs-comment">//先让入度为0的节点入队列</span><br>        Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)&#123;<br>            <span class="hljs-keyword">if</span>(indegree[i] == <span class="hljs-number">0</span>)<br>                queue.offer(i);<br>        &#125;<br>        <span class="hljs-comment">//count用来记录遍历到的节点个数</span><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> temp = queue.poll();<br>            count++;<br>            <span class="hljs-comment">//每遍历到一个节点，便更新它相邻节点的入度。</span><br>            <span class="hljs-comment">//如果相邻节点的入度更新后为0，则将其入队</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> neighbor: adj.get(temp))&#123;<br>                indegree[neighbor]--;<br>                <span class="hljs-keyword">if</span>(indegree[neighbor] == <span class="hljs-number">0</span>)<br>                    queue.offer(neighbor);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count == numCourses;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度：O(n + m) 对图进行广度优先搜索的时间复杂度</li><li>空间复杂度：O(n + m) 邻接表需要O(n + m)的空间，BFS队列需要O(n)的空间，总空间复杂度为O(n + m)</li></ul><h1 id="210-课程表-II"><a href="#210-课程表-II" class="headerlink" title="210.课程表 II"></a>210.课程表 II</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>现在你总共有 n 门课需要选，记为 0 到 n-1。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p><p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p><p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p><pre><code>示例 1:输入: 2, [[1,0]] 输出: [0,1]解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。示例 2:输入: 4, [[1,0],[2,0],[3,1],[3,2]]输出: [0,1,2,3] or [0,2,1,3]解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</code></pre><h2 id="方法一（DFS）"><a href="#方法一（DFS）" class="headerlink" title="方法一（DFS）"></a>方法一（DFS）</h2><p>此题与第207题的唯一不同在于，207题只需要判断是否能找到一种可能的拓扑排序。这道题让我们求出具体的一种拓扑排序。</p><p>我们只需用一个栈纪录已访问的序列即可，在dfs函数中，一旦遍历完当前节点i的所有邻居，并且从所有邻居开始都不存在有向环，则将节点i入栈。（注意：若不存在有向环，当i入栈时，它的所有邻居均已入栈，于是i位于栈顶，同时i是拓扑排序的起点）。</p><p>在深度优先遍历后，我们将栈中的元素依次弹出，就可以得到正确的拓扑排序了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    List&lt;List&lt;Integer&gt;&gt; adj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] findOrder(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-keyword">int</span>[][] prerequisites) &#123;<br>        <span class="hljs-keyword">if</span>(numCourses == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//status数组用于记录节点的访问状态，访问过了标记 -1，正在访问标记 1，还未访问标记 0。数组初始化为全0</span><br>        <span class="hljs-keyword">int</span>[] status = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>            status[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//第一步：将给定的prerequisites转换为邻接表</span><br>        adj = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>            adj.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] item: prerequisites)&#123;<br>            adj.get(item[<span class="hljs-number">1</span>]).add(item[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-comment">//栈stack用于保存拓扑排序的序列</span><br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)&#123;<br>            <span class="hljs-keyword">if</span>(dfs(i, status, stack))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++) &#123;<br>            res[i] = stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-comment">//判断从节点i出发，能否找到一个环。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> status[], Stack&lt;Integer&gt; stack)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(status[i] == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span>(status[i] == -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        status[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> neighbor : adj.get(i))&#123;<br>            <span class="hljs-keyword">if</span>(dfs(neighbor, status, stack))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        status[i] = -<span class="hljs-number">1</span>;<br>        stack.push(i);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二（BFS-1"><a href="#方法二（BFS-1" class="headerlink" title="方法二（BFS)"></a>方法二（BFS)</h2><p>和上一题的唯一不同在于，上一题只需要判断BFS结束后的count是否等于numCourses即可。这道题我们要用一个数组记录下BFS过程中所经过的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    List&lt;List&lt;Integer&gt;&gt; adj;<br>    <span class="hljs-keyword">int</span>[] indegree;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] findOrder(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-keyword">int</span>[][] prerequisites) &#123;<br>        <span class="hljs-keyword">if</span>(numCourses == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];<br>        <span class="hljs-comment">//根据给定的prerequisites构造邻接表和入度表</span><br>        adj = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        indegree = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>            adj.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] item: prerequisites)&#123;<br>            adj.get(item[<span class="hljs-number">1</span>]).add(item[<span class="hljs-number">0</span>]);<br>            indegree[item[<span class="hljs-number">0</span>]]++;<br>        &#125;<br>        <span class="hljs-comment">//先让入度为0的节点入队列</span><br>        Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)&#123;<br>            <span class="hljs-keyword">if</span>(indegree[i] == <span class="hljs-number">0</span>)<br>                queue.offer(i);<br>        &#125;<br>        <span class="hljs-comment">//count用来记录遍历到的节点个数</span><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> temp = queue.poll();<br>            res[count++] = temp;<br>            <span class="hljs-comment">//每遍历到一个节点，便更新它相邻节点的入度。</span><br>            <span class="hljs-comment">//如果相邻节点的入度更新后为0，则将其入队</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> neighbor: adj.get(temp))&#123;<br>                indegree[neighbor]--;<br>                <span class="hljs-keyword">if</span>(indegree[neighbor] == <span class="hljs-number">0</span>)<br>                    queue.offer(neighbor);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(count != numCourses)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】515.在每个树行中找最大值</title>
    <link href="/2021/02/17/515.%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <url>/2021/02/17/515.%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>您需要在二叉树的每一行中找到最大的值。</p><pre><code>示例：输入:           1         / \        3   2       / \   \        5   3   9 输出: [1, 3, 9]</code></pre><h2 id="方法一（BFS"><a href="#方法一（BFS" class="headerlink" title="方法一（BFS)"></a>方法一（BFS)</h2><p>在广度优先遍历的时候用变量size记录每一层的节点个数，在遍历这一层时找到此层中的最大值，添加到结果数组中即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">largestValues</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> res;<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-comment">//while循环代表整个BFS的逻辑</span><br>    <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>        <span class="hljs-comment">//当前层节点数量</span><br>        <span class="hljs-keyword">int</span> size = queue.size();<br>        <span class="hljs-keyword">int</span> max = Integer.MIN_VALUE;<br>        <span class="hljs-comment">//for循环表示每一层的遍历</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; size; i++)&#123;<br>            TreeNode node = queue.poll();<br>            max = Math.max(max, node.val);<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-keyword">null</span>)<br>                queue.add(node.left);<br>            <span class="hljs-keyword">if</span>(node.right != <span class="hljs-keyword">null</span>)<br>                queue.add(node.right);<br>        &#125;<br>        res.add(max);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二（DFS"><a href="#方法二（DFS" class="headerlink" title="方法二（DFS)"></a>方法二（DFS)</h2><p>在进行深度优先遍历时，每次遍历到新的一层时，我们都将现在遍历到的这个该层节点加入到结果数组res中（但其实上这个节点并不一定是该层最大的，不过没关系，我们之后再更新它）。之后再遍历到同在这一层的其他节点时再进行更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">largestValues</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        dfs(root, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> level)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//如果是第一次来到第level层，那就先把当前遍历到达level层的这个节点加入到结果数组res中</span><br>        <span class="hljs-keyword">if</span>(level == res.size() + <span class="hljs-number">1</span>)<br>            res.add(root.val);<br>        <span class="hljs-comment">//之后再遍历到同在level层的其他节点时对res中的值进行更新</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">int</span> max = Math.max(res.get(level - <span class="hljs-number">1</span>), root.val);<br>            res.set(level - <span class="hljs-number">1</span>, max);<br>        &#125;<br>        dfs(root.left, level + <span class="hljs-number">1</span>);<br>        dfs(root.right, level + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】542.01矩阵</title>
    <link href="/2021/02/17/542.01%E7%9F%A9%E9%98%B5/"/>
    <url>/2021/02/17/542.01%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="542-01矩阵"><a href="#542-01矩阵" class="headerlink" title="542.01矩阵"></a>542.01矩阵</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。</p><p>两个相邻元素间的距离为 1 。</p><pre><code>示例 1:输入:0 0 00 1 00 0 0输出:0 0 00 1 00 0 0示例 2:输入:0 0 00 1 01 1 1输出:0 0 00 1 01 2 1</code></pre><h2 id="方法（BFS）"><a href="#方法（BFS）" class="headerlink" title="方法（BFS）"></a>方法（BFS）</h2><p>对于二叉树的BFS，都是单源BFS。<br>而对于图的BFS，大多是多源BFS</p><p>因为二叉树只有一个根节点，先把根节点入队，再一层层遍历即可。而图可以有许多源点，因此需要先把这些源点都入队，再一层层遍历。</p><p>对于本题来说，先将所有的0（源点）入队列，再从0开始一层一层向周围未遍历到的1扩散。最后将矩阵中所有的点都遍历到。</p><p>注意：树是有向的，因此无需标记一个节点是否被访问过。而对于无向图来说，为了防止一个节点多次入队，需要在访问它之后将它标记为已访问。（对于本题来说，将其标记为非-1）</p><p>算法步骤：</p><ul><li>先遍历一遍矩阵，将0出现的位置索引入队列，并将所有的1置为-1，表明这是还没被访问过的1.</li><li>用dx和dy两个矩阵来表示向上下左右四个位置的移动</li><li>移动到没有访问过的1时，将其入队列，并更新matrix[newX][newY]（本来为-1）为matrix[x][y] + 1。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] updateMatrix(<span class="hljs-keyword">int</span>[][] matrix) &#123;<br>    Queue&lt;<span class="hljs-keyword">int</span>[]&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">int</span> m = matrix.length, n = matrix[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-comment">//先遍历一次矩阵，将0出现的位置索引入队列</span><br>    <span class="hljs-comment">//并把1的位置设置为-1，表示这是还没被访问的1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i, j&#125;);<br>            <span class="hljs-keyword">else</span><br>                matrix[i][j] = -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] dx = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span>[] dy = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>        <span class="hljs-keyword">int</span>[] node = queue.poll();<br>        <span class="hljs-keyword">int</span> x = node[<span class="hljs-number">0</span>], y = node[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-comment">//newX和newY为附近邻居的位置索引</span><br>            <span class="hljs-keyword">int</span> newX = x + dx[i];<br>            <span class="hljs-keyword">int</span> newY = y + dy[i];<br>            <span class="hljs-comment">//如果邻居值为-1，说明它是还没被访问过的1.</span><br>            <span class="hljs-comment">//则这个点到0的距离就可以更新为matrix[x][y] + 1,注意：这步更新完之后这个点就有实际值而不是-1了，相当于被标记了。</span><br>            <span class="hljs-comment">//当遇到被标记过（访问过）的点时，不将其入队列</span><br>            <span class="hljs-keyword">if</span>(newX &gt;= <span class="hljs-number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &gt;= <span class="hljs-number">0</span> &amp;&amp; newY &lt; n &amp;&amp; matrix[newX][newY] == -<span class="hljs-number">1</span>)&#123;<br>                matrix[newX][newY] = matrix[x][y] + <span class="hljs-number">1</span>;<br>                queue.offer(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;newX, newY&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> matrix;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目<a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/">1162. 地图分析</a>和此题目类似</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://leetcode-cn.com/problems/01-matrix/solution/2chong-bfs-xiang-jie-dp-bi-xu-miao-dong-by-sweetie/">Sweetiee的leetcode题解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】785.判断二分图</title>
    <link href="/2021/02/17/785%20%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    <url>/2021/02/17/785%20%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="785-判断二分图"><a href="#785-判断二分图" class="headerlink" title="785 判断二分图"></a>785 判断二分图</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个无向图graph，当这个图为二分图时返回true。</p><p>如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p><p>graph将会以邻接表方式给出，graph[i]表示图中与节点i相连的所有节点。每个节点都是一个在0到graph.length-1之间的整数。这图中没有自环和平行边： graph[i] 中不存在i，并且graph[i]中没有重复的值。</p><pre><code>示例 1:输入: [[1,3], [0,2], [1,3], [0,2]]输出: true解释: 无向图如下:0----1|    ||    |3----2我们可以将节点分成两组: &#123;0, 2&#125; 和 &#123;1, 3&#125;。示例 2:输入: [[1,2,3], [0,2], [0,1,3], [0,2]]输出: false解释: 无向图如下:0----1| \  ||  \ |3----2我们不能将节点分割成两个独立的子集。</code></pre><h2 id="方法一（深度优先搜索）"><a href="#方法一（深度优先搜索）" class="headerlink" title="方法一（深度优先搜索）"></a>方法一（深度优先搜索）</h2><p>对图进行DFS，在遍历的过程中用两种颜色对节点进行染色，其中相邻的节点要染成不同的颜色。如果在遍历的过程中发现相邻的节点颜色相同，那么它不是二分图。如果用这样的染色策略对所有节点染色成功，那么它是二分图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] visited;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph)</span> </span>&#123;<br>    <span class="hljs-comment">//visited数组记录一个节点有没有被染色，若为0则没被染色，若为-1或1则被染成相应的颜色</span><br>    visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[graph.length];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.length; i++)&#123;<br>        <span class="hljs-comment">//如果一个节点没有被染色，并且从它出发不能成功地将图染成两种颜色，则返回false</span><br>        <span class="hljs-keyword">if</span>(visited[i] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!dfs(graph, i, <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-comment">//从将节点i染成颜色color开始，判断能否将图染成二分图</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> color)</span></span>&#123;<br>    <span class="hljs-comment">//递归返回条件：如果一个节点已经染色了，判断这个节点的颜色和当前要给它染的颜色color是否相同</span><br>    <span class="hljs-keyword">if</span>(visited[i] != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> visited[i] == color;<br>    <span class="hljs-comment">//将当前节点染成color色，并将它的所有相邻节点染成-color色</span><br>    visited[i] = color;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j : graph[i])&#123;<br>        <span class="hljs-comment">//如果从i的一个相邻节点j开始，都没能成功地将图染成两种颜色，那么从i开始肯定也不行，返回false</span><br>        <span class="hljs-keyword">if</span>(!dfs(graph, j, -color))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二（广度优先遍历）"><a href="#方法二（广度优先遍历）" class="headerlink" title="方法二（广度优先遍历）"></a>方法二（广度优先遍历）</h2><p>思路和方法一相同，只是遍历的方法从DFS改成了BFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph)</span> </span>&#123;<br>    <span class="hljs-comment">//visited数组记录一个节点有没有被染色，若为0则没被染色，若为-1或1则被染成相应的颜色</span><br>    <span class="hljs-keyword">int</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[graph.length];<br>    <span class="hljs-comment">//如果经过一遍BFS，尚且有节点未被染色，说明这个节点和刚才遍历到的节点不在一个连通图，要从这个节点开始再进行BFS</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(visited[i] != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        queue.add(i);<br>        visited[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> cur = queue.poll();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> neighbor : graph[cur])&#123;<br>                <span class="hljs-comment">//如果相邻节点已经染色，并且和cur颜色一样，说明不是二分图，返回false</span><br>                <span class="hljs-keyword">if</span>(visited[neighbor] == visited[cur])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                <span class="hljs-comment">//如果有cur的相邻节点尚未染色，则将这个相邻节点染成和cur不同的颜色</span><br>                <span class="hljs-keyword">if</span>(visited[neighbor] == <span class="hljs-number">0</span>)&#123;<br>                    visited[neighbor] = -visited[cur];<br>                    queue.add(neighbor);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法三（并查集）"><a href="#方法三（并查集）" class="headerlink" title="方法三（并查集）"></a>方法三（并查集）</h2><p>在一个二分图中，一个节点的所有邻居都具有相同的颜色，并且和这个节点颜色不同。</p><p>因此我们如果用并查集来看这个问题，则上面一句话可以翻译如下：在二分图中，一个节点的所有邻居都在相同的集合中，并且和这个节点所在的集合不同。</p><p>我们可以遍历所有节点，当遍历到一个节点时，先判断它是否有邻居节点和它已经在一个集合中了(find)，如果有则不是二分图，直接返回false，否则将它的所有邻居节点所在的集合合并(union)，再接着遍历下一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph)</span> </span>&#123;<br>        UnionFindSet ufs = <span class="hljs-keyword">new</span> UnionFindSet();<br>        List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.length; i++)<br>            nodes.add(i);<br>        ufs.makeSets(nodes);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> cur = i;<br>            <span class="hljs-keyword">int</span>[] neighbors = graph[cur];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> neighbor : neighbors)&#123;<br>                <span class="hljs-keyword">if</span>(ufs.findHead(neighbor) == ufs.findHead(cur))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                ufs.union(neighbor, neighbors[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFindSet</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> HashMap&lt;Integer, Integer&gt; fatherMap;   <span class="hljs-comment">//key为child，value为father</span><br>        <span class="hljs-keyword">public</span> HashMap&lt;Integer, Integer&gt; sizeMap;<span class="hljs-comment">//value为key所在的集合的大小是多少</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UnionFindSet</span><span class="hljs-params">()</span> </span>&#123;<br>            fatherMap = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>            sizeMap = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSets</span><span class="hljs-params">(List&lt;Integer&gt; nodes)</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> node : nodes) &#123;<br>                fatherMap.put(node, node);   <span class="hljs-comment">//在最开始，每一个节点自己成一个集合</span><br>                sizeMap.put(node, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//给一个元素node，返回它所处集合的代表节点。在这个过程中将链变扁平</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> node)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> father = fatherMap.get(node);<br>            <span class="hljs-keyword">if</span> (father != node) &#123;<br>                father = findHead(father);<br>            &#125;<br>            fatherMap.put(node, father);<br>            <span class="hljs-keyword">return</span> father;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> aHead = findHead(a);<br>            <span class="hljs-keyword">int</span> bHead = findHead(b);<br>            <span class="hljs-keyword">if</span> (aHead != bHead) &#123;<br>                <span class="hljs-keyword">int</span> aSetSize= sizeMap.get(aHead);<br>                <span class="hljs-keyword">int</span> bSetSize = sizeMap.get(bHead);<br>                <span class="hljs-keyword">if</span> (aSetSize &lt;= bSetSize) &#123;<br>                    fatherMap.put(aHead, bHead);<br>                    sizeMap.put(bHead, aSetSize + bSetSize);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    fatherMap.put(bHead, aHead);<br>                    sizeMap.put(aHead, aSetSize + bSetSize);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://leetcode-cn.com/problems/is-graph-bipartite/solution/pan-duan-er-fen-tu-by-leetcode-solution/">Leetcode官方题解</a></li><li><a href="https://leetcode-cn.com/problems/is-graph-bipartite/solution/bfs-dfs-bing-cha-ji-san-chong-fang-fa-pan-duan-er-/">Sweetiee的Leetcode题解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度（广度）优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】134.加油站</title>
    <link href="/2021/02/17/134.%E5%8A%A0%E6%B2%B9%E7%AB%99/"/>
    <url>/2021/02/17/134.%E5%8A%A0%E6%B2%B9%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134.加油站"></a>134.加油站</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。</p><p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p><p>说明: </p><p>如果题目有解，该答案即为唯一答案。<br>输入数组均为非空数组，且长度相同。<br>输入数组中的元素均为非负数。</p><pre><code>示例 1:输入: gas  = [1,2,3,4,5]cost = [3,4,5,1,2]输出: 3解释:从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。因此，3 可为起始索引。示例 2:输入: gas  = [2,3,4]cost = [3,4,3]输出: -1解释:你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。因此，无论怎样，你都不可能绕环路行驶一周。</code></pre><h2 id="方法（贪心算法）"><a href="#方法（贪心算法）" class="headerlink" title="方法（贪心算法）"></a>方法（贪心算法）</h2><p>在考虑问题的时候，可以把问题理解成图的形式，每个节点表示添加的油量，每条边表示消耗的油量。题目即让我们找到从哪个节点出发走完每一条边还能回到该节点。  </p><p>如果加油站提供的总油量大于走完每条边消耗的总油量（即gas[i]-cost[i]累加和大于0），则一定可以环绕一周，否则一定不可环绕一周。</p><p>算法步骤：</p><ul><li>从0位置开始遍历，一边记录gas[i]-cost[i]的差值总和total，一边寻找正确的出发点start</li><li>如果一个位置的gas[i]-cost[i]小于0，则它不能作为起始位置（因为从它开始根本跑不到下一个节点），于是我们把可能的开始位置更新为它的下一个节点。当前油量cur重置为0.</li><li>无论油够不够，一直遍历到结尾。如果遍历完成后（每个节点都走过了），total大于等于0，说明可以环绕一周，返回start。如果total小于0，说明不能环绕一周，返回-1.</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">canCompleteCircuit</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] gas, <span class="hljs-keyword">int</span>[] cost)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;       <span class="hljs-comment">//cur记录目前的油量</span><br>    <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;     <span class="hljs-comment">//记录开始位置（遍历过程不断更新）</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;gas.length;i++)&#123;<br>        total += (gas[i] - cost[i]);<br>        <span class="hljs-comment">//gas[i]-cost[i]小于0的位置不能作为开始位置，于是需要更新开始位置为下一个位置。cur重置0</span><br>        cur += (gas[i] - cost[i]);<br>        <span class="hljs-keyword">if</span>(cur &lt; <span class="hljs-number">0</span>)&#123;<br>            cur = <span class="hljs-number">0</span>;<br>            start = i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> total &gt;= <span class="hljs-number">0</span> ? start: -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】141.环形链表</title>
    <link href="/2021/02/17/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141 环形链表"></a>141 环形链表</h1><p><strong>题目：</strong><br>给定一个链表。判断链表中是否有环</p><p><strong>思路：</strong><br>双指针思路：一个快指针，一个慢指针。快指针一次走两步，慢指针一次走一步。两个指针若相遇，则有环。</p><p>哈希表思路：我们可以通过检查一个结点此前是否被访问过来判断链表是否为环形链表。常用的方法是使用哈希表。</p><p>算法：我们遍历所有结点并在哈希表中存储每个结点的引用（或内存地址）。如果当前结点为空结点 null（即已检测到链表尾部的下一个结点），那么我们已经遍历完整个链表，并且该链表不是环形链表。如果当前结点的引用已经存在于哈希表中，那么返回 true（即该链表为环形链表）。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    Set&lt;ListNode&gt; nodesSeen = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    <span class="hljs-keyword">while</span>(head != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(nodesSeen.contains(head))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">else</span><br>            nodesSeen.add(head);<br>        head = head.next;    <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】142.环形链表II</title>
    <link href="/2021/02/17/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/"/>
    <url>/2021/02/17/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/</url>
    
    <content type="html"><![CDATA[<h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142 环形链表 II"></a>142 环形链表 II</h1><p><strong>题目：</strong><br>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。<br>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。<br>说明：不允许修改给定的链表。</p><p>示例 1：<br>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。</p><p>示例 2：<br>输入：head = [1,2], pos = 0<br>输出：tail connects to node index 0<br>解释：链表中有一个环，其尾部连接到第一个节点。</p><p>不仅要判断是否有环，还要找到入环的第一个节点</p><p><strong>思路：</strong><br>在上一道题中已经知道如何判断一个链表有没有环。即采用快慢指针法，如果相遇则有环。进一步思考：两个指针相遇的节点一定在环中。可以从这个结点出发，一边继续移动一边计数，当再次回到这个节点时，就可以得到环中节点个数了。</p><p>知道了节点个数n。我们可以让快指针先向前移动n步。然后两个指针一起移动。当第慢指针指向环的入口节点时，快指针也已经围绕着环走了一圈，回到了入口节点，两指针相遇</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode meetnode = meetingNode(head);<br>        <span class="hljs-keyword">if</span>(meetnode == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//nodeinLoop变量用来保存环中节点的数目</span><br>        <span class="hljs-keyword">int</span> nodeinLoop = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//从相遇的节点meetnode出发,继续移动，再回到meetnode时，计数结束,得到环中节点数目</span><br>        ListNode cur = meetnode;<br>        <span class="hljs-keyword">while</span>(cur.next != meetnode)&#123;<br>            cur = cur.next;<br>            nodeinLoop++;<br>        &#125;<br>        <span class="hljs-comment">//知道节点数目后找入口节点</span><br>        <span class="hljs-comment">//先让快指针移动nodeinLoop步</span><br>        ListNode fast = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nodeinLoop; i++)<br>            fast = fast.next;<br>        <span class="hljs-comment">//再一起移动快慢指针，知道它们相遇于入口节点</span><br>        ListNode slow = head;<br>        <span class="hljs-keyword">while</span>(fast != slow)&#123;<br>            fast = fast.next;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br>    <span class="hljs-comment">//meetingNode函数找到快慢指针在环中相遇的节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">meetingNode</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//定义快慢指针，快指针一次走两步，满指针一次走一步。如果链表有环，则两指针一定会相遇</span><br>        ListNode fast = head;<br>        ListNode slow = head;<br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>)&#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br>            <span class="hljs-keyword">if</span>(fast == slow)<br>                <span class="hljs-keyword">return</span> fast;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】148.排序链表</title>
    <link href="/2021/02/17/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="148-排序链表"><a href="#148-排序链表" class="headerlink" title="148.排序链表"></a>148.排序链表</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><pre><code>示例 1:输入: 4-&gt;2-&gt;1-&gt;3输出: 1-&gt;2-&gt;3-&gt;4示例 2:输入: -1-&gt;5-&gt;3-&gt;4-&gt;0输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</code></pre><h2 id="方法-归并排序思路"><a href="#方法-归并排序思路" class="headerlink" title="方法(归并排序思路)"></a>方法(归并排序思路)</h2><ol><li>首先用快慢指针法将链表从中间断开</li><li>对左边链表排序</li><li>对右边链表排序</li><li>合并左右两个链表，返回链表头</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//递归中止条件：链表只有一个节点</span><br>    <span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> head;<br>    <span class="hljs-comment">//快慢指针，快指针走到尾，慢指针走到中点</span><br>    ListNode fast = head, slow = head;<br>    <span class="hljs-keyword">while</span>(fast.next != <span class="hljs-keyword">null</span> &amp;&amp; fast.next.next != <span class="hljs-keyword">null</span>)&#123;<br>        fast = fast.next.next;<br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-comment">//从中点将链表断成两部分</span><br>    ListNode tail = slow;<br>    slow = slow.next;<br>    tail.next = <span class="hljs-keyword">null</span>;<br>    ListNode L = sortList(head);<br>    ListNode R = sortList(slow);<br>    <span class="hljs-keyword">return</span> merge(L, R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">merge</span><span class="hljs-params">(ListNode left, ListNode right)</span></span>&#123;<br>    ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    ListNode cur = dummy;<br>    <span class="hljs-keyword">while</span>(left != <span class="hljs-keyword">null</span> &amp;&amp; right != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(left.val &lt;= right.val)&#123;<br>            cur.next = left;<br>            cur = cur.next;<br>            left = left.next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cur.next = right;<br>            cur = cur.next;<br>            right = right.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(left != <span class="hljs-keyword">null</span>)<br>        cur.next = left;<br>    <span class="hljs-keyword">if</span>(right != <span class="hljs-keyword">null</span>)<br>        cur.next = right;<br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】143.重排链表</title>
    <link href="/2021/02/17/143.%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/143.%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="143-重排链表"><a href="#143-重排链表" class="headerlink" title="143 重排链表"></a>143 重排链表</h1><p><strong>题目：</strong><br>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，<br>将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例 1:<br>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.<br>示例 2:<br>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</p><p><strong>思路：</strong><br>分三个步骤：</p><ol><li>找到中间节点，根据中间节点把链表分为左右两部分</li><li>把右半部分节点反转</li><li>将右半部分链表的节点插入左半部分中点</li></ol><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    ListNode pre = <span class="hljs-keyword">null</span>;<br>    ListNode cur = head;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        ListNode temp = cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】147.对链表进行插入排序</title>
    <link href="/2021/02/17/147.%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/02/17/147.%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="147-对链表进行插入排序"><a href="#147-对链表进行插入排序" class="headerlink" title="147.对链表进行插入排序"></a>147.对链表进行插入排序</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>对链表进行插入排序。</p><pre><code>示例 1：输入: 4-&gt;2-&gt;1-&gt;3输出: 1-&gt;2-&gt;3-&gt;4示例 2：输入: -1-&gt;5-&gt;3-&gt;4-&gt;0输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</code></pre><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>新建一个列表，将链表中的元素全部加入到这个链表中。然后对这个列表进行排序。最后将列表中排序好的元素再依次放回链表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">insertionSortList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    ListNode cur = head;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        list.add(cur.val);<br>        cur = cur.next;<br>    &#125;<br>    Collections.sort(list);<br>    cur = head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : list)&#123;<br>        cur.val = num;<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>设置一个指针pre和一个指针cur，pre初始化为head，cur初始化为head.next。从前到后遍历链表中的每一个元素</p><ul><li>如果pre所指的值小于cur所指的值（已经有序），那么pre和cur正常向后移动</li><li>如果pre所指的值大于cur所指的值，那么cur所指节点需要在前面已经有序的部分找到相应位置进行插入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">insertionSortList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">//链表为空或者只有一个节点的情况</span><br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> head;<br>    ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    dummy.next = head;<br>    ListNode pre = head, cur = head.next;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(pre.val &lt;= cur.val)&#123;<br>            pre = cur;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//节点node用来遍历找到插入位置</span><br>            ListNode node = dummy;<br>            <span class="hljs-comment">//找到一个位置，使得node &lt; cur &lt; node.next</span><br>            <span class="hljs-keyword">while</span>(node.next != <span class="hljs-keyword">null</span> &amp;&amp; node.next.val &lt; cur.val)<br>                node = node.next;<br>            <span class="hljs-comment">//将原有位置的cur删除</span><br>            pre.next = cur.next;<br>            <span class="hljs-comment">//将cur插入到新位置</span><br>            cur.next = node.next;<br>            node.next = cur;<br>            <span class="hljs-comment">//插入结束后，cur回到原有位置（pre后面），继续后面的遍历</span><br>            cur = pre.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】2.两数相加</title>
    <link href="/2021/02/17/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2021/02/17/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储 一位数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><pre><code>示例：输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补0，比如 987 + 23 = 987 + 023 = 1010<br>每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值<br>如果两个链表全部遍历完毕后，进位值为1，则在新链表最前方添加节点1</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>    ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    ListNode cur = dummy;<br>    <span class="hljs-comment">//carry表示进位值</span><br>    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">int</span> x = l1 == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : l1.val;<br>        <span class="hljs-keyword">int</span> y = l2 == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : l2.val;<br>        <span class="hljs-keyword">int</span> sum = x + y + carry;<br>        <span class="hljs-comment">//更新向下一位的进位值</span><br>        carry = sum / <span class="hljs-number">10</span>;<br>        sum = sum % <span class="hljs-number">10</span>;<br>        cur.next = <span class="hljs-keyword">new</span> ListNode(sum);<br>        cur = cur.next;<br>        <span class="hljs-keyword">if</span> (l1 != <span class="hljs-keyword">null</span>)<br>            l1 = l1.next;<br>        <span class="hljs-keyword">if</span> (l2 != <span class="hljs-keyword">null</span>)<br>            l2 = l2.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(carry == <span class="hljs-number">1</span>)<br>        cur.next = <span class="hljs-keyword">new</span> ListNode(carry);<br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】1579.保证图可完全遍历</title>
    <link href="/2021/02/17/1579.%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/"/>
    <url>/2021/02/17/1579.%E4%BF%9D%E8%AF%81%E5%9B%BE%E5%8F%AF%E5%AE%8C%E5%85%A8%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1579-保证图可完全遍历"><a href="#1579-保证图可完全遍历" class="headerlink" title="1579.保证图可完全遍历"></a>1579.保证图可完全遍历</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Alice 和 Bob 共有一个无向图，其中包含 n 个节点和 3  种类型的边：</p><ul><li>类型 1：只能由 Alice 遍历。</li><li>类型 2：只能由 Bob 遍历。</li><li>类型 3：Alice 和 Bob 都可以遍历（共享边）。</li></ul><p>给你一个数组 edges ，其中 edges[i] = [typei, ui, vi] 表示节点 ui 和 vi 之间存在类型为 typei 的共享边。请你在保证图仍能够被 Alice和 Bob 完全遍历的前提下，找出可以删除的最大边数。如果从任何节点开始，Alice 和 Bob 都可以到达所有其他节点，则认为图是可以完全遍历的。</p><p>返回可以删除的最大边数，如果 Alice 和 Bob 无法完全遍历图，则返回 -1 。</p><p><strong>示例</strong></p><pre><code>输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]输出：2解释：如果删除 [1,1,2] 和 [1,1,3] 这两条边，Alice 和 Bob 仍然可以完全遍历这个图。再删除任何其他的边都无法保证图可以完全遍历。所以可以删除的最大边数是 2 。输入：n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]输出：0解释：注意，删除任何一条边都会使 Alice 和 Bob 无法完全遍历这个图。输入：n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]输出：-1解释：在当前图中，Alice 无法从其他节点到达节点 4 。类似地，Bob 也不能达到节点 1 。因此，图无法完全遍历。</code></pre><h2 id="方法（并查集-贪心）"><a href="#方法（并查集-贪心）" class="headerlink" title="方法（并查集 + 贪心）"></a>方法（并查集 + 贪心）</h2><p><strong>判断能否遍历整个图：</strong><br>因为要保证Alice和Bob两个人都可以遍历整个图，所以要分别为Alice和Bob构造单独的并查集。</p><p>初始时，两人的并查集中集合数目都为节点数n。如果最后Alice的并查集中集合数目变为1，说明所有的顶点在Alice的并查集中都被连接到了一起，即Alice可以遍历整个图。Bob同理。</p><p><strong>贪心策略</strong>：能使用共享边时就使用共享边，因为共享边让Alice和Bob在遍历时都可以使用。只用一条共享边就可以达到两条独享边的效果。因此我们先使用共享边对节点进行连接，之后再使用Alice和Bob的独享边进行连接。</p><p>注意：共享边同时可以连接Alice和Bob的并查集中的节点。而Alice的独享边只能连接Alice并查集中的节点。Bob的独享边只能连接Bob并查集中的节点。</p><p><strong>判断一条边可否删除：</strong><br>遍历到一条边时，只需要判断这条边的两个顶点此时在相应的并查集中是否已经在同一个集合内，如果是的话，那么就不再需要它进行连接，这条边可以删除。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxNumEdgesToRemove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span>[][] edges)</span> </span>&#123;<br>        UnionFindSet alice = <span class="hljs-keyword">new</span> UnionFindSet();<br>        UnionFindSet bob = <span class="hljs-keyword">new</span> UnionFindSet();<br>        List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            nodes.add(i);<br>        alice.makeSet(nodes);<br>        bob.makeSet(nodes);<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;  <span class="hljs-comment">//res代表可删除的边个数</span><br>        <span class="hljs-comment">//先遍历所有的双向边</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] edge : edges)&#123;<br>            <span class="hljs-keyword">if</span>(edge[<span class="hljs-number">0</span>] == <span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-keyword">boolean</span> a = alice.union(edge[<span class="hljs-number">1</span>], edge[<span class="hljs-number">2</span>]);<br>                <span class="hljs-keyword">boolean</span> b = bob.union(edge[<span class="hljs-number">1</span>], edge[<span class="hljs-number">2</span>]);<br>                <span class="hljs-comment">//如果对于alice和bob，此边的两个顶点都已经在一个集合中，那么这条共享边可以删除</span><br>                <span class="hljs-keyword">if</span>(!a &amp;&amp; !b)<br>                    res++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//再遍历单向边</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] edge : edges)&#123;<br>            <span class="hljs-comment">//如果这条边是alice独享的，那么判断它的两个顶点在alice的并查集中是否已在一个集合中，若是，则可删除</span><br>            <span class="hljs-keyword">if</span>(edge[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">boolean</span> canUnion = alice.union(edge[<span class="hljs-number">1</span>], edge[<span class="hljs-number">2</span>]);<br>                res += canUnion ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">//bob同理</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(edge[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">boolean</span> canUnion = bob.union(edge[<span class="hljs-number">1</span>], edge[<span class="hljs-number">2</span>]);<br>                res += canUnion ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果两人中至少有一人不能遍历整个图，那么返回-1</span><br>        <span class="hljs-keyword">return</span> alice.getSize() == <span class="hljs-number">1</span> &amp;&amp; bob.getSize() == <span class="hljs-number">1</span> ? res : -<span class="hljs-number">1</span>;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFindSet</span></span>&#123;<br>    Map&lt;Integer, Integer&gt; fatherMap;<br>    Map&lt;Integer, Integer&gt; sizeMap;<br>    <span class="hljs-keyword">int</span> size;  <span class="hljs-comment">//size代表并查集中集合的数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UnionFindSet</span><span class="hljs-params">()</span></span>&#123;<br>        fatherMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        sizeMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSet</span><span class="hljs-params">(List&lt;Integer&gt; nodes)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> node : nodes)&#123;<br>            sizeMap.put(node, <span class="hljs-number">1</span>);<br>            fatherMap.put(node, node);<br>        &#125;<br>        size = nodes.size();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> node)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> father = fatherMap.get(node);<br>        <span class="hljs-keyword">if</span>(father != node)&#123;<br>            father = findHead(father);<br>        &#125;<br>        fatherMap.put(node, father);<br>        <span class="hljs-keyword">return</span> father;<br>    &#125;<br>    <span class="hljs-comment">//若成功进行union操作则返回true。</span><br>    <span class="hljs-comment">//若a和b已经在一个集合中，不需要进行union操作则返回false</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> headA = findHead(a);<br>        <span class="hljs-keyword">int</span> headB = findHead(b);<br>        <span class="hljs-keyword">if</span>(headA != headB)&#123;<br>            <span class="hljs-keyword">int</span> sizeA = sizeMap.get(headA);<br>            <span class="hljs-keyword">int</span> sizeB = sizeMap.get(headB);<br>            <span class="hljs-keyword">if</span>(sizeA &lt; sizeB)&#123;<br>                fatherMap.put(headA, headB);<br>                sizeMap.put(sizeB, sizeA + sizeB);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fatherMap.put(headB, headA);<br>                sizeMap.put(sizeA, sizeA + sizeB);<br>            &#125;<br>            size--;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】160.相交链表</title>
    <link href="/2021/02/17/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160 相交链表"></a>160 相交链表</h1><p><strong>题目：</strong><br>编写一个程序，找到两个单链表相交的起始节点。</p><p><strong>方法一：</strong><br>分三个步骤： </p><ol><li>获得两个链表的长度，相减得到长度差。</li><li>让长的链表先走长度差步</li><li>两个链表一起走，直到碰上相同的节点返回  </li></ol><p>注意：<br>边界处理 </p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> lenA = getLength(headA);<br>    <span class="hljs-keyword">int</span> lenB = getLength(headB);<br>    <span class="hljs-keyword">int</span> diff = Math.abs(lenA - lenB);<br>    <span class="hljs-keyword">if</span>(lenA &gt; lenB)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; diff; i++)<br>            headA = headA.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(lenB &gt; lenA)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; diff; i++)<br>            headB = headB.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(headA != headB)&#123;<br>        headA = headA.next;<br>        headB = headB.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> headA;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    ListNode cur = head;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        count++;<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong><br>设链表A前半部分长度为a，链表B前半部分长度为b，链表A和链表B相交的部分长度为c。<br>易知：a + c + b = a + b + c</p><p>因此我们先让指针curA在链表A上走a+c步，走到链表A末尾后，再让curA从链表B的头部开始走，在链表B上再走b步。</p><p>同理：让指针curB在链表B上走b+c步，走到链表B末尾后，再让curB从链表A的头部开始走，在链表A上再走a步。</p><p>这样当两个指针都走了a+b+c步时，它们会相遇于两个链表的交点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>    ListNode curA = headA;<br>    ListNode curB = headB;<br>    <span class="hljs-keyword">while</span>(curA != curB)&#123;<br>        curA = (curA == <span class="hljs-keyword">null</span>) ? headB : curA.next;<br>        curB = (curB == <span class="hljs-keyword">null</span>) ? headA : curB.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> curA;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】1663.具有给定数值的最小字符串</title>
    <link href="/2021/02/17/1663.%E5%85%B7%E6%9C%89%E7%BB%99%E5%AE%9A%E6%95%B0%E5%80%BC%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2021/02/17/1663.%E5%85%B7%E6%9C%89%E7%BB%99%E5%AE%9A%E6%95%B0%E5%80%BC%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="1663-具有给定数值的最小字符串"><a href="#1663-具有给定数值的最小字符串" class="headerlink" title="1663.具有给定数值的最小字符串"></a>1663.具有给定数值的最小字符串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>小写字符 的 数值 是它在字母表中的位置（从 1 开始），因此 a 的数值为 1 ，b 的数值为 2 ，c 的数值为 3 ，以此类推。</p><p>字符串由若干小写字符组成，字符串的数值 为各字符的数值之和。例如，字符串 “abe” 的数值等于 1 + 2 + 5 = 8 。</p><p>给你两个整数 n 和 k 。返回 长度 等于 n 且 数值 等于 k 的 字典序最小 的字符串。</p><p>注意，如果字符串 x 在字典排序中位于 y 之前，就认为 x 字典序比 y 小，有以下两种情况：</p><p>x 是 y 的一个前缀；<br>如果 i 是 x[i] != y[i] 的第一个位置，且 x[i] 在字母表中的位置比 y[i] 靠前。 </p><pre><code>示例 1：输入：n = 3, k = 27输出：&quot;aay&quot;解释：字符串的数值为 1 + 1 + 25 = 27，它是数值满足要求且长度等于 3 字典序最小的字符串。示例 2：输入：n = 5, k = 73输出：&quot;aaszz&quot;</code></pre><h2 id="方法（贪心算法）"><a href="#方法（贪心算法）" class="headerlink" title="方法（贪心算法）"></a>方法（贪心算法）</h2><p>假设当前来到了一个位置，要往这个位置放一个字符。包括这个位置在内还需要放n’个位置，这些位置的和为k’</p><p>放完这个位置后，剩余还有n’-1个位置，这些位置的和最大值为26(n’-1),最小值为n’-1。分别为全为z和全为a的情况。因此，只有满足：n’ - 1 &lt;= k’ - c &lt;= 26 * (n’ - 1) 时，我们才能往这个位置放字符c。即：c需要满足：k’ - 26(n’ - 1) &lt;= c &lt;= k’ - (n’ - 1)</p><p>我们的贪心策略总是希望放一个尽可能小的字符，因此我们就放c的下限：k’ - 26(n’ - 1)。如果这个下限小于0，我们就放a。否则，我们放这个下限对应的字符</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getSmallestString</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    StringBuilder str = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">while</span>(n &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">int</span> bound = k - <span class="hljs-number">26</span> * (n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(bound &gt; <span class="hljs-number">0</span>) &#123;<br>            str.append((<span class="hljs-keyword">char</span>) (bound + <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">1</span>));<br>            k -= bound;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            str.append(<span class="hljs-string">&#x27;a&#x27;</span>);<br>            k -= <span class="hljs-number">1</span>;<br>        &#125;<br>        n--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str.toString();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】234.回文链表</title>
    <link href="/2021/02/17/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234.回文链表"></a>234.回文链表</h1><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>请判断一个链表是否为回文链表。</p><pre><code>示例 1:输入: 1-&gt;2输出: false示例 2:输入: 1-&gt;2-&gt;2-&gt;1输出: true</code></pre><h2 id="方法1：用栈"><a href="#方法1：用栈" class="headerlink" title="方法1：用栈"></a>方法1：用栈</h2><p>将链表中的节点全部放入一个栈中，由于栈的先进后出的特性，它依次弹出的顺序为链表的逆序。因此，依次比较链表节点和栈弹出的节点，就可以判断链表是否为回文链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    ListNode cur = head;<br>    <span class="hljs-comment">//将链表节点全部入栈</span><br>    Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;ListNode&gt;();<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        stack.push(cur);<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-comment">//依次比较链表节点和栈中弹出节点</span><br>    <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>        <span class="hljs-keyword">if</span>(head.val != stack.pop().val)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><h2 id="方法2-反转链表"><a href="#方法2-反转链表" class="headerlink" title="方法2:反转链表"></a>方法2:反转链表</h2><p>彻底不用额外辅助空间的做法：<br>利用双指针，快指针一次走两步，慢指针一次走一步。快指针走完时，慢指针来到中点。然后将右半部分逆序。最后，一个指针指向链表尾，向前走，遍历右半部分；另一个指针指向链表头，向后走，遍历前半部分。依次比对这两个指<br>针所指元素是否相同。<br>注意：题目只让我们判断链表是否回文，我们不能改变题目给我们的结构，所以判断完之后别忘了把链表的指针恢复回来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    ListNode fast = head, slow = head;<br>    <span class="hljs-comment">//快指针走到末尾，慢指针走到中点</span><br>    <span class="hljs-keyword">while</span>(fast.next != <span class="hljs-keyword">null</span> &amp;&amp; fast.next.next != <span class="hljs-keyword">null</span>)&#123;<br>        fast = fast.next.next;<br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-comment">//从中点开始，反转后部分链表</span><br>    ListNode tail = reverseList(slow);<br>    ListNode head_cur = head, tail_cur = tail;<br>    <span class="hljs-comment">//分别从头和尾开始，比较链表节点</span><br>    <span class="hljs-keyword">while</span>(head_cur != <span class="hljs-keyword">null</span> &amp;&amp; tail_cur != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(head_cur.val != tail_cur.val)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        head_cur = head_cur.next;<br>        tail_cur = tail_cur.next;<br>    &#125;<br>    <span class="hljs-comment">//恢复链表</span><br>    slow.next = reverseList(tail);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <br>&#125;<br><span class="hljs-comment">//反转以head为头节点的链表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    ListNode pre = head, cur = pre.next;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        ListNode temp = cur;<br>        cur = cur.next;<br>        temp.next = pre;<br>        pre = temp;<br>    &#125;<br>    head.next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】435.无重叠区间</title>
    <link href="/2021/02/17/435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    <url>/2021/02/17/435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435.无重叠区间"></a>435.无重叠区间</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p><p>注意:<br>可以认为区间的终点总是大于它的起点。<br>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p><pre><code>示例 1:输入: [ [1,2], [2,3], [3,4], [1,3] ]输出: 1解释: 移除 [1,3] 后，剩下的区间没有重叠。示例 2:输入: [ [1,2], [1,2], [1,2] ]输出: 2解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。示例 3:输入: [ [1,2], [2,3] ]输出: 0解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</code></pre><h2 id="方法（贪心算法）"><a href="#方法（贪心算法）" class="headerlink" title="方法（贪心算法）"></a>方法（贪心算法）</h2><p>题目要我们找最少需要移除多少个区间，实际上就是要找最多能选择多少个不重叠的区间。最后用总区间减去最多不重叠区间的个数，就是想要的结果。</p><p>贪心策略：选择不重叠的区间时，我们在不重叠的前提下，尽可能地选择长度最短的区间，这样可以给后面的区间留下更大的选择空间。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">eraseOverlapIntervals</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intervals)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (intervals.length == <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    Arrays.sort(intervals, <span class="hljs-keyword">new</span> Mycomparator());<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> bound = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] num : intervals)&#123;<br>        <span class="hljs-keyword">if</span>(num[<span class="hljs-number">0</span>] &gt;= bound)&#123;<br>            count++;<br>            bound = num[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> intervals.length - count;<br>&#125;<br><br>public class Mycomparator implements Comparator&lt;int[]&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] o1, <span class="hljs-keyword">int</span>[] o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1[<span class="hljs-number">1</span>] - o2[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】502.IPO</title>
    <link href="/2021/02/17/502.IPO/"/>
    <url>/2021/02/17/502.IPO/</url>
    
    <content type="html"><![CDATA[<h1 id="502-IPO"><a href="#502-IPO" class="headerlink" title="502 IPO"></a>502 IPO</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设 力扣（LeetCode）即将开始其 IPO。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 k 个不同的项目。帮助 力扣 设计完成最多 k 个不同项目后得到最大总资本的方式。</p><p>给定若干个项目。对于每个项目 i，它都有一个纯利润 Pi，并且需要最小的资本 Ci 来启动相应的项目。最初，你有 W 资本。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。</p><p>总而言之，从给定项目中选择最多 k 个不同项目的列表，以最大化最终资本，并输出最终可获得的最多资本。</p><pre><code>示例 1:输入: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].输出: 4解释:由于你的初始资本为 0，你尽可以从 0 号项目开始。在完成后，你将获得 1 的利润，你的总资本将变为 1。此时你可以选择开始 1 号或 2 号项目。由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。</code></pre><h2 id="思路（贪心策略）"><a href="#思路（贪心策略）" class="headerlink" title="思路（贪心策略）"></a>思路（贪心策略）</h2><p>准备一个小根堆和一个大根堆。先将所有的项目放进小根堆，小根堆的堆顶为堆中cost最小的项目。然后让所有cost小于W的项目（即当前可以做的项目）进大根堆，大根堆的堆顶为profit最大的项目。每次从大根堆里取出项目做，每做完项目取得收益后W会更新，这时就会有新的项目从小根堆进入到大根堆。当做满了k个项目或者大根堆中没有项目可做时，结束。</p><p>每次在所有项目中找利润最高的项目做，是一种贪心策略。也符合生活中面临此类问题时的常规做法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">//Project项目类包含两个实例域，p代指利润，c代指花销</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Project</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> p;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> c;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Project</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> c)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.p = p;<br>            <span class="hljs-keyword">this</span>.c = c;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个比较器，根据项目的花销值c比较Project（花销值小的Project小）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinCostComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Project</span>&gt;</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Project o1, Project o2)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> o1.c - o2.c;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个比较器，根据项目的利润值p比较Project（利润值高的Project小）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxProfitComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Project</span>&gt;</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Project o1, Project o2)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> o2.p - o1.p;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMaximizedCapital</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> W, <span class="hljs-keyword">int</span>[] Profits, <span class="hljs-keyword">int</span>[] Capital)</span> </span>&#123;<br>        <span class="hljs-comment">//定义一个项目数组并将其初始化</span><br>        Project[] projects = <span class="hljs-keyword">new</span> Project[Profits.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Profits.length; i++)&#123;<br>            projects[i] = <span class="hljs-keyword">new</span> Project(Profits[i], Capital[i]);<br>        &#125;<br>        <span class="hljs-comment">//准备两个堆，一个堆顶表示堆中cost最小的项目，另一个堆顶表示堆中profit最大的项目</span><br>        PriorityQueue&lt;Project&gt; minCostHeap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(<span class="hljs-keyword">new</span> MinCostComparator());<br>        PriorityQueue&lt;Project&gt; maxProfitHeap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(<span class="hljs-keyword">new</span> MaxProfitComparator());<br>        <span class="hljs-keyword">for</span>(Project item: projects)&#123;<br>            minCostHeap.add(item);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-comment">//小根堆堆顶依次弹出进大根堆，直到堆顶大于w，遇到了没有足够资金做的项目为止</span><br>            <span class="hljs-keyword">while</span>(!minCostHeap.isEmpty() &amp;&amp; minCostHeap.peek().c &lt;= W)<br>                maxProfitHeap.add(minCostHeap.poll());<br>            <span class="hljs-comment">//循环结束时有两种可能，一种为已经做完了k个项目，另一种为没做到k个项目但能做到项目都做完了</span><br>            <span class="hljs-keyword">if</span>(maxProfitHeap.isEmpty())<br>                <span class="hljs-keyword">return</span> W;<br>            W += maxProfitHeap.poll().p;<br>        &#125;<br>        <span class="hljs-keyword">return</span> W;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】252.会议室</title>
    <link href="/2021/02/17/252.%E4%BC%9A%E8%AE%AE%E5%AE%A4/"/>
    <url>/2021/02/17/252.%E4%BC%9A%E8%AE%AE%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="252-会议室"><a href="#252-会议室" class="headerlink" title="252.会议室"></a>252.会议室</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi] ，请你判断一个人是否能够参加这里面的全部会议。</p><pre><code>示例 1：输入：intervals = [[0,30],[5,10],[15,20]]输出：false示例 2：输入：intervals = [[7,10],[2,4]]输出：true</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>将所有的会议按照开始时间排序，之后只需要判断在一个会议开始时，上一个会议是否结束即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canAttendMeetings</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intervals)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(intervals == <span class="hljs-keyword">null</span> || intervals.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    Arrays.sort(intervals, (v1, v2) -&gt; (v1[<span class="hljs-number">0</span>] - v2[<span class="hljs-number">0</span>]));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; intervals.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; intervals[i][<span class="hljs-number">0</span>] &lt; intervals[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="253-会议室-II"><a href="#253-会议室-II" class="headerlink" title="253.会议室 II"></a>253.会议室 II</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>给定一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi]，为避免会议冲突，同时要考虑充分利用会议室资源，请你计算至少需要多少间会议室，才能满足这些会议安排。</p><pre><code>示例 1:输入: [[0, 30],[5, 10],[15, 20]]输出: 2示例 2:输入: [[7,10],[2,4]]输出: 1</code></pre><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p><strong>基本思路</strong>：<br>如果我们能统计出每一个时刻要开会的会议数量，就能知道各时刻对于会议室数量的需求，则会议最繁忙的那个时刻需要的会议室数量就是我们想要的结果。只要我们的会议室数量满足了这个时刻的开会要求，则其他时刻都能够满足。</p><p><strong>算法流程</strong>：  </p><ul><li>因为我们要按时间顺序遍历，所以先将数组按照会议的开始时间排序</li><li>准备一个最小堆，堆中元素为每一个正在进行中会议的结束时间</li><li>遍历数组，如果发现在当前时刻，有已经过了结束时间但还在堆中的会议，便将其从堆中弹出。之后将当前的会议加入到堆中</li><li>在遍历过程中不断统计堆中元素的数量，这个数量代表一个时刻正在进行中的会议数量，也即对会议室数量的需求，这个需求的最大值即为结果。</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minMeetingRooms</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intervals)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(intervals == <span class="hljs-keyword">null</span> || intervals.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    Arrays.sort(intervals, (v1, v2) -&gt; (v1[<span class="hljs-number">0</span>] - v2[<span class="hljs-number">0</span>]));<br>    PriorityQueue&lt;Integer&gt; heap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>    <span class="hljs-keyword">int</span> meetingCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] meeting : intervals)&#123;<br>        <span class="hljs-keyword">while</span>(!heap.isEmpty() &amp;&amp; meeting[<span class="hljs-number">0</span>] &gt;= heap.peek())<br>            heap.poll();<br>        heap.add(meeting[<span class="hljs-number">1</span>]);<br>        meetingCount = Math.max(meetingCount, heap.size());<br>    &#125;<br>    <span class="hljs-keyword">return</span> meetingCount;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】621.任务调度器</title>
    <link href="/2021/02/17/621.%20%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    <url>/2021/02/17/621.%20%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="621-任务调度器"><a href="#621-任务调度器" class="headerlink" title="621. 任务调度器"></a>621. 任务调度器</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。</p><p>然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。</p><p>你需要计算完成所有任务所需要的 最短时间 。 </p><pre><code>示例 1：输入：tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2输出：8解释：A -&gt; B -&gt; (待命) -&gt; A -&gt; B -&gt; (待命) -&gt; A -&gt; B    在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 示例 2：输入：tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0输出：6解释：在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;][&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;][&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]...诸如此类示例 3：输入：tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2输出：16解释：一种可能的解决方案是：    A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; (待命) -&gt; (待命) -&gt; A -&gt; (待命) -&gt; (待命) -&gt; A</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>容易想到的一种贪心策略为：先安排出现次数最多的任务，让这个任务两次执行的时间间隔正好为n。再在这个时间间隔内安排其他的任务。</p><p>例如：tasks = [“A”,”A”,”A”,”B”,”B”,”B”], n = 2</p><p>我们先安排出现次数最多的任务”A”,并且让执行两个”A”的时间间隔2。在这个时间间隔内，我们用其他任务类型去填充，又因为其他任务类型只有”B”一个，不够填充2的时间间隔，因此额外需要一个冷却时间间隔。具体安排如下图所示：</p><p><img src="/img/621.png"></p><p>其中，maxTimes为出现次数最多的那个任务出现的次数。maxCount为一共有多少个任务和出现最多的那个任务出现次数一样。</p><p>图中一共占用的方格即为完成所有任务需要的时间，即：<br>$$(maxTimes - 1)*(n + 1) + maxCount$$</p><p>此外，如果任务种类很多，在安排时无需冷却时间，只需要在一个任务的两次出现间填充其他任务，然后从左到右从上到下依次执行即可，由于每一个任务占用一个时间单位，我们又正正好好地使用了tasks中的所有任务，而且我们只使用tasks中的任务来占用方格（没用冷却时间）。因此这种情况下，所需要的时间即为tasks的长度。</p><p>由于这种情况时再用上述公式计算会得到一个不正确且偏小的结果，因此，我们只需把公式计算的结果和tasks的长度取最大即为最终结果。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leastInterval</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] tasks, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] buckets = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tasks.length; i++)&#123;<br>        buckets[tasks[i] - <span class="hljs-string">&#x27;A&#x27;</span>]++;<br>    &#125;<br>    Arrays.sort(buckets);<br>    <span class="hljs-keyword">int</span> maxTimes = buckets[<span class="hljs-number">25</span>];<br>    <span class="hljs-keyword">int</span> maxCount = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">25</span>; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<br>        <span class="hljs-keyword">if</span>(buckets[i] == buckets[i - <span class="hljs-number">1</span>])<br>            maxCount++;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> res = (maxTimes - <span class="hljs-number">1</span>) * (n + <span class="hljs-number">1</span>) + maxCount;<br>    <span class="hljs-keyword">return</span> Math.max(res, tasks.length);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】61.旋转链表</title>
    <link href="/2021/02/17/61.%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/61.%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61 旋转链表"></a>61 旋转链表</h1><p><strong>题目：</strong><br>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p><p>示例 1:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2<br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL  </p><p>示例 2:<br>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4<br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL  </p><p><strong>思路：</strong><br>只需要O(n)时间复杂度的算法：</p><ul><li>求出链表的长度n</li><li>k = k % n</li><li>用双指针法找到链表倒数第k个位置</li><li>记录慢指针的next节点，这就是要返回链表的头结点</li><li>从慢指针的next节点开始断开链接，后一段的尾结点指向前一段的头结点</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">int</span> length = getLength(head);<br>        k = k % length;<br>        <span class="hljs-keyword">if</span>(length == <span class="hljs-number">1</span> || k == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k;i++)&#123;<br>            <span class="hljs-comment">//找到倒数第二个节点</span><br>            ListNode cur = head;<br>            <span class="hljs-keyword">while</span>(cur.next.next != <span class="hljs-keyword">null</span>)<br>                cur = cur.next;<br>            <span class="hljs-comment">//在倒数第二个节点的地方进行操作</span><br>            cur.next.next= head;<br>            head = cur.next;<br>            cur.next = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>        ListNode cur = head;<br>        <span class="hljs-keyword">int</span> length = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-keyword">null</span>)&#123;<br>            cur = cur.next;<br>            length++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】82.删除排序链表中的重复元素 II</title>
    <link href="/2021/02/17/82.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/"/>
    <url>/2021/02/17/82.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/</url>
    
    <content type="html"><![CDATA[<h1 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82 删除排序链表中的重复元素 II"></a>82 删除排序链表中的重复元素 II</h1><p><strong>题目：</strong><br>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p><p>示例 1:<br>输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5<br>输出: 1-&gt;2-&gt;5<br>示例 2:<br>输入: 1-&gt;1-&gt;1-&gt;2-&gt;3<br>输出: 2-&gt;3  </p><p><strong>思路：</strong><br>在迭代过程中，如果cur.next.val == cur.next.next.val说明此时有重复元素，此时创建一个临时指针temp，指向cur的下一个节点，即temp指向的第一个重复元素所在的位置。通过while循环去重，去重后，temp指向的是重复元素中的最后一个位置。最后cur.next = temp.next就实现了消除重复元素。<br>当然，如果未发现重复元素，则直接向后迭代即可。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">//为了防止删除的是头节点，新建一个节点dummy，在头节点之前</span><br>    <span class="hljs-comment">//cur从dummy开始遍历</span><br>    ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    dummy.next = head;<br>    ListNode cur = dummy;<br>    <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-keyword">null</span> &amp;&amp; cur.next.next != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//当cur之后开始重复时，新建一个节点temp指向重复的第一个节点</span><br>        <span class="hljs-keyword">if</span>(cur.next.val == cur.next.next.val)&#123;<br>            ListNode temp = cur.next;<br>            <span class="hljs-comment">//然后temp不断移动到该重复的最后一个节点</span><br>            <span class="hljs-keyword">while</span>(temp.next != <span class="hljs-keyword">null</span> &amp;&amp; temp.val == temp.next.val)<br>                temp = temp.next;<br>            <span class="hljs-comment">//temp标记着重复的最后一个节点。让cur的下一个节点指向它之后，即跳过了所有重复节点</span><br>            cur.next = temp.next;<br>        &#125;<br>        <span class="hljs-comment">//如果cur之后不遇到重复节点，则cur正常向后移动</span><br>        <span class="hljs-keyword">else</span><br>            cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong><br>对于此类链表题目，为了防止删除头节点的极端情况的产生。设置一个空结点dummy，使dummy指向传入的head头节点。cur遍历链表从dummy结点开始。最后函数返回dummy.next即head。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】861.翻转矩阵后的得分</title>
    <link href="/2021/02/17/861.%20%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5%E5%90%8E%E7%9A%84%E5%BE%97%E5%88%86/"/>
    <url>/2021/02/17/861.%20%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5%E5%90%8E%E7%9A%84%E5%BE%97%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="861-翻转矩阵后的得分"><a href="#861-翻转矩阵后的得分" class="headerlink" title="861. 翻转矩阵后的得分"></a>861. 翻转矩阵后的得分</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有一个二维矩阵 A 其中每个元素的值为 0 或 1 。</p><p>移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。</p><p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。</p><p>返回尽可能高的分数。</p><p> </p><pre><code>示例：输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]输出：39解释：转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</code></pre><h2 id="方法（贪心算法）"><a href="#方法（贪心算法）" class="headerlink" title="方法（贪心算法）"></a>方法（贪心算法）</h2><p>因为我们想要让数字总和最大，那么就需要让每一行的所代表的数字尽可能大。又因为矩阵中的第一列是每一行代表数字的最高位。</p><p>因此第一步：我们先遍历第一列的各个行，如果发现有元素为0，将该行进行转换。（让最高位尽可能大）</p><p>第一步结束后，每一行的最高位就都为1了。而对于之后的每一列，我们统计列中0的个数和1的个数，如果0的个数大于1的个数，则将该列进行转换。（让一列中1的个数尽可能多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//贪心策略：</span><br><span class="hljs-comment">//第一步：遍历第一列的各行，如果发现有0的，将此行转换</span><br><span class="hljs-comment">//第二步：从第二列起遍历各列，如果一列中0的个数高于1的个数，将该列转换</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] A;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">matrixScore</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] A)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.A = A;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(A[i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br>            reverseRow(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; A[<span class="hljs-number">0</span>].length; j++)&#123;<br>        <span class="hljs-keyword">int</span> count0 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(A[i][j] == <span class="hljs-number">0</span>)<br>                count0++;<br>            <span class="hljs-keyword">if</span>(count0 &gt; A.length / <span class="hljs-number">2</span>)&#123;<br>                reverseCol(j);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; A[<span class="hljs-number">0</span>].length; j++)&#123;<br>            num = (num &lt;&lt; <span class="hljs-number">1</span>) + A[i][j];<br>        &#125;<br>        res += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; A[<span class="hljs-number">0</span>].length; j++)&#123;<br>        A[i][j] = A[i][j] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseCol</span><span class="hljs-params">(<span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>        A[i][j] = A[i][j] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法改进"><a href="#方法改进" class="headerlink" title="方法改进"></a>方法改进</h2><p>在上述方法第二步中，我们真的需要对列进行转换吗？</p><p>实则不然。考虑在二进制的表示中，一个位数上的1对结果的贡献其实是相同的。就比如：1100和1111，这两个二进制表示中次高位的1对结果的贡献都为4。</p><p>而A中的同一列又代表着相同的位数。因此我们只需要统计该列中0的数量和1的数量即可：</p><ul><li>如果一列中0的数量大于1的数量，则该列将被反转（并不实际需要反转操作），反转前的count0就是反转后的1的数量，于是用count0对结果进行更新</li><li>如果一列中1的数量大于0的数量，则该列不需要反转，直接用count1对结果进行更新<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] A;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">matrixScore</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] A)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.A = A;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>        <span class="hljs-comment">//如果当前位置为0，那么它之后要转换成为1</span><br>        <span class="hljs-comment">//所有行在第0列（最高位）的1对结果的贡献都是一样的，因此再这里直接对res进行更新</span><br>        <span class="hljs-keyword">if</span>(A[i][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)&#123;<br>            reverseRow(i);<br>        &#125;<br>        res += (<span class="hljs-number">1</span> &lt;&lt; (A[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; A[<span class="hljs-number">0</span>].length; j++)&#123;<br>        <span class="hljs-keyword">int</span> count0 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> count1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(A[i][j] == <span class="hljs-number">0</span>)<br>                count0++;<br>            <span class="hljs-keyword">else</span><br>                count1++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(count0 &gt; count1)<br>            res += count0 * (<span class="hljs-number">1</span> &lt;&lt; (A[<span class="hljs-number">0</span>].length - j - <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">else</span><br>            res += count1 * (<span class="hljs-number">1</span> &lt;&lt; (A[<span class="hljs-number">0</span>].length - j - <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">//转换A的第i行</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; A[<span class="hljs-number">0</span>].length; j++)&#123;<br>        A[i][j] = A[i][j] == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】92.反转链表 II</title>
    <link href="/2021/02/17/92.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II/"/>
    <url>/2021/02/17/92.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%20II/</url>
    
    <content type="html"><![CDATA[<h1 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92 反转链表 II"></a>92 反转链表 II</h1><p><strong>题目：</strong><br>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p><p>说明:<br>$1 ≤ m ≤ n ≤$链表长度。<br>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4<br>输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p><p><strong>思路：</strong>  </p><ol><li><p>我们定义两个指针，分别称之为cur和pre。我们首先根据方法的参数m确定cur和pre的位置。将pre移动到第一个要反转的节点的前面，将cur移动到第一个要反转的节点的位置上</p></li><li><p>将cur后面的元素删除，然后添加到pre的后面。也即头插法。</p></li><li><p>根据m和n重复步骤2</p></li></ol><p><strong>注意:</strong><br>不能依赖头节点作pre，头节点的下一个节点做cur。这样的话当m=1时即第一个节点也要参与反转时就不适用了。于是建立一个在head前面的节点，并将它和链表联系起来，在通过它将pre和cur初始化</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//新建一个节点，并将这个节点和原有链表联系起来</span><br>    ListNode preHeadNode = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    preHeadNode.next = head;<br>    <span class="hljs-comment">//新建并初始化两个指针</span><br>    ListNode pre = preHeadNode;<br>    ListNode cur = preHeadNode.next;<br>    <span class="hljs-comment">//移动这两个指针，直到cur指向要反转的第一个节点，pre指向它的前面</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m - <span class="hljs-number">1</span>; i++)&#123;<br>        cur = cur.next;<br>        pre = pre.next;<br>    &#125;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m - n;i++)&#123;<br>        <span class="hljs-comment">//先拿到要删除（即要插入）的节点</span><br>        ListNode remove = cur.next;<br>        <span class="hljs-comment">//经过下面这步，跳过了cur的下一个节点。达到了把这个节点删除的效果</span><br>        cur.next = cur.next.next;<br>        <span class="hljs-comment">//接下来是插入操作</span><br>        remove.next = pre.next;<br>        pre.next = remove;<br>    &#125;<br>    <span class="hljs-keyword">return</span> preHeadNode.next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】86.分割链表</title>
    <link href="/2021/02/17/86.%E5%88%86%E5%89%B2%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/02/17/86.%E5%88%86%E5%89%B2%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="86-分割链表"><a href="#86-分割链表" class="headerlink" title="86 分割链表"></a>86 分割链表</h1><p><strong>题目：</strong><br>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p><p><strong>示例:</strong><br>输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3<br>输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p><p><strong>思路：</strong></p><ul><li>建立两个链表min和max，分别收集小于x的元素和大于等于x的元素。头结点分别设为两个哑节点minhead和maxhead，也就是说实际的第一个节点为哑节点的next。</li><li>遍历原有链表的每一个元素，若元素值小于x，则放入min链表中，若元素值大于等于x，则放入max链表中。</li><li>遍历完所有元素之后，将min链表和max链表连接，max的最后指向null，min的最后指向max的开头，即maxhead.next</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">partition</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    ListNode minhead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    ListNode mincur = minhead;<br>    ListNode maxhead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    ListNode maxcur = maxhead;<br>    ListNode cur = head;<br>    <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(cur.val &lt; x)&#123;<br>            mincur.next = cur;<br>            mincur = mincur.next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            maxcur.next = cur;<br>            maxcur = maxcur.next;<br>        &#125;<br>        cur = cur.next;<br>    &#125;<br>    maxcur.next = <span class="hljs-keyword">null</span>;<br>    mincur.next = maxhead.next;<br>    <span class="hljs-keyword">return</span> minhead.next;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度：O(n)</strong><br><strong>空间复杂度：O(1)</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】225.用队列实现栈</title>
    <link href="/2021/02/16/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <url>/2021/02/16/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h1><p><strong>注意</strong>: 队列的基本操作为add和poll和isEmpty，栈的基本操作为push和pop和empty</p><p><strong>思路：</strong>  </p><ul><li><p>准备两个队列，一个queue队列一个help队列</p></li><li><p>执行push操作时，只向queue队列中add元素</p></li><li><p>执行pop操作时，将queue中元素弹入help中，只剩下一个需要弹出的元素，将queue中剩下的这一个元素保存后弹出。 最后，将help和queue互换，因为此时queue已弹空，原来queue元素均导入到help中。为了实现任何入列都是入到queue中，因此需将两个队列互换  </p></li><li><p>执行peek操作时，与pop操作大体相同。只是peek并未真要弹出栈顶元素，只是取出而已。所以需要将这个元素也加进help中。最终的效果相当于把queue中元素均加入到help中，再将help与queue互换  </p></li><li><p>queue队列为空栈即为空  </p></li><li><p>*代码：**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> </span>&#123;<br><br>    Queue&lt;Integer&gt; queue1;<br>    Queue&lt;Integer&gt; help;<br>    <br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;<br>        queue1 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        help = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>    <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">//只向队列queue中push元素</span><br>        queue1.add(x);<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Removes the element on top of the stack and returns that element. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//将queue中元素弹入help中，只剩下一个需要弹出的元素</span><br>        <span class="hljs-keyword">while</span>(queue1.size() != <span class="hljs-number">1</span>)<br>            help.add(queue1.poll());<br>        <span class="hljs-comment">//将queue中剩下的这一个元素保存后弹出</span><br>        <span class="hljs-keyword">int</span> res = queue1.poll();<br>        <span class="hljs-comment">//将help和queue互换</span><br><span class="hljs-comment">//因为此时queue已弹空，原来queue元素均导入到help中。</span><br><span class="hljs-comment">//为了实现任何入列都是入到queue中，因此需将两个队列互换</span><br>        swap();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Get the top element. */</span><br>    <span class="hljs-comment">//取队顶元素的peek操作大体与pop相同，只是peek并未真要弹出栈顶元素，只是取出而已</span><br><span class="hljs-comment">//所以需要将这个元素也加进help中。最终的效果相当于把queue中元素均加入到help中，再将help与queue互换</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(queue1.size() != <span class="hljs-number">1</span>)<br>            help.add(queue1.poll());<br>        <span class="hljs-keyword">int</span> res = queue1.poll();<br>        help.add(res);<br>        swap();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns whether the stack is empty. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queue1.isEmpty();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">()</span> </span>&#123;<br>        Queue&lt;Integer&gt; tmp = help;<br>        help = queue1;<br>        queue1 = tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】5614.找出最具竞争力的子序列</title>
    <link href="/2021/02/16/5614.%E6%89%BE%E5%87%BA%E6%9C%80%E5%85%B7%E7%AB%9E%E4%BA%89%E5%8A%9B%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2021/02/16/5614.%E6%89%BE%E5%87%BA%E6%9C%80%E5%85%B7%E7%AB%9E%E4%BA%89%E5%8A%9B%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="5614-找出最具竞争力的子序列"><a href="#5614-找出最具竞争力的子序列" class="headerlink" title="5614.找出最具竞争力的子序列"></a>5614.找出最具竞争力的子序列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums 和一个正整数 k ，返回长度为 k 且最具 竞争力 的 nums 子序列。</p><p>在子序列 a 和子序列 b 第一个不相同的位置上，如果 a 中的数字小于 b 中对应的数字，那么我们称子序列 a 比子序列 b（相同长度下）更具 竞争力 。 例如，[1,3,4] 比 [1,3,5] 更具竞争力，在第一个不相同的位置，也就是最后一个位置上， 4 小于 5 。</p><pre><code>示例 1：输入：nums = [3,5,2,6], k = 2输出：[2,6]解释：在所有可能的子序列集合 &#123;[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]&#125; 中，[2,6] 最具竞争力。示例 2：输入：nums = [2,4,3,3,5,4,9,6], k = 4输出：[2,3,3,4]</code></pre><h2 id="方法（单调栈）"><a href="#方法（单调栈）" class="headerlink" title="方法（单调栈）"></a>方法（单调栈）</h2><p>单调栈可以用于寻找在一个数组中，一个元素右边比它大的最小元素是谁，以及左边比它小的最大元素是谁。</p><p>而反观这道题，要寻找最具竞争力的子序列，不就是不断地在一个元素右边尽可能找到一个比它大的更小的元素吗</p><p>算法步骤如下：<br>准备一个栈，这个栈需要保持从栈底到栈顶元素大小从小到大，依次遍历数组中的每个元素</p><ul><li>如果该元素小于栈顶，并且这时弹出栈顶不会造成栈中元素和数组中剩余元素加在一起都凑不到k的情况，那么就放心弹出栈顶</li><li>如果该元素大于栈顶，并且栈中元素尚未到K，那么就将该元素入栈。</li><li>最后，将这个大小为K的栈弹出作为结果。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] mostCompetitive(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    stack.push(nums[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++)&#123;<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek() &gt; nums[i] &amp;&amp; stack.size() + nums.length - i &gt; k)&#123;<br>            stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(stack.size() &lt; k)<br>            stack.push(nums[i]);<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = k - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        res[i] = stack.pop();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】232.用栈实现队列</title>
    <link href="/2021/02/16/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2021/02/16/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232 用栈实现队列"></a>232 用栈实现队列</h1><p><strong>思路：</strong>  </p><ul><li><p>准备两个栈，一个push栈，一个pop栈</p></li><li><p>执行push操作时，只向push栈中添加元素</p></li><li><p>执行pop操作时，若pop栈为空，则先将push栈中的元素全倒入到pop栈中，然后弹出pop栈的栈顶</p></li><li><p>执行peek操作时，和pop操作基本相同</p></li><li><p>当push栈和pop栈均为空时，队列为空</p></li><li><p>*代码：**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stackPop;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stackPush; <br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stackPop = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">this</span>.stackPush = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Push element x to the back of queue. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        stackPush.push(x);<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Removes the element from in front of queue and returns that element. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//当pop栈为空时，将push栈中的元素都加入到pop栈中来</span><br>        <span class="hljs-keyword">if</span>(stackPop.empty())&#123;<br>            <span class="hljs-keyword">while</span>(!stackPush.empty())<br>                stackPop.push(stackPush.pop());<br>        &#125;<br>        <span class="hljs-comment">//pop不空时，直接弹出pop栈的栈顶</span><br>        <span class="hljs-keyword">return</span> stackPop.pop();<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Get the front element. */</span><br>    <span class="hljs-comment">//除了最后一行外，和pop操作基本一致</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//当pop栈为空时，将push栈中的元素都加入到pop栈中来</span><br>        <span class="hljs-keyword">if</span>(stackPop.empty())&#123;<br>            <span class="hljs-keyword">while</span>(!stackPush.empty())<br>                stackPop.push(stackPush.pop());<br>        &#125;<br>        <span class="hljs-keyword">return</span> stackPop.peek();<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns whether the queue is empty. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stackPush.empty() &amp;&amp; stackPop.empty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】72.编辑距离</title>
    <link href="/2021/02/16/72.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <url>/2021/02/16/72.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a>72. 编辑距离</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符<br>删除一个字符<br>替换一个字符     </p><pre><code>示例 1：输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;输出：3解释：horse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)rorse -&gt; rose (删除 &#39;r&#39;)rose -&gt; ros (删除 &#39;e&#39;)示例 2：输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;输出：5解释：intention -&gt; inention (删除 &#39;t&#39;)inention -&gt; enention (将 &#39;i&#39; 替换为 &#39;e&#39;)enention -&gt; exention (将 &#39;n&#39; 替换为 &#39;x&#39;)exention -&gt; exection (将 &#39;n&#39; 替换为 &#39;c&#39;)exection -&gt; execution (插入 &#39;u&#39;)</code></pre><h2 id="方法（动态规划）"><a href="#方法（动态规划）" class="headerlink" title="方法（动态规划）"></a>方法（动态规划）</h2><h3 id="1-定义dp数组"><a href="#1-定义dp数组" class="headerlink" title="1.定义dp数组"></a>1.定义dp数组</h3><p>定义dp[i][j] 为 word1的前i个字符word1[0…i-1]转换成word2的前j个字符word2[0…j-1]需要的最少操作数</p><h3 id="2-Base-Case"><a href="#2-Base-Case" class="headerlink" title="2.Base Case"></a>2.Base Case</h3><ul><li>首先，空串到到空串不需要任何操作。因此dp[0][0] = 0</li><li>i=0时，要找空串word1匹配到word2前j个字符的最小步数，也即对word1进行插入操作的数量,也就是j</li><li>j=0时，要找word1前i个字符匹配到空串word2的最小步数，也即对word1进行删除操作的数量，也就是i</li></ul><h3 id="3-状态转移方程"><a href="#3-状态转移方程" class="headerlink" title="3.状态转移方程"></a>3.状态转移方程</h3><ul><li>当word1[i-1]等于word2[j-1]时，相当于在这一步不需要任何操作，因此dp[i][j] = dp[i-1][j-1]</li><li>当word1[i-1]不等于word2[j-1]，可以对word1[i-1]进行替换、插入、删除三种操作<ol><li><p>替换：将word1[i-1]替换成word2[j-1],需要一次操作。替换后二者相等，于是：dp[i][j] = dp[i - 1][j - 1] + 1</p></li><li><p>插入：在word1[i-1]后面插入与word2[j-1]相等的字符，需要一次操作，插入的字符和word2[j-1]匹配，二者抵消，在word2中就不用再考虑word2[j-1]位置了。于是：dp[i][j] = dp[i][j - 1] + 1</p></li><li><p>删除：既然word1[i-1]与word2[j-1]不相等，那我们就删除掉word1[i-1]这个字符，需要一次操作。于是：dp[i][j] = dp[i - 1][j] + 1  </p><p>最后取上述三种操作的最小值即为dp[i][j],即：<br>$$dp[i][j] = min(dp[i - 1][j - 1],dp[i - 1][j - 1],dp[i - 1][j]) + 1$$</p></li></ol></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(String word1, String word2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[word1.length() + <span class="hljs-number">1</span>][word2.length() + <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//Base Case</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= word2.length(); j++)<br>        dp[<span class="hljs-number">0</span>][j] = j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= word1.length(); i++)<br>        dp[i][<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-comment">//状态转移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= word1.length(); i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= word2.length(); j++)&#123;<br>            <span class="hljs-keyword">if</span>(word1.charAt(i - <span class="hljs-number">1</span>) == word2.charAt(j - <span class="hljs-number">1</span>))<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">else</span><br>                dp[i][j] = Math.min(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], Math.min(dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j])) + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[word1.length()][word2.length()];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】503.下一个更大元素II</title>
    <link href="/2021/02/16/503.%20%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0%20II/"/>
    <url>/2021/02/16/503.%20%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0%20II/</url>
    
    <content type="html"><![CDATA[<h1 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a>503. 下一个更大元素 II</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p><pre><code>示例 1:输入: [1,2,1]输出: [2,-1,2]解释: 第一个 1 的下一个更大的数是 2；数字 2 找不到下一个更大的数； 第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</code></pre><h2 id="方法（栈）"><a href="#方法（栈）" class="headerlink" title="方法（栈）"></a>方法（栈）</h2><p>题目的核心是要找一个数右边最近的比它大的数，因此我们想到用单调栈来解决。</p><p>但此题的特点在于，给定数组是一个循环数组。也就是说：对于数组中的一个数来说，下一个比它大的数可能在它的右边，也可能在它的左边。</p><p>那么最直观的方法，就是拿原来的两个数组拼成一个新数组，然后对这个新数组应用单调栈的流程，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] nextGreaterElements(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length * <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>        arr[i] = nums[i % nums.length];<br>    &#125;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() &amp;&amp; arr[i] &gt; arr[stack.peek()])&#123;<br>            <span class="hljs-keyword">int</span> index = stack.pop();<br>            arr[index] = arr[i];<br>        &#125;<br>        stack.push(i);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>        <span class="hljs-keyword">int</span> index = stack.pop();<br>        arr[index] = -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Arrays.copyOf(arr, nums.length);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们也可以不构造新数组，用”%”运算符来模拟循环数组即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] nextGreaterElements(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i++)&#123;<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() &amp;&amp; nums[i % n] &gt; nums[stack.peek()])&#123;<br>            <span class="hljs-keyword">int</span> index = stack.pop();<br>            arr[index] = nums[i % n];<br>        &#125;<br>        <span class="hljs-comment">//注意，当i大于n小于2n时，不再需要将元素重复入栈</span><br>        <span class="hljs-keyword">if</span>(i &lt; n)<br>            stack.push(i % n);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>        <span class="hljs-keyword">int</span> index = stack.pop();<br>        arr[index] = -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】71.简化路径</title>
    <link href="/2021/02/16/71.%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/"/>
    <url>/2021/02/16/71.%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="71-简化路径"><a href="#71-简化路径" class="headerlink" title="71.简化路径"></a>71.简化路径</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。</p><p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。</p><p>请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。</p><pre><code>示例 1：输入：&quot;/home/&quot;输出：&quot;/home&quot;解释：注意，最后一个目录名后面没有斜杠。示例 2：输入：&quot;/../&quot;输出：&quot;/&quot;解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。示例 3：输入：&quot;/home//foo/&quot;输出：&quot;/home/foo&quot;解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。示例 4：输入：&quot;/a/./b/../../c/&quot;输出：&quot;/c&quot;示例 5：输入：&quot;/a/../../b/../c//.//&quot;输出：&quot;/c&quot;示例 6：输入：&quot;/a//b////c/d//././/..&quot;输出：&quot;/a/b/c&quot;</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>用栈解决，具体步骤如下：</p><ul><li>先将给定路径以”/“分割，分割得到的元素可能包含”.” , “..” , “”这三种特殊情况以及正常的目录。</li><li>如果遍历到正常的目录，则入栈。如果遍历到””和”.”,不入栈。如果遍历到”..”,则弹出栈顶目录。</li><li>遍历栈中的每一层目录，拼出规范路径的结果res</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">simplifyPath</span><span class="hljs-params">(String path)</span> </span>&#123;<br>    Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(String str: path.split(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;..&quot;</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!stack.isEmpty())<br>                stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(!str.isEmpty() &amp;&amp; !str.equals(<span class="hljs-string">&quot;.&quot;</span>))<br>                stack.push(str);<br>        &#125;<br>    &#125;<br>    String res = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(String str: stack)<br>        res += <span class="hljs-string">&quot;/&quot;</span> + str;<br>    <span class="hljs-keyword">return</span> res.isEmpty() ? <span class="hljs-string">&quot;/&quot;</span> : res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://leetcode-cn.com/problems/simplify-path/solution/zhan-by-powcai/">leetcode题解区</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】739.每日温度</title>
    <link href="/2021/02/16/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
    <url>/2021/02/16/739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739.每日温度"></a>739.每日温度</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><pre><code>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</code></pre><p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p><h2 id="方法（单调栈）"><a href="#方法（单调栈）" class="headerlink" title="方法（单调栈）"></a>方法（单调栈）</h2><p>题目的意思为：要我们对于数组中的每一个数，找到右边最近的比它大的那个数离它有多远</p><p><strong>对于在数组中寻找左右两边最近的比它大或比它小的数的情况，我们可以使用单调栈来解决。</strong></p><p>算法流程：<br>准备一个栈，然后遍历数组：</p><ul><li><p>如果当前元素比栈顶元素小，那么直接入栈。</p></li><li><p>如果当前元素比栈顶元素大，那么不断地将栈顶元素弹出，直到当前元素比栈顶元素小为止，再将当前元素入栈。以让栈保持从栈底到栈顶从大到小的单调性。</p></li><li><p>每当栈中一个元素弹出时，说明让它弹出的那个元素就是它右边最近的比它大的元素。我们这时进行结算，它们之间的距离就是它们在数组中的位置（索引）之差。也正因为如此，为了方便，我们在将元素入栈出栈时，都针对的是它在数组中的索引，而不是它具体的值。</p></li><li><p>当遍历完所有元素后，如果栈中还有元素没有弹出，说明这些元素没有遇到右边比它大的元素，将结果数组中这些元素对应的位置处置0</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dailyTemperatures(<span class="hljs-keyword">int</span>[] T) &#123;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[T.length];<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; T.length; i++)&#123;<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() &amp;&amp; T[i] &gt; T[stack.peek()])&#123;<br>            <span class="hljs-keyword">int</span> index = stack.pop();<br>            res[index] = i - index;<br>        &#125;<br>        stack.push(i);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>        <span class="hljs-keyword">int</span> index = stack.pop();<br>        res[index] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】 84.柱状图中最大的矩形</title>
    <link href="/2021/02/16/84.%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/"/>
    <url>/2021/02/16/84.%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="84-柱状图中最大的矩形"><a href="#84-柱状图中最大的矩形" class="headerlink" title="84.柱状图中最大的矩形"></a>84.柱状图中最大的矩形</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。<br>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><pre><code>例如:height = [4,3,2,5,6].则柱状图中每一竖列的高分别为4，3，2，5，6。能找到的最大矩形即为以5为底，以2为高的矩形。面积为10.</code></pre><h2 id="方法（单调栈）"><a href="#方法（单调栈）" class="headerlink" title="方法（单调栈）"></a>方法（单调栈）</h2><p>依次计算以每一竖列为高的所有矩形中最大的面积。即统计从一个竖列向左右扩，左边和右边分别能扩多远（如果在左右遇到了低于它的竖列，则无法扩）。</p><p>我们维护一个单调栈结构来做到这一点（由栈底到栈顶，元素大小从小到大），准备一个栈。先将第一个元素入栈。之后尝试将数组中的每一个元素入栈。</p><ul><li>如果要加入的元素小于栈顶元素，那么为了维护栈的单调性，将栈顶依次弹出，直到栈顶元素小于要加入元素了，将元素入栈。对于弹出的每个元素，都代表着直方图中的每一个竖列。弹出时进行结算，此单调栈的原则是：谁让它弹出，谁就是它右边最近比它小的。而它在栈中下面的那个元素代表着它左边最近比它小的。因此，知道它左右两边最近比它小的，就可以知道以它为竖列的最大矩形面积。</li><li>如果要加入的元素大于栈顶元素，符合栈的单调性，直接入栈。</li></ul><p>当遍历完数组中的所有元素后，如果栈非空，将栈中元素弹空。每弹出一个元素，对它进行结算。计算以它为竖列的最大矩形面积。对于这些元素，因为没有元素使得它弹出，因此它没有右边比它小的元素，它可以扩到直方图的最右边。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxRecFromBottom</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(height == <span class="hljs-keyword">null</span> || height.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxArea = <span class="hljs-number">0</span>;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; height.length; i++)&#123;<br>        <span class="hljs-comment">//如果要加入的元素小于栈顶元素，将栈顶依次弹出。弹出时进行结算</span><br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() &amp;&amp; height[i] &lt;=height[stack.peek()])&#123;<br>            <span class="hljs-keyword">int</span> j = stack.pop();<br>            <span class="hljs-comment">//k是以j为竖列能扩到的左边界。即它在栈中下面的那个元素。</span><br>            <span class="hljs-comment">//如果j弹出时，它下面没元素，那么左边界为-1.否则，它的左边界为它下面那个元素在数组中的下标。</span><br>            <span class="hljs-keyword">int</span> k = stack.isEmpty() ? -<span class="hljs-number">1</span> : stack.peek();<br>            <span class="hljs-comment">//遍历到i位置令j弹出，因此i为以j为竖列能扩到的右边界。</span><br>            <span class="hljs-comment">//所以以j为竖列能扩出的最大矩形：底为i - k - 1。高为height[j]</span><br>            <span class="hljs-keyword">int</span> curArea = (i - k - <span class="hljs-number">1</span>) * height[j];<br>            maxArea = Math.max(maxArea, curArea);<br>        &#125;<br>        <span class="hljs-comment">//否则，直接将元素入栈。</span><br>        stack.push(i);<br>    &#125;<br>    <span class="hljs-comment">//在对数组遍历完后，对于栈中剩余的那些元素，不要忘记结算。</span><br>    <span class="hljs-comment">//因为没有元素令它们弹出，所以它们在右边没有比它们小的元素。向右可以扩到头height.length</span><br>    <span class="hljs-keyword">while</span> (!stack.isEmpty())&#123;<br>        <span class="hljs-keyword">int</span> j = stack.pop();<br>        <span class="hljs-keyword">int</span> k = stack.isEmpty() ? -<span class="hljs-number">1</span> : stack.peek();<br>        <span class="hljs-keyword">int</span> curArea = (height.length - k - <span class="hljs-number">1</span>) * height[j];<br>        maxArea = Math.max(maxArea, curArea);<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxArea;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】20.有效的括号</title>
    <link href="/2021/02/15/20.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <url>/2021/02/15/20.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h1><p><strong>题目：</strong><br>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>  示例 1:<br>  输入: “()”<br>  输出: true  </p><p>  示例 2:<br>  输入: “()[]{}”<br>  输出: true  </p><p>  示例 3:<br>  输入: “(]”<br>  输出: false </p><p>  示例 4:<br>  输入: “([)]”<br>  输出: false  </p><p>  示例 5:<br>  输入: “{[]}”<br>  输出: true  </p><p><strong>思路：</strong><br>核心思路是用栈来解决问题，哈希表用来简化问题。遍历整个字符串的每一个字符，如果是左括号则入栈；如果是右括号，则判断栈顶是否是它所对应的左括号，如果不是直接返回true，如果是则将栈顶的左括号弹出。这样一来，遍历完整个字符串后，如果栈中还有元素，则说明没有完全匹配，返回false。如果遍历完栈空了，则返回true。<br>哈希表是用来将右括号（key）和左括号（value）对应起来。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HashMap&lt;Character, Character&gt; map;<br>    <span class="hljs-comment">//构造器中初始化mappings</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//将哈希表map中放入三个键值对</span><br>        <span class="hljs-keyword">this</span>.map = <span class="hljs-keyword">new</span> HashMap&lt;Character, Character&gt;();<br>        <span class="hljs-keyword">this</span>.map.put(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>);<br>        <span class="hljs-keyword">this</span>.map.put(<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>);<br>        <span class="hljs-keyword">this</span>.map.put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;Character&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++)&#123;<br>            <span class="hljs-keyword">char</span> c = s.charAt(i);<br>            <span class="hljs-comment">//如果目前的字符是一个右括号</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.map.containsKey(c))&#123;<br>                <span class="hljs-comment">//获得栈顶元素，如果栈顶是空，则记为#</span><br>                <span class="hljs-keyword">char</span> topElement = stack.empty() ? <span class="hljs-string">&#x27;#&#x27;</span> : stack.pop();<br>                <span class="hljs-comment">//若栈顶不等于对应的左括号，直接返回false</span><br>                <span class="hljs-keyword">if</span> (topElement != <span class="hljs-keyword">this</span>.map.get(c))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                <span class="hljs-comment">//否则栈顶等于对应的左括号，则什么都不用做，上面已经把栈顶pop了</span><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//如果目前字符是一个左括号，就把它压进栈</span><br>                stack.push(c);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果经过上述遍历，栈中仍有元素，则返回false。</span><br>        <span class="hljs-keyword">return</span> stack.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="2020-8-14二刷更新"><a href="#2020-8-14二刷更新" class="headerlink" title="2020.8.14二刷更新"></a>2020.8.14二刷更新</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>我们先分析有效括号的定义：</p><ul><li>首先，对于每一个出现过的左括号，之后都需要出现一个相对应的右括号。</li><li>其次，“括号必须以正确的顺序括回”。这句话可以理解为：在当前遍历到的左括号仍然完全全部匹配时，第一个出现的左括号，必须要与最后一个出现的右括号对应，最后一个出现的左括号，必须要与第一个出现的右括号对应。（如示例5）</li></ul><p>这样的先入后出的顺序自然让我们想到了栈结构。因此我们可以借助一个栈来实现算法。算法流程如下：</p><ul><li>准备一个栈，之后依次遍历字符串的每一个字符</li><li>如果遍历到左括号，则将一个相应的右括号加入到栈中。</li><li>如果遍历到右括号，则检查这个右括号和栈顶的右括号类型是否相等，如果不相等或栈中不存在可以比较的括号了，则不匹配直接返回false。如果相等则弹出这个栈中元素，继续向下遍历。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++)&#123;<br>        <span class="hljs-comment">//遍历到左括号的情况</span><br>        <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            stack.push(<span class="hljs-string">&#x27;)&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            stack.push(<span class="hljs-string">&#x27;]&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>            stack.push(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>        <span class="hljs-comment">//遍历到右括号的情况</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(stack.isEmpty() || s.charAt(i) != stack.peek())<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">else</span><br>                stack.pop();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2021-1-3三刷更新"><a href="#2021-1-3三刷更新" class="headerlink" title="2021.1.3三刷更新"></a>2021.1.3三刷更新</h1><p>从头到尾遍历字符串</p><ul><li>如果当前字符为左括号，则将这个左括号入栈</li><li>如果当前字符是右括号，则比较当前栈顶的左括号是否和它对应，如果对应则匹配，可以将这个左括号出栈了。如果不匹配或者栈已空（没有左括号来和这个右括号匹配了），则返回false。</li><li>遍历完字符串后，如果栈中还有尚未匹配的左括号，则返回false。否则返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    Map&lt;Character, Character&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>);<br>    map.put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>);<br>    map.put(<span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>    Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;)&#x27;</span> || s.charAt(i) == <span class="hljs-string">&#x27;]&#x27;</span> || s.charAt(i) == <span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(stack.isEmpty() || map.get(stack.peek()) != s.charAt(i))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            stack.push(s.charAt(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFPRT算法</title>
    <link href="/2021/02/15/BFPRT%E7%AE%97%E6%B3%95/"/>
    <url>/2021/02/15/BFPRT%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="BFPRT算法"><a href="#BFPRT算法" class="headerlink" title="BFPRT算法"></a>BFPRT算法</h1><h2 id="算法目的"><a href="#算法目的" class="headerlink" title="算法目的"></a>算法目的</h2><p>在无序数组中找到第K小的数，时间复杂度O(N)</p><h2 id="基于partition思路的算法"><a href="#基于partition思路的算法" class="headerlink" title="基于partition思路的算法"></a>基于partition思路的算法</h2><p>和快速排序中partition的思想有些相像。比如说我们要在长度为1000的数组中找到第n小的数，于是我们现在数组中随机找一个数进行partition的过程，小于它的放左边，等于它的放中间，大于它的放右边。完成后的情况如下图所示，等于区域范围为500-600</p><p><img src="/img/BFPRT.jpg"></p><p>因为我们要找第n小的数，因此：</p><ul><li>如果500 &lt; n &lt; 600,因此这个第n小的数就在等于区域，即我们进行partition的基准元素。</li><li>如果n &lt; 500, 那么这个第n小的数肯定在小于区域，我们继续对小于区域进行partition过程。</li><li>如果n &gt; 600，那么这个第n小的数肯定在大于区域，我们继续对大于区域进行partition过程。</li></ul><p>该算法的平均时间复杂度基于概率，其长期期望为:O(N)</p><h2 id="BFPRT算法-1"><a href="#BFPRT算法-1" class="headerlink" title="BFPRT算法"></a>BFPRT算法</h2><p>BFPRT算法的时间复杂度不基于概率，严格O(N)</p><p>BFPRT与上述算法的唯一区别在于：<strong>选择partition基准元素的这一步不是随机选取的</strong>。一旦选好了这个基准元素，之后的过程和上述算法相同。 </p><p>选择基准元素的方式：</p><ol><li>先将长度为N的数组进行分组，每5个元素一组</li><li>在每一组的组内进行排序(组间不排序)，也即将每一个长度为5的小组排序，小组内排序的时间复杂度为O(1)，一共有N/5个小组，因此这一步的时间复杂度为O(N)</li><li>将每一小组的中位数拿出来，构成一个长度为N/5的新数组</li><li>递归调用BFPRT算法，找到新数组中的中位数num</li><li>将这个元素num作为基准元素，进行partition</li></ol><p>为什么要这么选基准元素：<br>num在长度为N/5的新数组中是中位数，因此这个新数组中有N/10个数比num大，这N/10个数中的每个数a在它的原数组里又是中位数，即长度为5的原数组中有2个数比a大。因此，所有比num大的数统计起来，至少有$3N/10$个，也即最多有$7N/10$个数比num小.</p><p>同理，如果统计比num小的数，发现至少也有$3N/10$个数比它小，即最多有$7N/10$个数比num大.</p><p>那么我们用这个num做划分进行partition，会发现最多就有$7N/10$个数比它大，也最多有$7N/10$个数比它小。因此，下一步partition的范围最多也就是$7N/10$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>选基准元素的代码部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在arr中从begin到end间的元素范围内，选基准元素的过程</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">medianOfMedians</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> end)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num = end - begin + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> offset = num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//mArr为中位数构成的新数组</span><br>    <span class="hljs-keyword">int</span>[] mArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[num / <span class="hljs-number">5</span> + offset];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mArr.length; i++)&#123;<br>        <span class="hljs-comment">//beginI和endI为每个长度为5的小组的首尾</span><br>        <span class="hljs-keyword">int</span> beginI = begin + i * <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span> endI = beginI + <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//取出每个小组的中位数，构成新数组</span><br>        mArr[i] = getMedian(arr, beginI, Math.min(end, endI));<br>    &#125;<br>    <span class="hljs-comment">//返回新数组的中位数</span><br>    <span class="hljs-keyword">return</span> bfprt(mArr, <span class="hljs-number">0</span>, mArr.length - <span class="hljs-number">1</span>, mArr.length / <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">//返回数组arr中从begin到end间所有元素的中位数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMedian</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> end)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[end - begin + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = begin; i &lt;= end; i++)<br>        res[index++] = arr[i];<br>    Arrays.sort(res);<br>    <span class="hljs-keyword">return</span> res[res.length / <span class="hljs-number">2</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>获得基准元素pivot后，以它为基准进行partition操作，并进入BFPRT流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMinKthByBFPRT</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] copyArr = Arrays.copyOf(arr, arr.length);<br>    <span class="hljs-keyword">return</span> bfprt(copyArr, <span class="hljs-number">0</span>, copyArr.length - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//bfprt算法主体，在begin和end间的范围里求第i小的数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bfprt</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(begin == end)<br>        <span class="hljs-keyword">return</span> arr[begin];<br>    <span class="hljs-comment">//求每个小组中位数组成的新数组的中位数</span><br>    <span class="hljs-keyword">int</span> pivot = medianOfMedians(arr, begin, end);<br>    <span class="hljs-comment">//将pivot作为基准元素进行partition，返回等于区域的范围</span><br>    <span class="hljs-keyword">int</span>[] pivotRange = partition(arr, begin, end, pivot);<br>    <span class="hljs-keyword">if</span>(i &gt;= pivotRange[<span class="hljs-number">0</span>] &amp;&amp; i &lt;= pivotRange[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> arr[i];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; pivotRange[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> bfprt(arr, begin, pivotRange[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>, i);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> bfprt(arr, pivotRange[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, end, i);<br>&#125;<br><br><span class="hljs-comment">//在数组arr中从begin到end的范围内以pivot为基准元素进行划分，返回等于区域范围</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] partition(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> begin, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">int</span> pivot)&#123;<br>    <span class="hljs-comment">//用small分别代表小于区域的右边界和大于区域的左边界，初始化时两个区域都没有元素</span><br>    <span class="hljs-keyword">int</span> small = begin - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> big = end + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> cur = begin;<br>    <span class="hljs-keyword">while</span>(cur != big)&#123;<br>        <span class="hljs-keyword">if</span>(arr[cur] &lt; pivot)<br>            swap(arr, ++small, cur++);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[cur] &gt; pivot)<br>            swap(arr, --big, cur);<br>        <span class="hljs-keyword">else</span><br>            cur++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;small + <span class="hljs-number">1</span>, big - <span class="hljs-number">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>KMP算法</title>
    <link href="/2021/02/15/KMP%E7%AE%97%E6%B3%95/"/>
    <url>/2021/02/15/KMP%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h2 id="KMP算法目的"><a href="#KMP算法目的" class="headerlink" title="KMP算法目的"></a>KMP算法目的</h2><p>在str1中寻找str2出现的位置<br>假设str1长度为N，str2长度为M  </p><p>暴力方法：尝试从str1的每一个位置开始，让str2来匹配，暴力方法时间复杂度：O(MN)</p><h2 id="KMP算法流程："><a href="#KMP算法流程：" class="headerlink" title="KMP算法流程："></a>KMP算法流程：</h2><p><img src="/img/kmp.jpg"></p><ul><li>i1代表str1的索引，i2代表str2的索引。二者都从零位置开始尝试匹配。每一次匹配成功，i1和i2都右移</li><li>当匹配失败时（以图中为例：X != Y)，有一个推论为：在str1从i到j中任何一个位置开始，都匹配不出str2。既然明知匹配不出，那就不用再像暴力法那样从str1中i的下一个位置开始尝试匹配str2。只需从下一个不确定能不能匹配的位置（即j）开始尝试匹配str2。即i1从j开始，i2从0开始。<br>又因为str1中从j到x的字符与str2中Y的前next[Y]个字符相等（曾经匹配成功过），str2中Y的前next[Y]个字符与str2的前next[Y]个字符相等（next数组的定义）。因此可以推出：str1中从j到x的字符与str2中Y的前next[Y]个字符相等。<br>所以str1中从j开始的next[Y]个字符和str2中从0开始的前next[Y]个字符是肯定相等、不用匹配的。因此i1可以直接从X处开始（匹配失败的位置），i2可以直接从next[Y]处开始。</li><li>还需注意一个特殊情况：当i2为str2的第一个位置（next[i2] == -1），且str2中i2与str1中i1对应字符不相等时，意味着str2中第一个位置和str1的i1处都不匹配。那么从str1的i1开始肯定匹配不出str2，于是i1++。</li><li>当while循环退出时，说明str1或str2中的任意一个走到末尾了。如果str2走到末尾了，则说明匹配成功了，返回str2在str1中出现位置的索引：i1-i2。否则，str2没走到末尾str1却走到了末尾，说明匹配失败，str2中没有str1,返回-1。</li></ul><p>Q &amp; A<br>问：为什么当匹配失败时可以说：在str1中从i到j任何一个位置开始，都匹配不出str2？<br>答：假设从str1中i到j的一个位置k开始，可以匹配出str2。即从k到X的这n个字符应该和str2中从0开始的前n个字符匹配（注意：n &gt; next[Y])。又因为str1中k到X的这n个字符已经和str2中Y的前n个字符匹配过了，它们是相等的。于是str2中从0开始的前n个字符（前缀）应该和Y前面的n个字符相等（后缀）。但由next数组的定义可知，它们是不相等的。因此这种假设不成立。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIndexOf</span><span class="hljs-params">(String s, String m)</span></span>&#123;<br>    <span class="hljs-comment">//在s中找不到m，返回-1</span><br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || m == <span class="hljs-keyword">null</span> || m.length() &lt; <span class="hljs-number">1</span> || s.length() &lt; m.length())<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span>[] str1 = s.toCharArray();<br>    <span class="hljs-keyword">char</span>[] str2 = m.toCharArray();<br>    <span class="hljs-keyword">int</span> i1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//根据str生成next数组</span><br>    <span class="hljs-keyword">int</span>[] next = getNextArray(str2);<br>    <span class="hljs-keyword">while</span>(i1 &lt; str1.length &amp;&amp; i2 &lt; str2.length)&#123;<br>        <span class="hljs-keyword">if</span>(str1[i1] == str2[i2])&#123;<br>            i1++;<br>            i2++;<br>        &#125;<br>        <span class="hljs-comment">//next[i2]为1代表i2是str2中的第一个位置，即如果str2中第一个位置和str1的i1位置都不匹配</span><br>        <span class="hljs-comment">//那么让i1加1，让str2和在str1从i1的后一个位置开始匹配</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(next[i2] == -<span class="hljs-number">1</span>)<br>            i1++;<br>        <span class="hljs-keyword">else</span><br>            i2 = next[i2];<br>    &#125;<br>    <span class="hljs-keyword">return</span> i2 == str2.length ? i1 - i2 : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="next数组的构建"><a href="#next数组的构建" class="headerlink" title="next数组的构建"></a>next数组的构建</h2><p>next数组表示str2中任意一个字符<strong>前面的字符串的最长前缀和最长后缀的匹配长度</strong></p><p>比如：str2为abkababkabF,那么F在next数组中对应的数值就为5（F前面字符串的最长前缀和最长后缀最长匹配5个位置，abkab）</p><p>构建next数组的步骤：<br>例如str2为ababcababaK,那么K前面这个a对应的next值为4（最长前缀和最长后缀abab的长度）。现在已知这个next[a]，想要求next[K],于是我们比较next[a]对应的最长前缀的后一个字符c与next[a]对应的最长后缀的后一个字符a,发现二者不等。于是我们再将这个a与next[c]的最长前缀的后一个字符a相比，发现二者相等。于是next[K] = next[c] + 1,即2+1= 3</p><p>注：这里next[K]和next[c]都是简写，实际应该为next[11]和next<a href="%E5%8D%B3%E4%BD%8D%E7%BD%AE%E7%B4%A2%E5%BC%95%E5%80%BC">5</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] getNextArray(<span class="hljs-keyword">char</span>[] str)&#123;<br>    <span class="hljs-keyword">if</span>(str.length == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[str.length];<br>    next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//i为当前来到的位置索引</span><br>    <span class="hljs-comment">//cn为i-1对应的最长前缀的下一个字符的位置索引</span><br>    <span class="hljs-comment">//cn可以看作next[i-1]</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> cn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; next.length)&#123;<br>        <span class="hljs-keyword">if</span>(str[i - <span class="hljs-number">1</span>] == str[cn])<br>            <span class="hljs-comment">//相当于next[i]=next[i-1]+1</span><br>            next[i++] = ++cn;<br>        <span class="hljs-comment">//如果前一个位置的字符与cn处不等，那么cn往前跳</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cn &gt; <span class="hljs-number">0</span>)<br>            cn = next[cn];<br>        <span class="hljs-comment">//如果不等且cn不能往前跳了(其最长前缀和最长后缀为0）</span><br>        <span class="hljs-keyword">else</span><br>            next[i++] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】1143.最长公共子序列</title>
    <link href="/2021/02/15/Leetcode%201143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2021/02/15/Leetcode%201143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143.最长公共子序列"></a>1143.最长公共子序列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>注：两个字符串的「公共子序列」（Longest Common Subsequence，简称 LCS）是这两个字符串所共同拥有的子序列。若这两个字符串没有公共子序列，则返回 0。</p><pre><code>示例 1:输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; 输出：3  解释：最长公共子序列是 &quot;ace&quot;，它的长度为 3。示例 2:输入：text1 = &quot;abc&quot;, text2 = &quot;abc&quot;输出：3解释：最长公共子序列是 &quot;abc&quot;，它的长度为 3。示例 3:输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;输出：0解释：两个字符串没有公共子序列，返回 0。</code></pre><h2 id="方法（动态规划）"><a href="#方法（动态规划）" class="headerlink" title="方法（动态规划）"></a>方法（动态规划）</h2><p>遇到子序列相关的问题，可以往动态规划上考虑。这道题让我们在<strong>两个字符串</strong>中寻找共同拥有的最长子序列，因此很容易想到用二维动态规划来解决。</p><h3 id="1-定义dp数组"><a href="#1-定义dp数组" class="headerlink" title="1.定义dp数组"></a>1.定义dp数组</h3><p>定义$dp[i][j]$为：$str1[0…i-1]和str2[0…j-1]$的最长公共子序列长度。</p><h3 id="2-Base-Case"><a href="#2-Base-Case" class="headerlink" title="2.Base Case"></a>2.Base Case</h3><p>根据上述dp数组的定义，可以写出如下Base Case：</p><ul><li>i为0时，str1[0…i-1]不构成一个字符串，因此不存在与str2的公共子序列，因此dp[0][j]为0</li><li>j为0时，str2[0…j-1]不构成一个字符串，因此不存在于str1的公共子序列，因此dp[i][0]为0</li></ul><h3 id="3-状态转移方程"><a href="#3-状态转移方程" class="headerlink" title="3.状态转移方程"></a>3.状态转移方程</h3><p>当str1遍历到i - 1，str2遍历到j - 1时，即要求$str1[0…i-1]和str2[0…j-1]$的最长公共子序列长度时，需要考虑以下的几种情况：</p><ul><li><p>如果str1[i - 1]与str2[j - 1]相等，那么肯定要将其放入str1[0…i−1]和str2[0…j−1]的LCS当中，有了这个字符，LCS的长度就会加1，因此<br>$$dp[i][j] = dp[i - 1][j - 1] + 1$$</p></li><li><p>如果str1[i - 1]与str2[j - 1]不等，则又会分为以下的三种情况：</p><ul><li><p>str1[i - 1]与str2[j - 1]都不放入LCS当中，那么LCS的长度不会产生变化，即dp[i][j] = dp[i - 1][j - 1]</p></li><li><p>str1[i - 1]放入LCS中，但str2[j - 1]不放。这时dp[i][j] = dp[i][j - 1]</p></li><li><p>str1[i - 1]不放入LCS中，但str2[j - 1]放。这时dp[i][j] = dp[i - 1][j]</p><p> 由于在dp[i][j]这个位置可以做上述三种选择，因此取三种选择可能产生的最大值，即为dp[i][j]。即：<br> $$dp[i][j] = max(dp[i - 1][j - 1],dp[i][j - 1],dp[i - 1][j])$$</p></li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(String str1, String str2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[str1.length() + <span class="hljs-number">1</span>][str2.length() + <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//Base Case,其实可以不用，因为数组初始化时全体元素就为0</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= str2.length(); j++)<br>        dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= str1.length(); i++)<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= str1.length(); i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= str2.length(); j++)&#123;<br>            <span class="hljs-keyword">if</span>(str1.charAt(i - <span class="hljs-number">1</span>) == str2.charAt(j - <span class="hljs-number">1</span>))<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], Math.max(dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j]));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[str1.length()][str2.length()];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度:O(m * n)</li><li>空间复杂度:O(m * n)<br>其中，m和n分别为str1和str2的长度</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/02/15/git/"/>
    <url>/2021/02/15/git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>git命令必须在仓库目录内执行</p><ol><li><p>创建一个空目录并进入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> mkdir learngit<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> learngit<br></code></pre></td></tr></table></figure></li><li><p>将这个目录变成git可以管理的仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>将一个文件<strong>添加</strong>到仓库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git <span class="hljs-builtin-name">add</span> readme.txt<br></code></pre></td></tr></table></figure><p>注意：添加某个文件时，该文件必须在当前目录下存在</p></li><li><p>将这个文件<strong>提交</strong>到仓库</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-string">$ </span>git commit -m <span class="hljs-comment">&quot;wrote a readme file&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p>-m后面是本次提交的说明</p><h2 id="对仓库中内容进行修改"><a href="#对仓库中内容进行修改" class="headerlink" title="对仓库中内容进行修改"></a>对仓库中内容进行修改</h2><p>用以下命令可以掌握工作区的状态，它会告诉我们文件有没有修改过</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>而以下命令可以查看修改的内容</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">diff</span> readme.txt<br></code></pre></td></tr></table></figure><h3 id="1-版本回退"><a href="#1-版本回退" class="headerlink" title="1.版本回退"></a>1.版本回退</h3><p>我们在工作中会不断地对文件进行修改，当我们觉得修改到一定程度的时候，就可以进行一次commit，相当于打游戏时进行一次存档。一旦文件被该乱了，或者不小心删除了文件，还可以从最近的一个commit中恢复。</p><p>以下命令告诉我们commit的历史记录,它会显示从最近到最远的提交版本</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>在Git中，<strong>用HEAD表示当前版本</strong>，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本就是HEAD~100。如果我们要把当前版本回退到上一个版本，就可以用如下的命令</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD^</span><br></code></pre></td></tr></table></figure><p>显然，当回退到上一个版本之后，刚才的当前版本已经不会在git log中看到了。但扔可以通过commit id回到刚才的那个版本（7c0b9b为那个版本git版本号的前几位）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> reset --hard  <span class="hljs-number">7</span>c<span class="hljs-number">0</span>b<span class="hljs-number">9</span>b<br></code></pre></td></tr></table></figure><p>但是那个版本的版本号找不到或者不记得了怎么办？不要紧，git记录了我们的每一次命令,通过如下命令行查看命令历史，就可以找到我们想重返的版本的id</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git reflog<br><span class="hljs-number">7</span>c0b9b5 (HEAD -&gt; master) HEAD@&#123;<span class="hljs-number">0</span>&#125;: <span class="hljs-keyword">reset</span>: moving <span class="hljs-keyword">to</span> <span class="hljs-number">7</span>c0b9b<br><span class="hljs-number">06</span>d21e9 HEAD@&#123;<span class="hljs-number">1</span>&#125;: <span class="hljs-keyword">reset</span>: moving <span class="hljs-keyword">to</span> HEAD^<br><span class="hljs-number">7</span>c0b9b5 (HEAD -&gt; master) HEAD@&#123;<span class="hljs-number">2</span>&#125;: <span class="hljs-keyword">commit</span>: <span class="hljs-keyword">add</span> a <span class="hljs-type">line</span><br><span class="hljs-number">06</span>d21e9 HEAD@&#123;<span class="hljs-number">3</span>&#125;: <span class="hljs-keyword">commit</span> (initial): <span class="hljs-keyword">write</span> a readme <span class="hljs-type">text</span><br></code></pre></td></tr></table></figure><h3 id="2-工作区和暂存区"><a href="#2-工作区和暂存区" class="headerlink" title="2.工作区和暂存区"></a>2.工作区和暂存区</h3><p>Git管理的文件分为工作区和版本库(.git隐藏目录)。版本库又分为暂存区stage和git为我们创建的第一个分支master。</p><p>我们把文件添加到git版本库分为两步：</p><ul><li>用git add把文件修改添加到暂存区</li><li>用git commit将暂存区的内容添加到当前分支</li></ul><p>可以理解为：将需要提交的文件修改先全都放到暂存区，然后，一次性提交暂存区的所有修改。</p><h3 id="3-撤销修改和删除文件"><a href="#3-撤销修改和删除文件" class="headerlink" title="3.撤销修改和删除文件"></a>3.撤销修改和删除文件</h3><p>如下命令可以用来撤销对工作区的修改</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ git checkout <span class="hljs-comment">-- readme.txt</span><br></code></pre></td></tr></table></figure><p>有两种情况：</p><ul><li>readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ul><p>总之，以上命令就是让这个文件工作区回到最近一次git commit或git add时的状态。</p><p>但是如果对工作区修改后还add到了暂存区该怎么办呢？</p><ol><li>先用如下命令可以撤销对暂存区的修改（unstage），然后重新放回工作区<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git reset HEAD readme.txt<br></code></pre></td></tr></table></figure></li><li>现在暂存区干净了，但是工作区还有修改，接下来再撤销掉工作区的修改：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ git checkout <span class="hljs-comment">-- readme.txt</span><br></code></pre></td></tr></table></figure>总结撤销修改的三种情况：</li></ol><ul><li>当改乱了文件的内容并且还未add，想直接丢弃工作区的修改时，用命令git checkout – file</li><li>当改乱了文件的内容并且add到了暂存区时，想丢弃修改，第一步先用命令git reset HEAD file丢弃暂存区的修改，第二步再用命令git checkout – file丢弃工作区的修改。</li><li>当已经把改乱的文件commit到版本库时，想撤销提交，这时就需要版本回退。</li></ul><p>总结删除文件的两种情况：<br>当我们把工作区的一个文件删除时：</p><ul><li><p>如果我们确实要从版本库中删除该文件，那么就用git rm file删除掉，并且git commit</p></li><li><p>如果我们其实是不小心删错了，那就可以用git checkout – file将误删的文件恢复到最新版本。</p><p>注意：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p></li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>Github用来提供Git仓库托管服务，它相当于一个服务器，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p><ol><li>在github中添加本地计算机的SSH Key。这样GitHub就可以识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</li><li>在github中建立一个 repository。并在本地库中运行如下命令将本地版本库和github上的远程库关联起来（远程库的名字就叫origin）<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wyh317/</span>learnGit.git<br></code></pre></td></tr></table></figure></li><li>将本地库的所有内容推送到远程库上,实际上是把当前分支master推送到远程。并且本地的master分支和远程的master分支关联了起来<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure>由于远程库是空的，所以第一次推送master分支时，带了”-u”。之后，只要本地做了提交，就可以通过如下命令将本地的master分支的最近修改推送至Github<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure>可以使用如下命令从github上克隆出一个本地库<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:wyh317/learnGit.git<br></code></pre></td></tr></table></figure>当从远程仓库克隆时，Git自动把本地的master分支和远程的master分支对应起来了，并且远程仓库的默认名称是origin。可以用git remote或者git remote -v查看远程库的信息。</li></ol><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>Git鼓励使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p><ul><li>查看分支：git branch</li><li>创建分支：git branch name</li><li>创建一个分支并切换到它：git switch -c name</li><li>切换到某个分支：git switch name</li><li>合并某分支到当前分支：git merge name</li><li>删除分支：git branch -d name</li></ul><p>当两个分支的文件修改有冲突时，git无法完成自动合并，我们必须先手动把冲突解决然后提交，再合并。用git log –graph命令可以看到分支合并图。</p><p>通常在合并分支时，git会默认使用fast forward模式，但这种模式下删除分支后，会丢掉分支信息。如果使用以下命令行来merge(即将分支test合并到当前分支）：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ git <span class="hljs-keyword">merge</span> --<span class="hljs-keyword">no</span>-ff -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;merge with no-ff&quot;</span> <span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p>那么Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。（因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去），能看出来做过合并，而fast forward合并后就看不出来曾经做过合并</p><p><strong><em>分支策略</em></strong>：</p><ul><li>master分支应该是非常稳定的，仅用来发布版本，不能在上面工作</li><li>dev分支是不稳定的，用来工作用，到版本发布时，再把dev分支合并到master上</li><li>团队的每个成员都在dev的分支上工作，每个人有自己的分支，工作完往dev上合并即可。</li></ul><p><strong><em>Bug分支</em></strong>：<br>在修复bug时，我们通过创建新的bug分支来进行修复，修复完之后进行合并，最后将这个bug分支删除。</p><p>当手头上的工作还没有完成时，我们可以用git stash命令将当前工作现场“储藏”起来，然后去修复bug，修复后再用git stash pop命令恢复现场继续工作。</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用如下命令，把修复bug的commit（用其id表示）“复制”到当前分支，避免重复劳动。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git cherry-pick commitid</span><br></code></pre></td></tr></table></figure><p><strong><em>Feature分支</em></strong>：<br>每添加一个新功能，最好新建一个feature分支并在上面开发，完成后与主分支进行merge，最后删除该feature分支。</p><p><strong><em>多人协作</em></strong>：  </p><ul><li>首先，用git push origin <branch-name>向远程推送自己的更改</li><li>如果推送失败，说明队友的最新提交和我们正要试图的提交有冲突，那我们先用git pull抓取远程的新提交</li><li>在本地解决冲突，并在本地提交</li><li>将冲突解决后的分支提交到远程git push origin <branch-name></li></ul><p>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to <branch-name> origin/<branch-name>。</p><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>发布一个版本时，我们通常会在版本库中打一个标签（tag），一个标签对应着一个commit，例如id为6a5819e的commit对应着标签为v1.2的版本，这样便与日后查找。</p><p>可以通过如下的命令进行打标签：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">v1</span>.<span class="hljs-number">3</span><br>$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">v1</span>.<span class="hljs-number">2</span> <span class="hljs-number">6</span>a5819e<br></code></pre></td></tr></table></figure><p>第一行将标签v1.3打到当前分支最新提交的commit上，第二行将标签v1.2打到id为6a5819e的commit上。</p><p>命令git tag可以查看所有标签。git show <tagname>可以看到标签的说明文字。</p><p>删除一个本地标签：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> v0.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>向远程推送一个本地标签：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> &lt;tagname&gt;<br></code></pre></td></tr></table></figure><p>向远程推送全部未推送过的本地标签:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> --tags<br></code></pre></td></tr></table></figure><p>删除一个远程标签：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git push origin <span class="hljs-symbol">:refs/tags/&lt;tagname&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manacher遍历</title>
    <link href="/2021/02/15/Manacher%E7%AE%97%E6%B3%95/"/>
    <url>/2021/02/15/Manacher%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h1><h2 id="算法目的"><a href="#算法目的" class="headerlink" title="算法目的"></a>算法目的</h2><p>一个字符串中找到最长回文子串</p><h2 id="暴力方法（中心扩展法）"><a href="#暴力方法（中心扩展法）" class="headerlink" title="暴力方法（中心扩展法）"></a>暴力方法（中心扩展法）</h2><p>假设字符串的长度为N，那么回文串可能的中心有2N-1种。其中，每个单字符串都可作为回文串的中心，这种情况有N种。其次，双字符串也可作为回文串的中心，这种情况有N-1种。单字符中心负责扩展成长度为奇数的字符串，双字符串中心可以扩展成长度为偶数的字符串。例如：</p><ul><li><p>字符串“aba”有5种可能的中心：a、b、c、ab、ba  </p></li><li><p>字符串“abba”有7种可能的中心：a、b、b、a、ab、bb、ba</p><p>中心扩展法的基本思想为：对于每一个中心都计算一次以其为中心的最长回文串长度</p></li></ul><p>具体算法：对于每一个可能的回文中心，都尽可能地扩展它对应的回文区间[left, right]，直到left=N或者S[left]不等于S[right]为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = s.length();<br>    String res = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">int</span> left = i / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> right = left + i % <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; len &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;<br>            String tmp = s.substring(left, right + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (tmp.length() &gt; res.length()) &#123;<br>                res = tmp;<br>            &#125;<br>            left--;<br>            right++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li></ul><h2 id="Manacher算法-1"><a href="#Manacher算法-1" class="headerlink" title="Manacher算法"></a>Manacher算法</h2><p>一些概念：</p><ul><li>回文半径数组：记录以每一个位置为中心的回文半径的长度</li><li>最右回文右边界：所有位置对应的回文半径中最靠右的位置</li><li>回文右边界的中心：得到最右回文右边界的回文半径的回文中心是哪里（由哪个中心向右扩展得到最右回文右边界）</li></ul><p>在回文右边界和回文左边界中的字符串是回文串。假设最右回文右边界R的中心是c，当前位置i关于c在其左边的对称位置为i’。</p><p><img src="/img/Manacher.jpg"></p><p>算法步骤：<br>分析四种情况</p><ol><li>i在R外，用暴力法扩展。</li><li>i在R里，i’的回文半径整体彻底在L（回文左边界）和R的内部，那么以i为中心的回文半径等于以i’为中心的回文半径</li><li>i在R里，i’的回文半径在L和R的外面，那么以i为中心的回文半径等于i到R的距离</li><li>i在R里，i’的回文左边界和L压线，那么要将i’的回文半径继续向外扩展（i到R的区域肯定在i的回文半径里，不需扩展。R右边是否在i的回文半径里还不清楚，需要扩展才知道)</li></ol><p>上面四种情况中，需要扩展的只有情况1和情况4，对于情况2和情况3，以i为中心的回文半径可以用O(1)的时间开销直接得出。而情况1和情况4在扩展时，R不断向右扩。只要进行一次成功的扩展，R都必然会增加。也就是说R最多就是从0位置到n位置（n为字符串长度)且R不会回退，所以**<em>整个Manacher算法的时间复杂度为O(N)**</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//给定一个字符串，返回它的最长回文字串长度</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> || str.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//将字符串扩展为manacher字符串（每个字符中间和字符串前后加#)</span><br>    <span class="hljs-comment">//因为扩展后字符串长度翻倍，因此求扩展后的字符串的最大回文半径，即求原来字符串的最大回文直径</span><br>    <span class="hljs-keyword">char</span>[] charArr = manacherString(str);<br>    <span class="hljs-comment">//pArr为回文半径数组</span><br>    <span class="hljs-keyword">int</span>[] pArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[charArr.length];<br>    <span class="hljs-keyword">int</span> C = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> R = -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//max记录最长的回文半径长度</span><br>    <span class="hljs-keyword">int</span> max = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != charArr.length; i++) &#123;<br>        <span class="hljs-comment">//i在R里时：对于情况2和3，在i&#x27;的回文半径和i与R的距离中取较小值，即为i的回文半径</span><br>                 <span class="hljs-comment">//对于情况4，先将回文半径设为R-i，再在之后while循环中将回文半径继续向外扩展</span><br>        <span class="hljs-comment">//i在R外时，先将i位置的回文半径置为1，之后再在while循环里扩展</span><br>        pArr[i] = R &gt; i ? Math.min(pArr[<span class="hljs-number">2</span> * C - i], R - i) : <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//情况2和情况3即使进入了该while循环，但是第一次if都不会成立，会直接break退出循环</span><br>        <span class="hljs-comment">//只有情况1和情况4会在while循环里进行回文半径的扩展。</span><br>        <span class="hljs-keyword">while</span> (i + pArr[i] &lt; charArr.length &amp;&amp; i - pArr[i] &gt; -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (charArr[i + pArr[i]] == charArr[i - pArr[i]])<br>                pArr[i]++;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//更新最大回文右边界R和其对应的回文中心C</span><br>        <span class="hljs-keyword">if</span> (i + pArr[i] &gt; R) &#123;<br>            R = i + pArr[i];<br>            C = i;<br>        &#125;<br>        <span class="hljs-comment">//更新max</span><br>        max = Math.max(max, pArr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//生成manacher字符串，将给定字符串str的两端和每个字符中间全加上特殊符号#</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span>[] manacherString(String str) &#123;<br>    <span class="hljs-keyword">char</span>[] charArr = str.toCharArray();<br>    <span class="hljs-keyword">char</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[str.length() * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> C = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != res.length; i++) &#123;<br>        res[i] = (i &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;#&#x27;</span> : charArr[C++];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Morris遍历</title>
    <link href="/2021/02/15/Morris%E9%81%8D%E5%8E%86/"/>
    <url>/2021/02/15/Morris%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h1><p>经典的二叉树遍历，无论是递归还是非递归。其空间复杂度都是O(h),其中h为二叉树的高度。<br>而Morris遍历可以做到时间复杂度O(N), 空间复杂度O(1)</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>记当前来到的节点引用为cur</p><ul><li>如果cur没有左孩子，那么cur向右移动：cur = cur.right</li><li>如果cur有左孩子，那么找到它左子树上最右的节点，记为mostright<ul><li>如果mostright的右指针right指向空，那么让其指向cur，然后cur向左移动：cur = cur.left</li><li>如果mostright的右指针right指向cur, 那么让其指向空，然后cur向右移动：cur = cur.right</li></ul></li></ul><p>举例说明：</p><pre><code>给定二叉树：          1        /   \       2     3      / \   /  \     4   5 6    7Morris遍历流程：1. cur在1：首先cur指向根节点1，当前cur有左孩子，所以找到左子树的最右节点5，5的右指针right现在为空，所以让其指向cur（5的right指向1），然后cur向左移动来到22. cur在2：cur有左孩子，找到其左子树的最右节点4，4的right为空，于是让其指向cur（4的right指向2），然后cur向左移动来到43. cur在4：当前cur没有左孩子，因此向右移动，回到24. cur在2：当前cur左子树的最右节点为4，4的right现在指向cur，于是让它指回空，然后cur向右移动来到55. cur在5：当前cur没有左孩子，因此向右移动，回到16. cur在1：cur左子树的最右节点为5，5的right现在指向cur，于是让它指回空，然后cur向右移动来到37. cur在3：cur左子树的最右节点为6，6的right指向空，于是让它指向cur，然后cur向左移动来到68. cur在5：当前cur没有左孩子，因此向右移动，回到39. cur在3：cur左子树的最右节点为6，6的right指向cur，于是让它指向空，然后cur向右移动来到710. cur在7：当前cur没有左孩子，因此向右移动，发现来到的位置上是空，于是整个遍历结束。总结下来：cur分别经过了1 2 4 2 5 1 3 5 3 7</code></pre><h2 id="Morris遍历的本质"><a href="#Morris遍历的本质" class="headerlink" title="Morris遍历的本质"></a>Morris遍历的本质</h2><p>在经典递归版的遍历中，只要一个节点不空，遍历会来到这个节点三次：</p><ul><li>首先来到这个节点</li><li>遍历完它的左子树后再回到这个节点</li><li>遍历完它的右子树后再回到这个节点</li></ul><p>如果把对这个节点的操作放在第一次来到这个节点的时候，就是先序遍历。<br>如果把对这个节点的操作放在第二次来到这个节点的时候，就是中序遍历。<br>如果把对这个节点的操作放在第三次来到这个节点的时候，就是后序遍历。  </p><p>而在Morris遍历中：</p><ul><li>如果一个节点有左子树，那么Morris遍历会回到它两次。并且第二次回到这个节点时，其左子树上所有的节点一定都已经遍历完了。Morris遍历根据左子树最右节点mostRight的右指针right指向谁来判断是第几次来到当前这个节点（指向空则是第一次，指向cur节点本身则是第二次）。</li><li>如果一个节点没有左子树，那么Morris遍历只会回到它一次</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Morris遍历的先序和中序思想一致，只是对节点操作（以打印为例）的时机不一致。在第一次来到节点时操作为先序，在第二次来到节点时操作为中序。</p><p>Morris遍历的中序遍历代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">morrisIn</span><span class="hljs-params">(TreeNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    TreeNode cur = head;<br>    TreeNode mostRight = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-comment">//如果cur有左孩子</span><br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//首先找到cur的左子树的最右节点</span><br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-keyword">null</span>) &#123;<br>                mostRight.right = cur;<br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//若该节点有左子树，当把左子树处理完第二次回到这个节点时进行打印行为，即为中序遍历。</span><br>        <span class="hljs-comment">//如果该节点没有左子树，那么只会来到这个节点一次，在这时候打印即可。</span><br>        System.out.print(cur.val + <span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">//如果cur没有左孩子，cur直接向右移动</span><br>        cur = cur.right;<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>Morris遍历的先序遍历代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">morrisIn</span><span class="hljs-params">(TreeNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    TreeNode cur = head;<br>    TreeNode mostRight = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        mostRight = cur.left;<br>        <span class="hljs-comment">//如果cur有左孩子</span><br>        <span class="hljs-keyword">if</span> (mostRight != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//首先找到cur的左子树的最右节点</span><br>            <span class="hljs-keyword">while</span> (mostRight.right != <span class="hljs-keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;<br>                mostRight = mostRight.right;<br>            &#125;<br>            <span class="hljs-comment">//若一个节点有左子树，那么当mosRight的right为空时，为第一次到达这个节点的时候。</span><br><span class="hljs-comment">//在此时进行打印行为，即为先序遍历</span><br>            <span class="hljs-keyword">if</span> (mostRight.right == <span class="hljs-keyword">null</span>) &#123;<br>                mostRight.right = cur;<br>                System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>);<br>                cur = cur.left;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mostRight.right = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果一个节点没有左子树，那么只会来到这个节点一次，在这个时候打印即可。</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.print(cur.value + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果cur没有左孩子，cur直接向右移动</span><br>        cur = cur.right;<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2021/02/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>一句话描述：控制对其他对象的访问</strong></p><p>代理模式创建代理(Pxory)，让代理控制某对象的访问，被代理的对象可以是远程的对象、创建开销大的对象或需要安全控制的对象。</p><p><img src="/img/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.jpg"></p><p>RealSubject和Pxory都实现了Subject接口，因此Pxory可以在RealSubject出现的地方取代它。</p><p>代理模式有以下几个代表：</p><ul><li>远程代理：控制访问远程对象</li><li>虚拟代理：控制访问创建开销大的资源</li><li>保护代理：基于权限控制对资源的访问</li></ul><h2 id="远程代理："><a href="#远程代理：" class="headerlink" title="远程代理："></a>远程代理：</h2><p>如果我们要访问的对象在另一个JVM堆中（即在不同的地址空间中运行的远程对象），我们就没办法通过引用来得到这个对象。</p><pre><code>注：Subject a = XXX对于这种语句，a只能引用与当前代码语句所在同一个堆空间的对象。</code></pre><p>对于这种情况，远程代理就可以作为另一个JVM上对象的本地代表。调用代理的方法会被代理利用网络转发给远程执行，并且结果会通过网络返回给代理，再由代理将结果转给客户。</p><h2 id="保护代理"><a href="#保护代理" class="headerlink" title="保护代理"></a>保护代理</h2><p>保护代理根据访问权限决定客户是否可以访问对象。</p><p>例如：有一个雇员对象，保护代理允许一个雇员自己调用对象上的某些方法（如setName()),但不允许雇员自己调用类似于setSalary()的方法。<br>而保护代理允许经理调用setSalary()方法，但不允许经理调用setName()方法。<br><img src="/img/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%90%86.jpg"></p><h2 id="虚拟代理："><a href="#虚拟代理：" class="headerlink" title="虚拟代理："></a>虚拟代理：</h2><p>虚拟代理作为创建开销大的对象的代表。虚拟代理在我们真正需要使用一个对象时才创建这个对象。当对象在创建前和创建中时，由虚拟代理来扮演对象的替身。当对象创建后，代理就会将请求直接委托给对象。</p><p><img src="/img/%E8%99%9A%E6%8B%9F%E4%BB%A3%E7%90%86.jpg"></p><h3 id="以下为虚拟代理的实现："><a href="#以下为虚拟代理的实现：" class="headerlink" title="以下为虚拟代理的实现："></a>以下为虚拟代理的实现：</h3><p><strong>背景说明</strong>：当加载一张图片时，限于连接带宽和网络负载，加载可能需要一些时间，所以在等待图像加载的时候，应该显示一些东西。（同时也不希望在显示这些东西时整个应用被挂起）一旦图像被加载完成后，刚才显示的东西应该消失，图像显示出来。</p><p>先定义一个接口Image，代理和真正的图片对象都要实现Image接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Image</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showImage</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImagePxory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Image</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> RealImage realImage;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ImagePxory</span><span class="hljs-params">(RealImage realImage)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.realImage = realImage;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showImage</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//当realImage加载完成时，显示realImage</span><br>        <span class="hljs-comment">//否则显示:Image is loading, please wait</span><br>        <span class="hljs-keyword">while</span>(!realImage.isLoad())&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                System.out.println((<span class="hljs-string">&quot;Image is loading, please wait&quot;</span>));<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>                e.printStackTrace();;<br>            &#125;<br>        &#125;<br>        realImage.showImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>真实图片类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RealImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Image</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> URL imageURL;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> startTime;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RealImage</span><span class="hljs-params">(URL imageURL)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.imageURL = imageURL;<br>        <span class="hljs-keyword">this</span>.height = <span class="hljs-number">500</span>;<br>        <span class="hljs-keyword">this</span>.height = <span class="hljs-number">500</span>;<br>        <span class="hljs-keyword">this</span>.startTime = System.currentTimeMillis();<br>    &#125;<br>    <span class="hljs-comment">//模拟图片加载过程，假定图片加载需要三秒</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLoad</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">return</span> endTime - startTime &gt; <span class="hljs-number">3000</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showImage</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(imageURL);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    String image = <span class="hljs-string">&quot;http://image.jpg&quot;</span>;<br>    URL url = <span class="hljs-keyword">new</span> URL(image);<br>    RealImage realImage = <span class="hljs-keyword">new</span> RealImage(url);<br>    ImagePxory imagePxory = <span class="hljs-keyword">new</span> ImagePxory(realImage);<br>    imagePxory.showImage();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>弗里曼. Head First 设计模式 [M]. 中国电力出版社, 2007.</li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">CyC2018: CS-Notes:设计模式</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传输层</title>
    <link href="/2021/02/15/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <url>/2021/02/15/%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p><p>传输层包括以下两个协议：</p><ul><li><strong><em>TCP（Transmission Control Protocol）</em></strong>:TCP是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</li><li><strong><em>UDP（User Datagram Protocol）</em></strong>:UDP是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li></ul><h2 id="2-UDP"><a href="#2-UDP" class="headerlink" title="2. UDP"></a>2. UDP</h2><p>UDP从应用程序进程的得到数据，附加上用于多路复用/分解复用的源和目的端口号字段，以及两个其他的小字段，然后将形成的报文段交给网络层。</p><p>注意：使用UDP时，在发送报文段之前，发送方和接收方的传输层实体之间没有握手，因此UDP被称为是无连接的（DNS协议就是基于UDP的）</p><p>使用UDP的几个好处：</p><ul><li>因为实时应用通常要求最小的发送速率，不希望过分延迟报文段的传送，且能容忍一些数据丢失，这种情况用TCP就不太合适。</li><li>无需连接建立：UDP无需任何准备即可进行数据传输。因此，UDP不会引入建立连接的时延，这也是DNS使用UDP的原因。</li><li>无连接状态：TCP不仅要在端系统中维护连接状态，而且还要跟踪包括接收和发送缓存、拥塞控制参数以及序号与端口号的参数。而UDP不维护连接状态，也不跟踪这些参数。因此某些专门用于某种特定应用的服务器当应用程序运行在UDP之上时，一般都能支持更多的活跃用户。</li><li>分组首部开销小：UDP首部只有8字节的首部开销。而TCP首部则有20字节的首部开销。</li></ul><p><img src="/img/%E5%9B%BE%E7%89%873.1.jpg"></p><p>用UDP进行可靠数据传输的方法：<br>在应用程序自身中建立可靠性机制。这样的话，应用程序进程一方面可以进行可靠通信，另一方面也而无需受制由于TCP的拥塞控制带来的传输速率的限制。</p><p>TCP首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和（每个占2字节）。其中，长度指整个UDP报文段所占的字节数（首部+数据）</p><p><img src="/img/%E5%9B%BE%E7%89%873.2.jpg"> </p><p>注意：尽管UDP提供了差错检测，但它并没有提供恢复错误的机制。</p><h2 id="3-TCP"><a href="#3-TCP" class="headerlink" title="3. TCP"></a>3. TCP</h2><p>TCP被称为是面向连接的，这是因为在两个进程互相发送数据之前，两个进程必须先相互握手。</p><h3 id="3-1-TCP报文段格式"><a href="#3-1-TCP报文段格式" class="headerlink" title="3.1 TCP报文段格式"></a>3.1 TCP报文段格式</h3><p><img src="/img/%E5%9B%BE%E7%89%873.3.jpg"></p><ul><li>序号(Sequence number)：一个报文段的序号是这个报文段的data字段的第一个字节的序号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li><li>确认号(Acknowledgement number)：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li><li>确认 ACK ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li><li>同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li><li>终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li><li>窗口(Receive window)：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li></ul><h3 id="3-2-TCP的流量控制-Flow-Control"><a href="#3-2-TCP的流量控制-Flow-Control" class="headerlink" title="3.2 TCP的流量控制(Flow Control)"></a>3.2 TCP的流量控制(Flow Control)</h3><p>TCP为应用进程提供了流量控制服务，以消除发送方使接收方缓存溢出的可能性。流量控制服务是一个速度匹配服务，即让发送方发送的速率与接收方应用进程的读取速率相匹配，保证接收方来得及接收。而TCP发送方也可能因为IP网络的拥塞而被遏制，因为这种情况而对发送方的控制则是拥塞控制。</p><p><img src="/img/%E5%9B%BE%E7%89%873.4.jpg"></p><p>TCP通过让发送方维护一个称为接收窗口(receive window)的变量来提供流量控制，这个接收窗口用于告知发送方：该接收方还有多少可用的缓存空间。</p><p>由于TCP不允许已分配的缓存溢出，所以下式必须成立（不等式左边代表仍处在缓存中的数据量）：  </p><center>LastByteRcvd - LastByteRead <= RcvBuffer</center><p>接收窗口用rwnd表示，根据缓存空间的可用大小来设置：</p><center>rwnd = RcvBuffer - (LastByteRcvd - LastByteRead)</center><p>由于该空间是随着时间变化的，所以rwnd是不断滑动的。</p><p>连接通过rwnd来提供流量控制的方式：主机B通过把当前的rwnd值放入它发给主机A的报文段接收窗口字段(reveive window)中，通知主机A它在该连接的缓存中还有多少可用空间。</p><p>而主机A也不断跟踪两个变量，LastByteSent和LastByteAcked,二者的差即是主机A发送到连接中但未被确认的数据量，通过将这个量控制在rwnd内，就可以保证主机A不会使主机B的缓存溢出。因此主机A必须始终保证：  </p><center>LastByteSent - LastByteAcked <= rwnd</center><p>注意：因为TCP仅当在它有数据或有ACK要发时才会发送报文段给A。因此当B的rwnd为0并且通知给A后，B不再向A发送带有rwnd的新报文段，即使之后B中rwnd不为0了，A也不会知道。所以TCP规范中要求：当主机B的接收窗口为0时，主机A继续发送只有一个字节数据的报文段，这样B就能不断地回复A以ACK报文段，并向A通知rwnd状态。</p><h3 id="3-3-TCP的三次握手"><a href="#3-3-TCP的三次握手" class="headerlink" title="3.3 TCP的三次握手"></a>3.3 TCP的三次握手</h3><p>TCP的三次握手发生在连接建立时<br><img src="/img/%E5%9B%BE%E7%89%873.5.jpg"></p><p>假设 A 为客户端，B 为服务器端。  </p><ul><li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li><li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li><li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。并且SYN被置0.</li><li>B 收到 A 的确认后，连接建立。在以后的报文段中，由于连接已建立，SYN都将是0.</li></ul><p><strong><em>三次握手的原因</em></strong><br>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h3 id="3-4-TCP的四次握手"><a href="#3-4-TCP的四次握手" class="headerlink" title="3.4 TCP的四次握手"></a>3.4 TCP的四次握手</h3><p>TCP的三次握手发生在连接释放时</p><ul><li>A 发送连接释放报文，FIN=1。</li><li>B 收到之后发出确认报文段，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文，FIN=1。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ul><p><img src="/img/%E5%9B%BE%E7%89%873.6.jpg"></p><p><strong><em>四次挥手的原因</em></strong><br>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong><em>TIME_WAIT</em></strong><br>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><p>TIME_WAIT结束之后，连接就正式关闭，客户端所有资源将被释放。</p><h3 id="3-5-TCP拥塞控制"><a href="#3-5-TCP拥塞控制" class="headerlink" title="3.5 TCP拥塞控制"></a>3.5 TCP拥塞控制</h3><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><p><strong><em>TCP如何限制发送速率</em></strong><br>运行在发送方的TCP拥塞控制机制跟踪一个称为拥塞窗口的变量，记为cwnd。它对一个TCP发送方能像网络中发送流量的速率进行限制。即，在一个发送方中未被确认的数据量不会超过cwnd和rwnd中的最小值，即：</p><center>LastByteSent - LastByteAcked <= min{cwnd, rwnd}</center>以上约束限制了发送方中未被确认的数据量，因此间接地限制了发送方的发送速率。<p><strong><em>TCP如何察觉拥塞</em></strong><br>当出现过度的拥塞时，在沿着这条路径上的一台或多台路由器的缓存会溢出，引起一个数据报被丢弃，丢弃的数据报接着会引起发送方的丢包事件（要么超时要么收到3个冗余ACK），发送方就认为在发送方到达接收方的路径上出现了拥塞。</p><p>TCP通过慢启动、拥塞避免和快速恢复这三个部分来实现拥塞控制。</p><p><img src="/img/%E5%9B%BE%E7%89%873.7.jpg"></p><ul><li>慢启动：发送的最初执行慢启动，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</li><li>拥塞避免：注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</li><li>快速恢复：当丢包事件发生时，cwnd的值被设置成1个MSS，并且ssthresh的值设置为cwnd的一半，然后重新执行慢启动。</li></ul><p>上/img/图片中传输轮次1-4为慢启动过程，5-8为拥塞避免过程，之后为快速恢复过程。</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2021/02/15/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/15/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单例模式确保一个类只有一个实例，并提供一个全局访问点</p><p>通常使用一个私有构造器、一个静态函数、一个私有静态变量来实现。</p><ul><li>为了保证类只有一个实例，所以就不能用new关键字和构造器来创建对象实例，因此需要将构造器声明为私有的，只有在类的内部才能调用构造器。</li><li>与此同时，需要一个私有静态变量来记录这个唯一的对象实例</li><li>还需要一个私有静态函数来返回这个唯一的私有静态变量。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-懒汉模式与饿汉模式"><a href="#1-懒汉模式与饿汉模式" class="headerlink" title="1.懒汉模式与饿汉模式"></a>1.懒汉模式与饿汉模式</h3><p>以下为单例模式中的懒汉模式代码。它的特点是：uniqueInstance被延迟实例化(lazy instantiaze)，也就是说如果我们不需要这个实例（不适用getUniqueInstance()函数），那么它就永远不会产生。可以节约资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-comment">//私有静态变量：记录这个唯一的实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br>    <span class="hljs-comment">//私有构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//私有静态函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getUniqueInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>) &#123;<br>            uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但以上实现并非线程安全的。考虑线程A和线程B同时调用Singleton.getUniqueInstance(),进入以下的if语句:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-keyword">null</span>)<br></code></pre></td></tr></table></figure><p>此时实例并未被创建，所以A和B都通过了if判断，接下来A使用私有构造器构造了一个对象1。但B因为之前已通过了if判断，所以它也会构造一个对象2。如此一来就会多次实例化，在多线程的情况下无法保证只有一个实例对象。</p><hr><p>但如果我们在类初始化时就创建单例的话，就可以保证线程安全。以下为单例模式中的饿汉模式代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用这个做法，JVM在加载这个类时马上创建此唯一的单件实例。JVM保证在任何线程访问uniqueInstance静态变量之前，一定先创建此实例。</p><h3 id="2-双重校验锁："><a href="#2-双重校验锁：" class="headerlink" title="2.双重校验锁："></a>2.双重校验锁：</h3><p>首先检查实例uniqueInstance是否已经创建了，如果尚未创建，才对实例化语句进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-comment">//volatile关键字确保当uniqueInstacne被实例化时，多个线程能正确地处理uniqueInstacne变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstacne;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getIntance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(uniqueInstance == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span>(Singleton.class)&#123;  <span class="hljs-comment">//同步锁</span><br>                <span class="hljs-keyword">if</span>(uniqueInstance == <span class="hljs-keyword">null</span>)&#123;<br>                    uniqueInstance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>双重校验锁使用两个if语句来保证线程安全：</p><ul><li>第一个if语句保证了只有在第一次调用getIntance()方法的时候才进行加锁操作，之后直接return已被构造的单例即可，无需加锁。</li><li>第二个if语句避免了重复实例化对象。例如：两个线程同时进入synchronized临界区，若没有这步if判断，当线程A构建完对象，B由于已经通过了第一个if语句，不知道A已经构造好了对象，于是它也会再构造另一个对象。</li></ul><p><strong>对单例uniqueInstacne使用volatile关键字的原因</strong> ：<br>在Java中这样一句uniqueInstance = new Singleton()，会被JVM编译成如下指令：</p><ol><li><p>给uniqueInstance分配内存空间</p></li><li><p>初始化该内存空间的对象</p></li><li><p>将uniqueInstance指向已分配的内存地址</p><p>但这几步顺序也有可能经过JVM和CPU的优化，被重排成1、3、2的顺序。在多线程的情况下：当线程A完成指令1、3后，对象还未被初始化但是uniqueInstance已经不指向null。这时如果线程B走到了第一步if判断，会发现uniqueInstance不为null，于是直接return uniqueInstance，但这时单例还未被初始化。从而会返回一个尚未初始化完成的对象。</p></li></ol><p>使用volatile可以避免JVM的指令重排，如此一来将始终保证1、2、3的顺序。所以uniqueInstacne要么指向null，要么指向一个已初始化的对象，不会出现中间状态，保证了线程安全。</p><h3 id="3-静态内部类实现"><a href="#3-静态内部类实现" class="headerlink" title="3.静态内部类实现"></a>3.静态内部类实现</h3><p>从外部无法访问静态内部类LazyHolder，当调用Singleton.getInstance()方法时，才能得到单例对象INSTANCE。</p><p>当加载类Singleton时，类LazyHolder并没有被加载，因此单例INSTANCE并未被初始化。当调用Singleton.getInstance()方法时，内部类LazyHolder才被加载，INSTANCE才被实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyHolder</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> LazyHolder.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Eric Freeman. Head First 设计模式 [M]. 中国电力出版社, 2007.</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192251&idx=2&sn=4acce2985ab4fcc908235891c9213628&chksm=8c99f2e1bbee7bf7f64132bb58d3023f79b3c11fe2043dcd29fe07f4ddb5b3c7d375252d8555&mpshare=1&scene=1&srcid=10145YhZbl4txuQIh5xlFBqA&sharer_sharetime=1602674938022&sharer_shareid=63ec0aac0cd5411bee34cfcffcb8dd13&key=39efdee81dad78454480c9b361da08ead78bf35d989c6aaa0d4edc8e92fa7b9ce91a527f838f4b0a7d81f2828cee6ace059f058b1394c2b39c5ef15f877901053d8f24be422fb2ca4c912f2ade0b016cff8a88b43e2bd8dbd0db14269a57cf17c1ee40c4b58e63e3602182361d2442145db6c25d6eb6463c1042ac218a37da4e&ascene=1&uin=MjMwMzI4OTM4MA==&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=AZ9HDfnHe+jxOhY62YWHjFM=&pass_ticket=MWeci50fAmUpNH9xi84lqGhymZw0Eks6tmCWWalvvtE8ydesOK9/2HCdSS9Ucqzv&wx_header=0">漫画：什么是单例模式？</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%20-%20%E5%8D%95%E4%BE%8B.md">Cyc2018:设计模式-单例</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务</title>
    <link href="/2021/02/15/%E4%BA%8B%E5%8A%A1/"/>
    <url>/2021/02/15/%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h1><h2 id="事物的概念"><a href="#事物的概念" class="headerlink" title="事物的概念"></a>事物的概念</h2><p>事物是访问并更新数据库中数据项的一组操作，它们要么都执行，要么都不执行。</p><p>可以通过commit提交一个事物，也可以通过rollback来进行回滚</p><p>MySQL默认采用自动提交模式。也就是说，如果不显式使用START TRANSACTION语句来开始一个事务，那么每执行一个SQL语句后就会马上执行COMMIT操作。</p><h2 id="事物的四大特性ACID"><a href="#事物的四大特性ACID" class="headerlink" title="事物的四大特性ACID"></a>事物的四大特性ACID</h2><ul><li>原子性(Atomicity)：是指数据库事物是不可分割的最小工作单位，只有事物中的所有操作成功，事物才能进行提交。事物中有任何一个SQL语句执行失败，已经执行成功的SQL语句也必须撤销，数据库状态应该回滚到执行事务之前的状态。</li><li>一致性(Consistency):在事物执行前后，数据库能从一个正确的状态转移到另一个正确的状态。依靠隔离性和原子性实现。</li><li>隔离性(Isolation)：一个事物在提交前对其他事物是不可见的。即在并发访问数据库时，各并发事物之间数据库是独立的。</li><li>持久性(Durability)：事物一旦提交，其所做的修改会永远保存到数据库中，即使系统崩溃，数据库也能通过重做日志(Redo log)将数据恢复。</li></ul><h2 id="事物的实现："><a href="#事物的实现：" class="headerlink" title="事物的实现："></a>事物的实现：</h2><ul><li>用锁来保证事物的一致性</li><li>redo log用来保证事物的原子性和持久性</li><li>undo log用来保证事物的一致性</li></ul><p>其中，redo恢复提交事务修改的页操作，而undo回滚行记录到某一个特定的版本。</p><p>当事物提交(commit)时,必须先将该事务的所有日志写入到重做日志文件(Redo log)中进行持久化。</p><p>在对数据库进行修改时，InnoDB存储引擎不但会产生redo，还会产生一定量的undo。如果用户执行的事物或语句由于某种原因失败了，又或者用户用一条RollBack语句请求回滚，可以利用这些undo信息将数据回滚到修改前的样子。</p><p>保存点(Savepoint)用来通知系统应该记住事物当前的状态，以便之后发生错误时，事物能回到保存点当时的状态。注意：rollback to savepoint命令并不真正的结束事物。</p><h2 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h2><p>SQL标准定义了以下四种隔离级别：</p><ul><li>READ UNCOMMITTED（读取未提交）:最低的隔离级别，一个事务所做的修改，即使尚未提交，对其他事务也是可见的。<strong>会导致脏读、幻读或不可重复读</strong></li><li>READ COMMITTED（读取已提交）：一个事务所做的修改在提交之前对其他事务是不可见的。<strong>可以避免脏读，但不能避免幻读或不可重复读</strong></li><li>REPEATABLE READ（可重复读）：保证在同一个事务中多次读取同一数据的结果是一样的，除非该数据被这个事务自己所修改。为InnoDB默认的隔离级别。<strong>可以避免脏读和不可重复读，但不能避免幻读</strong></li><li>SERIALIZABLE（可串行化）：最高的隔离级别，强制事务串行执行，这样多个事务间就不会产生干扰，也就不会出现并发不一致问题（需要加锁实现）。<strong>可以避免脏读、不可重复读和幻读</strong>。</li></ul><p>隔离级别越低，事务请求的锁越少或保持锁的时间越短。</p><p>虽然InnoDB存储引擎在默认的隔离级别为REPEATABLE READ（可重读）但其在该事务隔离级别下使用的是Next-Key Lock锁算法，因此可以避免幻读的产生，这与其他数据库系统是不同的。所以说InnoDB存储引擎的在默认的隔离级别下已经能完全保证事务的隔离性要求，即达到了SQL标准的SERIALIZABLE(可串行化) 隔离级别。因此，InnoDB 存储引擎默认使用 REPEAaTABLE-READ（可重读） 并不会有任何性能损失。</p><p>此外，在使用分布式事务时，InnoDB存储引擎的事务隔离级别必须设置为SERIALIZABLE(可串行化)</p><p><img src="/img/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.jpg"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 第2版[M]. 机械工业出版社, 2013.</li><li><a href="https://blog.csdn.net/qq_34337272/article/details/80611486">MySQL锁机制</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md">Cyc2018:数据库系统原理</a></li><li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL.md#%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%8Einnodb%E9%94%81%E7%AE%97%E6%B3%95">JavaGuide；MySQL</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2021/02/15/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/15/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式分为三种，分别为：</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><p>接下来以pizza店的例子阐述三种模式</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><strong>一句话描述：简单工厂模式将对象的创建封装了起来</strong></p><p>通过工厂类创建对象，并且根据传入参数决定具体要实例化哪种子类对象的做法，叫简单工厂模式(Simpe Factory Pattern)<br>以下代码描述了产品类，包括一个抽象接口和两个具体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Pizza类为接口，description方法由具体的pizza类实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Pizza</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//有两种pizza类实现了上面的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheesePizza</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Pizza</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">description</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am cheesepizza&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VeggiePizza</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Pizza</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">description</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am veggiePizza&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们构建一个pizza工厂专门负责构造pizza对象。从而把本应在PizzaStore中构造并初始化pizza对象的代码迁移到pizza工厂类的创建方法createPizza中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//pizza工厂类。这个类只做一件事：帮客户创建pizza</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimplePizzaFactory</span></span>&#123;<br>    <span class="hljs-comment">//在创建方法中传入参数type，根据参数来判断要创建哪种pizza对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">createPizza</span><span class="hljs-params">(String type)</span></span>&#123;<br>        Pizza pizza = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;cheese&quot;</span>))<br>            pizza = <span class="hljs-keyword">new</span> CheesePizza();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;veggie&quot;</span>))<br>            pizza = <span class="hljs-keyword">new</span> VeggiePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，在客户端（也就是PizzaStore类）中，想要创建哪种对象，只需传入对应的名称即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PizzaStore</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">orderPizza</span><span class="hljs-params">(String type)</span></span>&#123;<br>        <span class="hljs-comment">//先创建一个工厂对象factory</span><br>        SimplePizzaFactory factory = <span class="hljs-keyword">new</span> SimplePizzaFactory();<br>        <span class="hljs-comment">//再利用工厂factory创建与type相对应的工厂对象</span><br>        Pizza pizza = factory.createPizza(type);<br>        pizza.cook();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>    <span class="hljs-comment">//其他方法（均可以调用createPizza方法创建pizza对象）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过简单工厂模式，我们可以把客户类和具体子类的实例化解耦，客户端不再需要用众多if else语句根据type判断自己应该实例化哪个子类。现在客户端只需要用将type传入工厂类中的创建方法，即可在在这个方法的返回值中得到想要的对象。</p><p>这样做有什么好处呢？   </p><blockquote><p>设想如果未使用简单工厂模式，在客户端用if else判断并实例化产品对象。当我们有多个客户端的时候，这些客户端就都需要知道产品的细节（即有哪些产品以及需要构建哪种产品对象）。而且如果我们多增加一项产品，那么这么多客户端都需要进行修改（再增加一条if else语句）</p></blockquote><p>简单工厂模式的缺陷：  </p><blockquote><p>即使使用了简单工厂模式，当我们多增加一项产品时，还是要在工厂类的构建方法中增加一条if else语句。这样就不符合”对扩展开放，对修改封闭”的OO原则。</p></blockquote><p>因此就引入了工厂方法模式，我们将在这个模式中解决以上缺陷带来的问题。</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>一句话描述：每一个产品子类都有一个对应的工厂子类</strong></p><p>在工厂方法模式中，我们为每一个Pizza子类创建对应的工厂子类，工厂方法模式将构建产品的细节封装进具体的工厂子类中。注意：</p><ul><li>每一个Pizza子类都实现Pizza接口</li><li>每一个工厂子类都实现工厂接口</li></ul><p>因此，我们可以使用某一种具体工厂子类创建其对应的Pizza对象。当新增一种pizza时，我们构建一种和它对应的新工厂子类，就可以构造这种pizza对象。而不用在工厂类中修改代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象的工厂接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PizzaFactory</span></span>&#123;<br>    <span class="hljs-function">Pizza <span class="hljs-title">createPizza</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//以下为两种工厂子类:CheesePizza工厂和VeggiePizza工厂</span><br><span class="hljs-comment">//它们分别实现了工厂接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheesePizzaFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PizzaFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">createPizza</span><span class="hljs-params">()</span></span>&#123;<br>        Pizza pizza = <span class="hljs-keyword">new</span> CheesePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VeggiePizzaFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PizzaFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">createPizza</span><span class="hljs-params">()</span></span>&#123;<br>        Pizza pizza = <span class="hljs-keyword">new</span> VeggiePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于客户端PizzaStore，想得到哪种Pizza对象，只需要构造与其对应的工厂子类对象，并使用其创建方法即可。连简单工厂模式中的传入type参数这一步都免了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PizzaStore</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">orderPizza</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//先创建一个cheese披萨工厂</span><br>        PizzaFactory cheesefactory = <span class="hljs-keyword">new</span> CheesePizzaFactory();<br>        <span class="hljs-comment">//再利用这个工厂创建我们想要的cheese披萨</span><br>        Pizza pizza = cheesefactory.createPizza();<br>        pizza.cook();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>    <span class="hljs-comment">//其他方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg"></p><p>工厂方法模式的缺陷：  </p><blockquote><p>如果我们的产品子类越来越多，那么我们就要为每一个产品子类都创建一个工厂子类，这样类就会越来越多，非常繁琐。</p></blockquote><p>为了解决这个问题，以下引入抽象工厂模式</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>一句话描述：把产品分组，每组配备一个工厂，组内不同产品对应于这个工厂中的不同方法</strong></p><p>在抽象工厂模式中，我们不为每一个产品子类配备一个工厂子类。而是将产品进行分组，每组组内的不同产品由同一个工厂类的不同方法创建。</p><p>假设我们当前有四种pizza产品，分别为：</p><ul><li>大份cheese披萨</li><li>小份cheese披萨</li><li>大份蔬菜披萨</li><li>小份蔬菜披萨</li></ul><p>工厂方法模式的做法是：为这四种产品类都配备一个对应的具体工厂子类。</p><p>而对于抽象工厂模式，我们将产品分为两组：大份组和小份组。每组配备一个工厂。</p><p>以下为产品类：包括cheese披萨和蔬菜披萨两种抽象接口，每种接口分别由大份和小份两个具体类实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">cheesePizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigcheesePizza</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">cheesePizza</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cook a BigcheesePizza&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmallcheesePizza</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">cheesePizza</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cook a SmallcheesePizza&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">veggiePizza</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pizza</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigveggiePizza</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">veggiePizza</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cook a BigveggiePizza&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmallveggiePizza</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">veggiePizza</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cook</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cook a SmallveggiePizza&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是工厂类，先定义一个抽象的工厂接口。由于产品有两种（大份披萨和小份披萨），因此我们实现两种工厂类BigFactory和SmallFactory，分别用来构建大披萨对象和小披萨对象。</p><p>此外，每个工厂对应产品分类中的所有产品，工厂类都有一个与其对应的构建方法。例如：我们想得到一个大份cheese披萨对象，那么只需要使用大份pizza工厂中的createCheesePizza()方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Factory</span></span>&#123;<br>    <span class="hljs-function">cheesePizza <span class="hljs-title">createCheesePizza</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">veggiePizza <span class="hljs-title">createVeggiePizza</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//大份披萨工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> cheesePizza <span class="hljs-title">createCheesePizza</span><span class="hljs-params">()</span></span>&#123;<br>        cheesePizza pizza = <span class="hljs-keyword">new</span> BigcheesePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> veggiePizza <span class="hljs-title">createVeggiePizza</span><span class="hljs-params">()</span></span>&#123;<br>        veggiePizza pizza = <span class="hljs-keyword">new</span> BigveggiePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//小份披萨工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmallFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> cheesePizza <span class="hljs-title">createCheesePizza</span><span class="hljs-params">()</span></span>&#123;<br>        cheesePizza pizza = <span class="hljs-keyword">new</span> SmallcheesePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> veggiePizza <span class="hljs-title">createVeggiePizza</span><span class="hljs-params">()</span></span>&#123;<br>        veggiePizza pizza = <span class="hljs-keyword">new</span> SmallveggiePizza();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是客户端代码，通过使用不同的工厂，并调用该工厂中不同的创建方法，我们就可以创造出不同的产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PizzaStore1</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pizza <span class="hljs-title">orderPizza</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//先创建一个大份披萨工厂</span><br>        Factory1 BigFactory = <span class="hljs-keyword">new</span> BigFactory();<br>        <span class="hljs-comment">//再利用这个工厂中的相应方法创建我们想要的cheese披萨</span><br>        Pizza pizza = BigFactory.createCheesePizza();<br>        pizza.cook();<br>        <span class="hljs-keyword">return</span> pizza;<br>    &#125;<br>    <span class="hljs-comment">//其他方法</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储管理</title>
    <link href="/2021/02/15/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <url>/2021/02/15/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h1><h2 id="1-地址空间"><a href="#1-地址空间" class="headerlink" title="1.地址空间"></a>1.地址空间</h2><p>就像进程的概念创造了一类抽象的CPU以运行程序一样，地址空间为程序创造了一种抽象的内存。地址空间是一个进程可用于寻址内存的一套地址集合。每个进程都有一个自己的地址空间，并且这个地址空间独立于其他进程的地址空间。</p><p>即要做到的是：给每个程序一个自己的地址空间，使得一个程序中的地址28所对应的物理地址与另一个程序中的地址28所对应的物理地址不同。</p><p>一种为每个进程提供私有地址空间的简单方式是：使用两个寄存器，程序的起始物理地址装载到<strong>基址寄存器</strong>中，程序的长度装载到<strong>界限寄存器</strong>中。每个内存地址在送到内存之前，都会自动先加上基址寄存器的内容。</p><hr><p>如果把所有进程一直保存在内存中需要巨大的内存，如果内存不够，就做不到这一点。处理这种内存超载问题有以下两种方式</p><ul><li>交换技术<br>把一个进程完整地调入内存，使该进程运行一段时间，然后把它存回磁盘。空闲进程主要在磁盘上，所以当它们不运行时就不会占用内存。但是受限于磁盘传输速率限制，将进程从磁盘调出和换入通常需要不短的时间。</li><li>虚拟内存（使得程序在只有一部分被调入内存的情况下运行）</li></ul><h2 id="2-虚拟内存"><a href="#2-虚拟内存" class="headerlink" title="2.虚拟内存"></a>2.虚拟内存</h2><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p><p>虚拟内存的基本思想是：每个程序都有自己的地址空间，这个空间被分割成多个块，每个块称作一个页面(page)。每一页有自己连续的地址范围，这些页被映射到物理内存，但并不是所有的页都必须在内存中才能运行程序。当程序引用到一部分在物理内存中的页时，由硬件执行必要的映射。当程序引用到不在物理内存中的页时，操作系统负责将缺失的部分装入物理内存并重新执行失败的指令。、</p><p>从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K，这些地址是虚拟地址。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。</p><p>注意：在使用虚拟内存的情况下，虚拟地址不是直接被送到内存总线上，而是被送到内存管理单元（MMU），MMU把虚拟地址映射成为物理内存地址。</p><p><img src="/img/%E5%9B%BE3.1.jpg" alt="avatar"></p><p>虚拟地址空间按照固定大小划分成称为页面(page)的若干单元。在物理内存中对应的单元成为页框(page frame)</p><p>如果程序访问到一个未映射的页面，内存管理单元MMU法线该页没有被映射（/img/图中用X表示），于是使CPU陷入到操作系统，这里称为**<em>缺页中断**</em> (page fault)。操作系统找到一个很少使用的页框且把它的内容写入磁盘，然后把需要访问的页面读到刚才回收的页框中，修改映射关系，然后重新启动引起陷阱的指令。</p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>页表的目的是把虚拟页面映射为相应的页框。每个进程需要自己的页表（因为它有自己的虚拟地址空间）</p><p>虚拟内存的本质上是用来创造一个新的抽象概念——地址空间。这个概念是对物理内存的抽象，类似于进程是对物理机器(CPU)的抽象。虚拟内存的实现，是将虚拟地址空间分解成页，并将每一页映射到物理内存的某一页。</p><h2 id="3-页面置换算法"><a href="#3-页面置换算法" class="headerlink" title="3.页面置换算法"></a>3.页面置换算法</h2><p>在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。</p><p>页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。</p><h3 id="1-最优页面置换算法"><a href="#1-最优页面置换算法" class="headerlink" title="1. 最优页面置换算法"></a>1. 最优页面置换算法</h3><blockquote><p>OPT, Optimal replacement algorithm</p></blockquote><p>所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。<br>此算法是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。</p><p>举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1<br></code></pre></td></tr></table></figure><p>开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。</p><h3 id="2-最近最久未使用页面置换算法"><a href="#2-最近最久未使用页面置换算法" class="headerlink" title="2. 最近最久未使用页面置换算法"></a>2. 最近最久未使用页面置换算法</h3><blockquote><p>LRU, Least Recently Used</p></blockquote><p>虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。</p><p>为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。</p><p>因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。</p><h3 id="3-先进先出"><a href="#3-先进先出" class="headerlink" title="3. 先进先出"></a>3. 先进先出</h3><blockquote><p>FIFO, First In First Out</p></blockquote><p>选择换出的页面是最先进入的页面。<br>该算法会将那些经常被访问的页面换出，导致缺页率升高。</p><h3 id="4-第二次机会算法"><a href="#4-第二次机会算法" class="headerlink" title="4. 第二次机会算法"></a>4. 第二次机会算法</h3><p>FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改：</p><p>当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。</p><h3 id="6-时钟"><a href="#6-时钟" class="headerlink" title="6. 时钟"></a>6. 时钟</h3><blockquote><p>Clock</p></blockquote><p>第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面连接起来，再使用一个指针指向最老的页面。</p><h3 id="7-工作集页面置换算法"><a href="#7-工作集页面置换算法" class="headerlink" title="7.工作集页面置换算法"></a>7.工作集页面置换算法</h3><p>一个进程正在使用的页面的集合称为它的工作集（working set）。如果整个工作集都被装入到了内存中，那么进程在运行到下一个阶段之前，不会产生很多缺页中断。若内存太小而无法容纳下整个工作集，那么进程的运行过程中会产生大量的缺页中断，导致运行速度也会变得很缓慢。若每执行几条指令程序就发生一次缺页中断，那么就称这个程序发生了颠簸（thrashing）</p><p>不少分页系统都会跟踪进程的工作集，以确保在让进程运行之前，它的工作集就已经在内存中了。该方法称为工作集模型，其目的在于大大减少缺页中断。在让进程运行前预先装入其工作集页面也成为预先调页(prepaging)</p><p>基于工作集的页面置换算法的基本思路就是找出一个不在工作集中的页面并淘汰它。</p><p><img src="/img/%E5%9B%BE3.5.jpg" alt="avatar"></p><p>最好的两种算法是老化算法和工作集时钟算法</p><h2 id="4-分段"><a href="#4-分段" class="headerlink" title="4.分段"></a>4.分段</h2><p>虚拟内存采用的是分页技术，也就是将地址空间划分成固定大小的页，每一页再与物理内存进行映射。</p><p><img src="/img/%E5%9B%BE3.2.jpg" alt="avatar"></p><p>下/img/图为一个编译器在编译过程中建立的多个表，有 4 个表是动态增长的，如果使用分页系统的一维地址空间，动态增长的特点会导致覆盖问题的出现。</p><p>分段的做法是把每个表分成段，一个段(segment)构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。它们既不会影响到其他的段，地址空间中也没有任何其他东西阻挡它增长。</p><p><img src="/img/%E5%9B%BE3.3.jpg" alt="avatar"></p><p>使用段的好处是：</p><ul><li>简化对长度经常变动的数据结构的管理</li><li>简化链接操作</li><li>简化修改</li><li>有助于在几个进程之间共享过程和数据</li></ul><h3 id="分段与分页的结合"><a href="#分段与分页的结合" class="headerlink" title="分段与分页的结合"></a>分段与分页的结合</h3><p>程序的地址空间划分成多个拥有独立地址空间的段，每个段上的地址空间划分成大小相同的页。这样既拥有分段系统的共享和保护，又拥有分页系统的虚拟内存功能。</p><h3 id="分页与分段的比较"><a href="#分页与分段的比较" class="headerlink" title="分页与分段的比较"></a>分页与分段的比较</h3><ul><li>对程序员的透明性：分页透明，但是分段需要程序员显式划分每个段。</li><li>地址空间的维度：分页是一维地址空间，分段是二维的。</li><li>大小是否可以改变：页的大小不可变，段的大小可以动态改变。</li><li>出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。</li></ul><p><img src="/img/%E5%9B%BE3.4.jpg" alt="avatar"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>死锁</title>
    <link href="/2021/02/15/%E6%AD%BB%E9%94%81/"/>
    <url>/2021/02/15/%E6%AD%BB%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="1-资源"><a href="#1-资源" class="headerlink" title="1.资源"></a>1.资源</h2><p>在进程对设备、文件等资源取得了排他性的访问权时，有可能会出现死锁。</p><p>资源可以分为如下两类：</p><ul><li>可抢占资源：可以从拥有它的进程中抢占而不会产生任何副作用（比如存储器）</li><li>不可抢占资源：在不引起相关计算失败的情况下，无法把它从占有它的进程中抢占过来（比如CD刻录机）</li></ul><p>考虑这样一种情况：进程A获取了资源1，进程B获取了资源2，每个进程如果都想请求另一个资源就会被阻塞，那么每个进程都无法继续运行。这种情况就是死锁。</p><h2 id="2-死锁的条件"><a href="#2-死锁的条件" class="headerlink" title="2.死锁的条件"></a>2.死锁的条件</h2><ul><li><p><strong>互斥条件</strong>：每个资源要么已经分配给了一个进程，要么就是可用的。</p></li><li><p><strong>占有和等待条件</strong>：已经得到了某个资源的进程可以再请求新的资源。</p></li><li><p><strong>不可抢占条件</strong>：已经分配给一个进程的资源不能强制被抢占，它只能被占有它的进程显式地释放。</p></li><li><p><strong>环路等待条件</strong>：死锁发生时，系统中一定有由两个或两个以上的进程组成的一条环路，该环路中的每个进程都在等待着下一个进程所占有的资源。</p><p>死锁发生时，以上四个条件必须同时满足。</p></li></ul><h2 id="3-处理方法"><a href="#3-处理方法" class="headerlink" title="3.处理方法"></a>3.处理方法</h2><p>有以下四种处理死锁的策略：</p><ul><li><strong>鸵鸟策略</strong>：忽略该问题</li><li><strong>死锁检测并恢复</strong>：让死锁发生，检测它们是否发生，一旦发生死锁，采取行动解决问题。</li><li><strong>死锁避免</strong>：仔细对资源进行分配，动态地避免死锁。</li><li><strong>死锁预防</strong>：通过破坏死锁的四个条件，防止死锁的产生。</li></ul><h3 id="3-1-鸵鸟策略"><a href="#3-1-鸵鸟策略" class="headerlink" title="3.1 鸵鸟策略"></a><strong>3.1 鸵鸟策略</strong></h3><p>像鸵鸟一样，把头埋在沙子里，假装根本没发生问题。<br>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任何措施的方案会获得更高的性能。<br>当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。<br>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p><h3 id="3-2-死锁检测并恢复"><a href="#3-2-死锁检测并恢复" class="headerlink" title="3.2 死锁检测并恢复"></a><strong>3.2 死锁检测并恢复</strong></h3><p>核心思想：系统并不试/img/图阻止死锁的发生，而是允许死锁发生。当检测到死锁发生时，采取措施进行恢复。</p><p>死锁恢复：</p><ul><li>利用抢占恢复：将某一资源从一个进程强行取走给另一个进程使用，接着又送回。</li><li>利用回滚恢复：将一个进程复位到一个更早的状态，那是它还没有取得所需的资源，接着就把这个资源分配给一个死锁进程。如果复位后的进程试/img/图重新获得对该资源的控制，它就必须一直等到该资源可用时为止。</li><li>通过杀死进程恢复：杀掉环中的一个进程，打破死锁。</li></ul><h3 id="3-3-死锁避免"><a href="#3-3-死锁避免" class="headerlink" title="3.3 死锁避免"></a><strong>3.3 死锁避免</strong></h3><p>资源轨迹/img/图：</p><p><img src="/img/%E5%9B%BE6.1.jpg" alt="avatar"></p><p>/img/图中阴影部分表示该区域内两进程都拥有打印机或都拥有绘/img/图仪，互斥使用的规则决定了不可能进入该区域。</p><p>在点t，进程B请求资源。系统必须决定是否分配。如果系统把资源分配给B，系统进入不安全区域。要避免死锁，应该将进程B挂起，直到A请求并释放绘/img/图仪。</p><p><strong>安全状态和不安全状态</strong><br>如果死锁没有发生，并且即使所有进程突然请求对资源的最大需求，也让然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。</p><p>下/img/图所示的状态即为安全状态：<br><img src="/img/%E5%9B%BE6.2.jpg" alt="avatar"></p><p>从/img/图 a 开始出发，先让 B 拥有所需的所有资源（/img/图 b），运行结束后释放 B，此时空闲数变为 5（/img/图 c）；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称/img/图 a 所示的状态时安全的。</p><p>如果任何分配资源实例的序列都无法保证工作的完成，则从安全状态进入到了不安全状态。如下/img/图所示：<br><img src="/img/%E5%9B%BE6.3.jpg" alt="avatar"></p><p>注意：**<em>不安全状态并不是死锁**</em>。<br>安全状态和不安全状态的区别是：从安全状态出发，系统能够保证所有进程都能完成，而从不安全状态出发，就没有这样的保证。</p><p><strong>银行家算法</strong><br>银行家算法将客服比作进程，将贷款单位比作资源，将银行家比作操作系统。</p><p>银行家算法就是对每一个请求进行检查，检查如果满足这一请求是否会达到安全状态。若是，那么就满足该请求；若否，那么久推迟对这一请求的满足。为了看状态是否安全，银行家看他是否有足够的资源满足某个客户。如果可以，那么这笔投资认为是能够收回的，并且接着检查最接近最大限额的一个客户，以此类推。如果所有投资最终都被收回，那么该状态是安全的，最初的请求可以被批准。</p><h2 id="3-4-死锁预防"><a href="#3-4-死锁预防" class="headerlink" title="3.4 死锁预防"></a><strong>3.4 死锁预防</strong></h2><p>通过破坏死锁的四个条件，防止死锁的产生。</p><ul><li>破坏互斥条件：如果资源不被一个进程独占，那么死锁肯定不会发生。</li><li>破坏占有和等待条件：要求当一个进程请求资源时，先暂时释放其当前占有的所有资源，然后再尝试一次获得所需的全部资源。</li><li>破坏不可抢占条件：可以通过将一些资源虚拟化的方式来实现。</li><li>破坏环路等待条件：将资源进行编号，制定规则：进程可以在任何时候提出资源请求，但是所有资源请求必须按照资源编号的顺序退出。任何时候总有一个已分配的资源是编号最高的。占用该资源的进程不可能请求其他已分配的各种资源。它或者会执行完毕，或者最坏的情况是去请求编号更高的资源，而编号更高的资源肯定是可用的。最终，它会结束并释放所有的资源，这时其他占有最高编号资源的进程也可以执行完。简而言之，存在一种所有进程都可以执行完毕的情景，所以不会产生死锁。</li></ul><p><img src="/img/%E5%9B%BE6.4.jpg" alt="avatar"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>索引</title>
    <link href="/2021/02/15/%E7%B4%A2%E5%BC%95/"/>
    <url>/2021/02/15/%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引也叫键，是帮助存储引擎快速找到记录的一种数据结构。相当于一个目录的作用。</p><p>索引的优点：</p><ul><li>加快数据的检索速度</li><li>通过创建唯一性索引，保证数据库表中每一行数据的唯一性</li></ul><p>索引的缺点：</p><ul><li>创建和维护索引需要耗费时间：当对表中数据进行修改时，如果数据有索引，那么索引也需要修改。</li><li>占用物存储空间</li></ul><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p>B+树是一颗搜索树，也是平衡树。<br>在B+树中，所有记录节点都是按照键值的大小顺序存放在同一层的叶子节点上，由各叶子节点指针进行连接。</p><p>在 B+ Tree 中，一个节点中的 key 从左到右非递减排列。如下图所示：如果一个指针的左右相邻的key分别是3和5，则该指针所指向节点的所有key大于等于3小于等于5。</p><p>B树与B+树的区别：</p><ul><li>B树的所有节点既存放键(key)也存放数据(data);而B+树只有叶子节点存放key和data，其他内节点只存放key。</li><li>B树的叶子节点都是独立的;B+树的叶子节点有一条指针指向与它相邻的叶子节点。</li></ul><p><img src="/img/b+%E6%A0%91.jpg"></p><p>B+树索引并不能找到一个给定键值的具体行。B+树索引能找到的只是被查找数据行所在的页。然后数据库通过把页读入内存中，再在内存中进行查找，最后得到要查找的数据。</p><p>此外，数据库系统将B+树的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。</p><p>由于B+树和红黑树相比有更低的树高度。一般B+树的高度都在2-4层，因此查找某一键值的行记录时最多只需要2-4次IO操作。</p><h2 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h2><p>B+树索引可以分为聚集索引和辅助索引。</p><ul><li>二者相同点为：内部结构都为B+树，即高度平衡。叶子节点存放着所有的数据。</li><li>二者不同点为：​ 聚簇索引的叶子节点就是数据节点，而非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。<h3 id="1-聚集索引"><a href="#1-聚集索引" class="headerlink" title="1.聚集索引"></a>1.聚集索引</h3>聚集索引即索引结构和数据一起存放的索引。聚集索引(clustered index)按照每张表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行数据，也将聚集索引的叶子节点称为数据页。</li></ul><p>因为无法把行数据存放在两个不同地方，因此一个表只能有一个聚集索引。</p><p>在数据页（叶子节点）上存放的是完整的每行的记录，而在非数据页（非叶子节点）的索引页中，存放的仅仅是键值及指向数据页的偏移量。</p><h3 id="2-辅助索引"><a href="#2-辅助索引" class="headerlink" title="2.辅助索引"></a>2.辅助索引</h3><p>对于辅助索引，叶子节点不包含行记录的数据<br>。叶子节点data中存储主键值，每次查找数据时，根据索引找到叶子节点中的主键值，根据主键值再到聚集索引中得到完整的一行记录。</p><p>即：有以下两步（<strong>回表查询</strong>：先定位主键值，再定位行记录）：</p><ul><li>先通过普通索引定位到主键值</li><li>再通过聚集索引定位到行记录</li></ul><p><strong>覆盖索引</strong>：如果where条件的列和返回的数据在一个索引中，那么不需要回查表，那么就叫覆盖索引。</p><h2 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h2><p>哈希索引基于哈希表实现，简单地说就是把键值换算成hashcode，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快(O(1)时间复杂度）。</p><p>但有着如下缺点：</p><ul><li>哈希索引和B+树索引相比，丧失了有序性。因此无法排序和分组</li><li>只支持精确查找，无法用于部分查找和范围查找</li></ul><p>自适应哈希索引是指：当InnoDB注意到某些索引被使用得很频繁时，会在内存中创键哈希索引，让 B+树 索引也具有哈希索引的一些优点。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 第2版[M]. 机械工业出版社, 2013.</li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md">Cyc2018:MySQL</a></li><li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95.md">JavaGuide:数据库索引总结2</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2021/02/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式定义了一簇算法，并把它们分别封装起来，让它们之间可以相互替换。此模式让算法的变化独立于使用算法的客户。</p><p><img src="/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>定义一个算法簇：描述鸭子的不同飞行行为.算法簇包含两个具体的算法(行为)：FlyWithWings和FlyNoWay。它们都实现自接口FlyBehavior</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FlyBehavior</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyWithWings</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FlyBehavior</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I can fly with wings&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyNoWay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FlyBehavior</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I can&#x27;t fly&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下为鸭子类，它不需要知道飞行行为的具体细节。因为它已将飞行行为委托给别人处理，而不是在Duck类内部定义这些行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Duck</span></span>&#123;<br>    <span class="hljs-comment">//FlyBehavior实例变量是一个接口类型，我们能在运行时利用多态为它指定不同的具体实现类。</span><br>    <span class="hljs-keyword">private</span> FlyBehavior flyBehavior;<br>    <span class="hljs-comment">//不在乎flyBehavior接口的对象是什么，只关心该对象知道如何进行fly动作就够了。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">performFly</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(flyBehavior != <span class="hljs-keyword">null</span>)<br>            flyBehavior.fly();<br>    &#125;<br>    <span class="hljs-comment">//为这个鸭子类设置给定的飞行行为</span><br>    <span class="hljs-comment">//在运行时想改变鸭子的飞行行为，只需调用这个方法即可</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlyBehavior</span><span class="hljs-params">(FlyBehavior flyBehavior)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.flyBehavior = flyBehavior;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样一来，因为飞行行为已经和鸭子类解耦（实际上二者为组合关系），因此飞行动作也可以被其他类的对象复用。而且当我们新增飞行行为时，只需要多创建一个实现飞行接口的具体行为类即可，不会影响到既有的具体行为类，也不会影响使用到飞行行为的Duck类。</p><p>以下为客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Duck duck = <span class="hljs-keyword">new</span> Duck();<br>        duck.setFlyBehavior(<span class="hljs-keyword">new</span> FlyWithWings());<br>        duck.performFly();<br>        duck.setFlyBehavior(<span class="hljs-keyword">new</span> FlyNoWay());<br>        duck.performFly();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出将依次为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">I can fly <span class="hljs-keyword">with</span> wings<br>I can<span class="hljs-symbol">&#x27;t</span> fly<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络层</title>
    <link href="/2021/02/15/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <url>/2021/02/15/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>网络层分为数据平面和控制平面。  </p><ul><li>数据平面的作用是在一个路由器中，将数据报从一个输入链路转移到一个适当的输出链路，即转发功能(forward)</li><li>控制平面的作用是协调一个网络中的每个路由器的转发动作，使得数据报沿着源和目的地主机之间的路由器路径最终进行端到端传送，即路由功能(routing)</li></ul><p>链路层交换机和路由器的区别：</p><ul><li>链路层交换机基于链路层帧中的字段值做出转发决定，交换机因此被称为链路层设备。</li><li>路由器基于网络层数据报中的首部字段做出转发决定，路由器因此被称为网络层设备</li></ul><p>当一个数据报从源被传送到目的地主机时，它通过了一些列的路由器。每个路由器都是用这个数据报的目的地地址来转发包。即，每个路由器都有一个转发表，其将目的地的IP地址与一个输出链路接口相对应。当一个数据报到达路由器时，路由器使用数据高的目的Ip地址在转发表中找到一个合适的输出链路接口(output link interface)</p><p>网络层协议概览：</p><p><img src="/img/%E5%9B%BE%E7%89%874.1.jpg"></p><h2 id="2-IP协议-Internet-Protocol"><a href="#2-IP协议-Internet-Protocol" class="headerlink" title="2.IP协议(Internet Protocol)"></a>2.IP协议(Internet Protocol)</h2><h3 id="2-1-IP数据报格式："><a href="#2-1-IP数据报格式：" class="headerlink" title="2.1 IP数据报格式："></a>2.1 IP数据报格式：</h3><p><img src="/img/%E5%9B%BE%E7%89%874.2.jpg" alt="IP数据报格式"></p><ul><li>header length：由于IPv4数据报中包含一些可变数量的选项(options),因此需要首部长度字段用来确定IP数据报中载荷从何处开始。大多数IP数据报不包含(option),所以**<em>一般的IP数据报具有20字节的首部**</em>。</li><li>TTL(Time-to-live):该字段用来确保数据报不会永远在网络中循环。每当一个路由器处理数据包时，该字段就减1.若TTL字段减为0，则该数据报被丢弃。</li><li>Protocol：该字段只有当一个IP数据报到达其最终目的地时才会有用，其指示了IP数据报的数据部分应该交给哪个特定的传输层协议。例如：值为6表明要将data交给TCP，值为17表明要将data交给UDP。这里Protoclo字段所起到的作用，类似于传输层报文段中的端口号的作用。**<em>协议号是将网络层与传输层绑定在一起的粘合剂，而端口号是将传输层与应用层绑定在一起的粘合剂**</em></li><li>首部检验和：路由器对收到的每个IP数据报计算其首部检验和，如果数据报首部中携带的检验和，与计算得到的检验和不一致，则检测出error，路由器一般会丢掉检测出error的数据报。</li></ul><h3 id="2-2-IP编址"><a href="#2-2-IP编址" class="headerlink" title="2.2 IP编址"></a>2.2 IP编址</h3><p>主机和物理链路之间的边界叫接口。IP要求每台主机和路由器接口拥有自己的IP地址。因此一个IP地址与一个接口相关联，而不是与包括该接口的主机或路由器相关联。</p><p>每个IP地址长度为32比特（4字节），这些地址通常按所谓点分十进制记法表示，即地址中的每个字节用它的十进制形式书写，各字节间以句点隔开。</p><p><img src="/img/%E5%9B%BE%E7%89%874.3.jpg"></p><p>如/img/图片所示，在这个例子中，互联左上方的三个主机接口和一个路由器接口的网络形成一个子网。IP编址为这个子网分配一个地址223.1.1.0/24。其中的“/24”记法，称为子网掩码（subnet mask），指示32比特中的最左侧24比特定义了子网地址。一个子网中的所有设备拥有共同的子网地址。</p><p>形式为a.b.c.d/x的地址的x最高比特构成了IP地址的网络部分，并且经常被称为该地址的前缀。一个组织通常被分配一块连续的地址，即具有相同前缀的一段地址。当该组织外部的一台路由器转发一个数据报，且该数据报的目的地址位于该组值的内部时，仅需要考虑该地址前面的x比特，这相当大地减少了在这些路由器中转发表的长度。</p><p>一个地址的剩余32-x比特可认为是用于区分该组织内部设备的，其中的所有设备具有相同的网络前缀。当该组织内部的路由器转发分组时，才会考虑这些比特。</p><p>IP广播地址是255.255.255.255。当一个主机发出一个目的地址为255.255.255.255的数据报时，该报文会交付给同一个网络中的所有主机。</p><h2 id="3-DHCP协议"><a href="#3-DHCP协议" class="headerlink" title="3. DHCP协议"></a>3. DHCP协议</h2><p>DHCP(Dynamic Host Configuration Protocal)协议允许主机自动获取一个IP地址。网络管理员能够配置DHCP，以使某给定主机每次与网络连接时能得到一个相同的IP地址，或者某主机将被分配一个临时的IP地址，每次与网络连接时该地址也许是不同的。同时，DHCP还允许一台主机得知其他的一些信息，例如子网掩码、第一条路由器地址（默认网关）与它的本地DNS服务器的地址。</p><p>DHCP适合这样的情况：许多用户来来往往，并且只在有限的时间内需要地址。</p><p>每个子网一般都将具有一台DHCP服务器。如果在子网中没有服务器，则需要一个DHCP中继代理，这个代理知道用于该网络的DHCP服务器的地址。</p><p>DHCP协议的四个步骤（yiaddr:your Internet adress)：    </p><p><img src="/img/%E5%9B%BE%E7%89%874.4.jpg"></p><ul><li><strong>DHCP服务器发现</strong>：一台新到达的主机的首要任务是发现一个要与其交互的DHCP服务器。这可以通过广播DHCP发现报文(DHCP discover message)来完成，客户在UDP分组中向端口67发送该发现报文。</li><li><strong>DHCP服务器提供</strong>：当DHCP服务器收到一个DHCP发现报文时，用DHCP提供报文（DHCP offer message）向客户做出响应，该报文向该子网中的所有节点广播，仍然使用广播地址255.255.255.255。每台DHCP服务器提供的报文含有收到的发现报文的事务ID、向客户推荐的IP地址、网络掩码以及IP地址租用期（即IP地址有效的时间量）</li><li><strong>DHCP请求</strong>：新到达的客户从一个或多个服务器offer中选择一个，并向选中的服务器offer用DHCP请求报文（DHCP request message）进行响应，并回显配置的参数。</li><li><strong>DHCP ACK</strong>：服务器使用DHCP ACK报文（DHCP ACK message）对DHCP请求报文进行响应，证实所要求的参数。</li></ul><h2 id="4-网络地址转换（NAT）"><a href="#4-网络地址转换（NAT）" class="headerlink" title="4.网络地址转换（NAT）"></a>4.网络地址转换（NAT）</h2><p>NAT用于如下/img/图片所示的家庭网络等专用网络或具有专用地址的地域，一个具有专用地址的地域是指其地址仅对该网络中的设备有意义的网络。</p><p><img src="/img/%E5%9B%BE%E7%89%874.5.jpg"></p><p>NAT路由器对于外部设备来说甚至不像一台路由器，相反它对外界的行为就像一个具有单一IP地址的设备。在/img/图片中，所有离开家庭路由器流向更大的因特网的报文都拥有一个源地址138.76.29.7,且所有进入家庭的报文都拥有一个目的地址138.76.29.7。NAT路由器对外界隐藏了家庭网络内的细节。</p><p>路由器从ISP的DHCP服务器得到它的地址，并且路由器运行一个DHCP服务器，为位于NAT-DHCP路由器控制的家庭网络地址空间的计算机提供地址。</p><p>例如：主机10.0.0.1指派了源端口号3345并将该数据报发送到LAN中，NAT路由器收到该数据报，为其生成一个新的源端口号5001，将源IP地址替代为其WAN一侧接口的IP地址138.76.29.7，且将源端口3345更换为新端口5001.<br>当报文到达NAT路由器时，路由器使用目的地址的IP地址与目的端口号从NAT转发表中检索出家庭网络浏览器使用的相应IP地址。于是，路由器重写该数据报的目的地址和目的端口号，并向家庭网络转发该数据报。</p><p>注：如果一个主机在NAT后面，那么它无法作为一个服务器接受TCP连接请求。</p><h2 id="5-ICMP（Internet-Control-Message-Protocol"><a href="#5-ICMP（Internet-Control-Message-Protocol" class="headerlink" title="5.ICMP（Internet Control Message Protocol)"></a>5.ICMP（Internet Control Message Protocol)</h2><p>主机和路由器用ICMP来彼此沟通网络层的信息。ICMP最典型的用途是差错报告。ICMP报文是承载在IP分组中的，因此从体系结构上讲它是位于IP之上的，但是它仍然被认为是网络层的协议而不是更高层的协议。当一台主机收到一个指明上层协议为ICMP的IP数据报时，它分解出该数据报的内容给ICMP，就像分解出一个数据报的内容给TCP或UDP一样。</p><p>ICMP报文有一个类型字段和一个编码字段，并且包含引起该ICMP报文首次生成的IP数据报的首部和前8字节内容（以便发送方能确定引发该差错的数据报）<br>ICMP报文类型如下：</p><p><img src="/img/%E5%9B%BE%E7%89%874.6.jpg"></p><p>以下为两个ICMP的应用：</p><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p><p>Ping 的原理是通过向目的主机发送 ICMP Echo （Type类型为8，code类型为0）请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><h3 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h3><p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p><p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 报文段，并由目的主机发送终点不可达ICMP差错报告报文。</p><ul><li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li><li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li><li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文（Type3 code3）。</li><li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li></ul><h2 id="6-IPv6"><a href="#6-IPv6" class="headerlink" title="6.IPv6"></a>6.IPv6</h2><p>为了解决IPv4地址不够用的问题，IPv6将IP地址长度从32比特增加到128比特，且IPv6数据报的首部被固定为40字节。IPv6也不允许在中间路由器上进行分片和重新组装，这种操作只能在源和目的地上执行。</p><h3 id="IPv4向IPv6的过渡："><a href="#IPv4向IPv6的过渡：" class="headerlink" title="IPv4向IPv6的过渡："></a>IPv4向IPv6的过渡：</h3><p>IPv4向IPv6的过渡有两种方式，分别为双栈方法（dual-stack）和使用隧道（tunneling）</p><p><strong><em>双栈方法</em></strong>：<br>使用双栈方法的IPv6节点具有完整的IPv4实现，它具有发送和接受IPv4和IPv6两种数据报的能力。但是这种方法有一个缺点：如下/img/图片所示：如果不适用隧道的话，即使E和F之间能交换IPv5数据报，但从D到E的IPv4数据报中并不含有从A发出的初始IPv6数据报中的所有字段。因此E和F之间也只能交换IPv4.</p><p><strong><em>使用隧道</em></strong>：  </p><p><img src="/img/%E5%9B%BE%E7%89%874.7.jpg"></p><p>我们将两台IPv6路由器之间中间IPv4路由器的集合称为一个隧道(tunnel),借助于隧道，在隧道发送端的IPv6节点（如B）可将整个IPv6数据报放到一个IPv4数据报的数据(data)字段中。于是，该IPv4数据报的地址设为指向隧道接受端的IPv6节点(如E)。</p><p>在隧道接受端的IPv6节点最终收到该IPv4数据报，并确定该IPv4数据报含有一个IPv6数据报，于是从中取出IPv6数据报，再为该IPv6数据报提供路由，就好像它是从一个直接相连的IPv6邻居那里接收到该IPv6数据的一样。</p><h2 id="7-路由选择算法"><a href="#7-路由选择算法" class="headerlink" title="7.路由选择算法"></a>7.路由选择算法</h2><p>路由选择算法的目的：给定一组路由器以及连接路由器的链路，路由选择算法要找到一条从源路由器到目的路由器的最好路径。</p><p>其分为两类；</p><ul><li>全局式路由选择算法：用完整的、全局的网络信息计算出从源到目的地之间的最低费用路径。具有这种全局信息的算法常被称作<strong>链路状态(link state,LS)算法</strong></li><li>分散式路由选择算法： 没有节点拥有关于所有网络链路费用的完整信息，每个节点仅有与其直接相连链路的费用信息便可开始计算。常被称作<strong>距离向量(distance-vector,DV)算法</strong></li></ul><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。在一个AS内部，所有路由器运行同样的自治系统内部路由选择协议。在各AS之间，AS运行相同的AS间路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 OSPF</li><li>自治系统间的路由选择：BGP</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰者模式</title>
    <link href="/2021/02/15/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/15/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>动态地为对象扩展功能。</p><p>在扩展功能这一方面，装饰者模式比继承更有弹性</p><p><img src="/img/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.jpg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>实现背景</strong>：一家咖啡店有多种饮料(如咖啡、豆浆），还有多种调料可以添加（如Whip、Mocha）。每种饮料都有一个基础价格，加完调料后，价格即为基础价格加上调料价格。要求我们要计算一杯加过调料的饮料的价格。</p><p>所有的装饰者和被装饰者都要继承自抽象类Beverage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Beverage</span></span>&#123;<br>    String description;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDescription</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象调料类（装饰者），所有的调料类都需继承自这个抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CondimentDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span></span>&#123;<br>    <span class="hljs-comment">//beverage为被装饰者的引用</span><br>    <span class="hljs-keyword">protected</span> Beverage beverage;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">getDescription</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下为两个调料类(装饰者类)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以下是两个调料类（装饰者）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mocha</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CondimentDecorator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Mocha</span><span class="hljs-params">(Beverage beverage)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.beverage = beverage;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDescription</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;, Mocha&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beverage.cost() + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Whip</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CondimentDecorator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Whip</span><span class="hljs-params">(Beverage beverage)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.beverage = beverage;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDescription</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;, Whip&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> beverage.cost() + <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是两个饮料类（被装饰者类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Coffee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Coffee</span><span class="hljs-params">()</span></span>&#123;<br>        description = <span class="hljs-string">&quot;Coffee&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soybean</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Beverage</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Soybean</span><span class="hljs-params">()</span></span>&#123;<br>        description = <span class="hljs-string">&quot;Soybean&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">cost</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.6</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>    Beverage beverage = <span class="hljs-keyword">new</span> Soybean();<br>    beverage = <span class="hljs-keyword">new</span> Mocha(beverage);<br>    beverage = <span class="hljs-keyword">new</span> Whip(beverage);<br>    System.out.println(beverage.getDescription() + <span class="hljs-string">&quot;, $&quot;</span> + beverage.cost());<br>    Beverage beverage2 = <span class="hljs-keyword">new</span> Coffee();<br>    beverage2 = <span class="hljs-keyword">new</span> Mocha(beverage2);<br>    beverage2 = <span class="hljs-keyword">new</span> Whip(beverage2);<br>    System.out.println(beverage2.getDescription() + <span class="hljs-string">&quot;, $&quot;</span> + beverage2.cost());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>锁</title>
    <link href="/2021/02/15/%E9%94%81/"/>
    <url>/2021/02/15/%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>数据库系统使用锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性。</p><h2 id="锁的粒度"><a href="#锁的粒度" class="headerlink" title="锁的粒度"></a>锁的粒度</h2><p>锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。但锁的各种操作(获取锁、释放锁、检查锁状态)都会增加系统开销。因此锁的粒度越小，系统开销就越大。因此在选择锁的粒度时，需要在锁开销和并发程度做平衡。</p><p>MySQL数据库根据锁的粒度把锁分为表级锁和行级锁:</p><ul><li>表级锁：对当前操作的整张表加锁。锁的粒度大，系统开销小，加锁快，不会出现死锁。但发生锁冲突的概率高，并发程度低。</li><li>行级锁：只对当前操作的行进行枷锁。锁的粒度小，系统开销大，加锁慢，会出现死锁。但能大大减少数据库操作的冲突，并发度高。</li></ul><p>InnoDB支持行级锁和表级锁，默认为行级锁。而MyISAM存储引擎支持表级锁。</p><h2 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h2><p>InnoDB实现了以下两种标准的行级锁：</p><ul><li>共享锁（S Lock）：也叫读锁。如果一个事务获得数据对象A的S锁，就可以对A进行读操作，但是不能进行写操作，加锁期间其他事务也可以获得A的S锁并读取它。但任何事务都不能获取数据上的X锁，直到A已释放所有共享锁。</li><li>排他锁（X Lock）：也叫写锁。如果一个事务获得数据对象A的X锁，就可以对A进行读和写操作。加X锁期间其他事务不能对A加任何锁，因此叫排他锁。</li></ul><p>锁的兼容性可以理解为：同一个数据对象可否同时获得两个不同的锁：</p><p><img src="/img/%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B.jpg"></p><p>为了支持在更细粒度上进行加锁，InnoDB支持意向锁。意向锁将锁定的对象分为多个层次。如果需要对页上的记录r进行上X锁，那么分别需要对数据库A、表、页上意向锁IX，最后对记录r上X锁。</p><p>当一个事务需要给自己需要的某个资源加锁的时候，如果遇到一个共享锁正锁定着自己需要的资源的时候，自己可以再加一个共享锁，不过不能加排他锁。但是，如果遇到自己需要锁定的资源已经被一个排他锁占有之后，则只能等待该锁定释放资源之后自己才能获取锁定资源并添加自己的锁定。</p><p>而意向锁的作用就是当一个事务在需要获取资源锁定的时候，如果遇到自己需要的资源已经被排他锁占用的时候，该事务可以需要锁定行的表上面添加一个合适的意向锁。如果自己需要一个共享锁，那么就在表上面添加一个意向共享锁。而如果自己需要的是某行（或者某些行）上面添加一个排他锁的话，则先在表上面添加一个意向排他锁。意向共享锁可以同时并存多个，但是意向排他锁同时只能有一个存在。</p><p>意向锁是一种表锁，分为如下两种：</p><ul><li>意向共享锁（IS Lock）：表示事务准备给数据行记入共享锁，一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁。</li><li>意向共享锁（IX Lock）：表示事务准备给数据行加入排他锁，一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li></ul><p>注意：</p><ul><li>任意 IS/IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁。</li><li>IX，IS是表级锁，不会和行级的X，S锁发生冲突，只会和表级的X，S发生冲突。</li></ul><h2 id="锁问题"><a href="#锁问题" class="headerlink" title="锁问题"></a>锁问题</h2><p>通过锁机制实现了事物的隔离性要求，使事物可以并发地工作。但在并发情况下，多个事物同时对同一事物进行操作，会带来以下几种并发不一致问题：</p><h3 id="1-丢失更新"><a href="#1-丢失更新" class="headerlink" title="1.丢失更新"></a>1.丢失更新</h3><p>即一个事务的更新操作会被另一个事务的更新操作所覆盖。例如；事务T1先将行记录r更新为v1，事务T2再将记录r更新为v2（当前两事务均为提交）。随后事务T1先提交，事务T2后提交。则最终记录r即为v2，事务T2的修改覆盖了事务T1的修改。</p><h3 id="2-脏读"><a href="#2-脏读" class="headerlink" title="2.脏读"></a>2.脏读</h3><p>要理解脏读，首先要理解脏数据。</p><p>脏数据是指事物对缓冲池中行记录的修改，并且还没有提交(commit)。(它和脏页不同，后者是在缓冲池中已经修改，但还没有刷新到硬盘中的页)</p><p>脏读指的是在不同的事物下，<strong>当前事务可以读到另外一个事物未提交的数据</strong>。</p><p>例如：事物1修改了数据但并未提交，事物2随后读取了这个数据，之后如果事物1回滚了此次修改，事物2读到的就是不正确的数据。</p><h3 id="3-不可重复读"><a href="#3-不可重复读" class="headerlink" title="3.不可重复读"></a>3.不可重复读</h3><p>不可重复读是指在一个事物内多次读取同一数据集合，在这个事物还没有结束时，另一个事物也访问了该数据集合并做了一些修改。因此，由于第二个事物的修改，第一个事物两次读取到的数据可能是不一致的。</p><p>例如：事物1先读取一次数据，之后事物2对数据进行了修改并提交，这样事物1再次读取这个数据时，读取结果就和第一次不同。</p><p>不可重复读和脏读的区别：</p><ul><li>脏读读到的是未提交的数据，不可重复读读到的是已提交的数据</li><li>脏读违反了数据库事物的隔离性，不可重复读违反了数据库事物的一致性。</li></ul><h3 id="4-幻读"><a href="#4-幻读" class="headerlink" title="4.幻读"></a>4.幻读</h3><p>幻读和不和重复读类似，是指当一个事务T1读取了几行数据后，另一个并发事务T2插入了一些数据，因此在之后的查询中，事务T1就会发现多了一些原本不存在的记录。</p><p>幻读和不可重复读的区别：</p><ul><li>幻读的关注点在于增删，比如多次读取一条记录发现记录增多或减少了。</li><li>不可重复读的关注点在于修改，比如多次读取一条记录发现其中某些列的值被修改。</li></ul><p>产生并发不一致问题的主要原因是破坏了事务的隔离性，数据库系统提供了多种事务的隔离级别供用户解决并发一致性问题。</p><h2 id="锁算法"><a href="#锁算法" class="headerlink" title="锁算法"></a>锁算法</h2><p>InnoDB存储引擎有三种行锁的算法，分别是：</p><ul><li>Record Lock:锁定一个记录上的索引，而不是记录本身。</li><li>Gap Lock:间隙锁，锁定索引间的间隙(一个范围)，但不包含索引本身(为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生)</li><li>Next-Key Lock: Record Lock和Gap Lock的结合。不仅锁定一个记录上的索引，也锁定索引之间的间隙。（InnoDB存储引擎使用这个机制来避免幻读,在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。）</li></ul><p>例如索引包含以下值：10，11，13，20。采用Next-Key Lock。那么将锁定如下区间：</p><pre><code>(-∞,10][10,11)[11,13)[13,20)[20,+∞]</code></pre><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>当两个事务都需要获得对方持有的锁，导致双方都在等待，这就产生了死锁。发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个则可以获取锁完成事务</p><h2 id="多版本并发控制-MVCC"><a href="#多版本并发控制-MVCC" class="headerlink" title="多版本并发控制(MVCC)"></a>多版本并发控制(MVCC)</h2><p>一致性非锁定读是指InnoDB存储引擎通过行多版本控制的方式(multi versioning)的方式来读取当前执行时间数据库中行的数据。具体为：如果读取的行正在执行DELETE或UPDATE操作，这时读取操作不会因此去等待该行上锁的释放。相反地、InnoDB存储引擎会去读取行的一个快照数据。</p><p>快照数据其实就是当前行数据之前的历史版本（通过undo来实现，快照数据不需要上锁，因为没有事物需要对历史数据进行修改操作），每行数据可能有多个快照数据（多个历史版本），一般称这种技术为行多版本技术，由此带来的并发控制，称为多版本并发控制。</p><p>脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照（历史版本）。</p><p>MVCC可以实现提交读READ COMMITTED和可重复读REPEATABLE READ两种隔离级别。</p><ul><li>在READ COMMITTED隔离级别下，总是读取行的最新版本，如果行被锁定了（被另一个事物使用），则读取该行版本的一个快照。</li><li>而对于REPEATABLE READ的事物隔离级别，总是读取事务开始时的行数据版本。</li></ul><p>而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p><ul><li>MVCC的SELECT操作读的是快照中的数据，不需要进行加锁操作。</li><li>MVCC的对于数据库进行修改的操作(INSERT、UPDATE、DELETE)需要读取最新的数据，因此需要进行加锁操作。</li><li>此外，在进行SELETE操作时，可以强制指定进行加锁操作。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>对读取的行记录加一个X锁，其他事物就不能对该行加上任何锁<br>SELETE...for update<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>对读取的记录加一个S锁，其他事物可以向被锁定的行加S锁，但如果加X锁，则会被阻塞。<br>SELETE...lock <span class="hljs-keyword">in</span> share mode<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li><li>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 第2版[M]. 机械工业出版社, 2013.</li><li><a href="https://blog.csdn.net/qq_34337272/article/details/80611486">MySQL锁机制</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md">Cyc2018:数据库系统原理</a></li><li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL.md#%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%8Einnodb%E9%94%81%E7%AE%97%E6%B3%95">JavaGuide；MySQL</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java虚拟机</title>
    <link href="/2021/02/15/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2021/02/15/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java内存区域"><a href="#一、Java内存区域" class="headerlink" title="一、Java内存区域"></a>一、Java内存区域</h1><p><img src="/img/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.jpg" alt="Java运行时数据区"></p><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。<br>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器。</p><h2 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2.Java虚拟机栈"></a>2.Java虚拟机栈</h2><p>虚拟机栈描述的是Java方法执行的线程内存模型。每个方法被执行的时候，Java虚拟机会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直到执行完成的过程，对应着一个栈帧在Java虚拟机栈中入栈和出栈的过程。</p><p>该区域可能抛出的异常：</p><ul><li>若线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常</li><li>若Java虚拟机的栈容量可以动态扩展，当栈扩展至无法申请到足够的内存会抛出OutOfMemoryError异常</li></ul><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h2><p>本地方法栈和Java虚拟机栈类似，只是本地方法栈为执行本地方法服务，虚拟机栈为执行Java方法服务。<br>注：本地方法一般是用其他语言（C、C++、汇编）编写的，并且被编译为基于本机硬件和操作系统的程序。</p><h2 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4.Java堆"></a>4.Java堆</h2><p>此区域的唯一目的就是存放对象实例，它也是垃圾收集器管理的内存区域。<br>Java堆在虚拟机启动时创建，被所有线程共享，是虚拟机管理的内存区域中最大的一块。</p><p>现代的垃圾收集器基本都采用分代收集算法，即针对不同类型的对象采取不同的垃圾回收策略。因此可以把Java堆分成新生代和老生代这两部分区域。</p><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h2><p>用于存放类相关的信息，如类名、常量、静态变量、方法描述、即时编译器编译后的代码等数据。被所有线程共享。<br>这个区域的垃圾回收的主要目标是对常量池的回收和对类的卸载。</p><p>运行时常量池也是方法区的一部分，class文件中的常量池会在类加载后被放入这个区域。</p><h2 id="对象的创建、内存布局和访问"><a href="#对象的创建、内存布局和访问" class="headerlink" title="对象的创建、内存布局和访问"></a>对象的创建、内存布局和访问</h2><h3 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1.对象的创建"></a>1.对象的创建</h3><ul><li>给对象分配内存（两种方法：指针碰撞、空闲列表）</li><li>将分配到的内存空间都初始化为零值</li><li>用构造函数根据使用者的意愿对对象进程初始化</li></ul><h3 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2.对象的内存布局"></a>2.对象的内存布局</h3><p>在HotSpot虚拟机中，对象在内存中的存储布局可以分为以下三部分：</p><ul><li>对象头：包括Mark Word（哈希码、GC分代年龄等）和类型指针（虚拟机通过这个指针来确定该对象是哪个类的实例）</li><li>实例数据：对象真正存储的有用信息</li><li>对齐填充；任何对象的大小都必须是8字节的整数倍，因此如果对象实例数据部分没有对齐的话，就需要通过填充对齐来补全。</li></ul><h3 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3.对象的访问定位"></a>3.对象的访问定位</h3><p>Java程序会通过栈上的reference数据来操作堆上的具体对象。对象的访问方式有以下两种：</p><ul><li>使用句柄访问：reference中存储的是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自具体的地址信息。好处是reference存储的是稳定句柄地址，在对象被移动时只会改变句柄的实例数据指针，而reference本身不需要修改。</li><li>直接指针访问；reference中存储的直接就是对象地址。好处是节省了一次指针定位的时间开销，访问速度更快。</li></ul><p><img src="/img/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D.jpg" alt="对象的访问定位"></p><p>内存溢出和内存泄漏的区别：</p><ul><li>内存泄漏：已经分配的堆内存由于某些原因无法释放</li><li>内存溢出：没有足够的内存再供分配了</li></ul><h1 id="二、垃圾收集与内存分配"><a href="#二、垃圾收集与内存分配" class="headerlink" title="二、垃圾收集与内存分配"></a>二、垃圾收集与内存分配</h1><p>在Java的内存区域中：程序计数器、虚拟机栈、本地方法栈这三个区域属于线程私有，当线程结束时内存自然就跟着回收了。因此只需要对Java堆和方法区进行垃圾收集。</p><h2 id="判断哪些对象需要被回收"><a href="#判断哪些对象需要被回收" class="headerlink" title="判断哪些对象需要被回收"></a>判断哪些对象需要被回收</h2><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1.引用计数算法"></a>1.引用计数算法</h3><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器就加一；当引用失效时，计数器就减一；计数器为0的对象可被回收。</p><p>缺陷：当两个对象存在循环引用时，引用计数器永不为0，导致无法对这两个对象进行回收。  正是因为这个缺陷的存在，Java虚拟机不使用引用计数算法来判断对象的存活与否。</p><p>例如：对象objA和objB都有字段instance，赋值令objA.instance=objB及objB.instance=objA，除此之外，这两个对象再无任何引用，实际上这两个对象已经不可能再被访问，但是它们因为互相引用着对方，导致它们的引用计数都不为零，引用计数算法也就无法回收它们。</p><h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h3><p>Java虚拟机使用可达性分析算法判断对象是否可被回收。其以GC Roots作为起始节点集开始根据引用关系向下搜索，可达的对象存活，不可达的对象可被回收。</p><p>GC Roots包括如下：</p><ul><li><p>虚拟机栈中引用的对象</p></li><li><p>方法区中类静态属性所引用的对象（例如引用类型静态变量）</p></li><li><p>方法区中常量引用的对象（字符串常量池中的引用）</p></li><li><p>所有被同步锁（synchronized关键字）所持有的对象</p></li><li><p>等等</p><p><img src="/img/GCRoot.jpg" alt="GCRoot.jpg"></p></li></ul><p><strong>四种引用关系：</strong></p><ul><li>强引用：使用new关键字创建的引用，例如Object obj = new Object()。只要强引用关系还存在，垃圾收集器就永远不会回收被引用的对象。</li><li>软引用：在系统将要发生内存溢出异常之前，先将软引用关联的对象列进回收范围进行第二次回收。如果这次回收后还没获得足够的内存，才会抛出内存溢出异常。</li><li>弱引用：一旦垃圾收集器开始工作，无论当前内存是否足够，都会回收只被弱引用关联的对象。</li><li>虚引用：又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</li></ul><p><strong>方法区的回收</strong><br>方法区的垃圾收集主要回收废弃的常量和不再使用的类型。</p><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h3><p>收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。<br>设计者一般至少会把Java堆划分为新生代和老生代两个区域。在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老生代中存放。</p><h3 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1.标记-清除算法"></a>1.标记-清除算法</h3><p>步骤：</p><ul><li>首先标记出所有需要回收的对象</li><li>在标记完成后，统一回收所有被标记的对象</li></ul><p>缺点：</p><ul><li>执行效率不稳定（标记和清除两个过程的执行效率随对象数量增长而降低）</li><li>会产生大量的内存碎片，导致无法给大对象分配内存</li></ul><p><img src="/img/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.png" alt="标记清除算法"></p><h3 id="2-标记-复制算法"><a href="#2-标记-复制算法" class="headerlink" title="2.标记-复制算法"></a>2.标记-复制算法</h3><p>此算法主要针对新生代。它将可用内存按照容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。</p><p><img src="/img/%E6%A0%87%E8%AE%B0%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" alt="标记复制算法"></p><p>现在的商业虚拟机大都采用这种收集算法回收新生代的内存，但是并不是划分为大小相等的两块，而是把新生代划分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次分配内存只使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。</p><p>当Survivor空间不足以容纳一次MinorGC之后存活的对象时，就需要依赖其他内存区域（老年代）进行分配担保，即借用老年代的空间存储放不下的对象。</p><h3 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3.标记-整理算法"></a>3.标记-整理算法</h3><p>此算法主要针对老年代。其中的标记过程仍然与标记清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p><p>此算法缺点在于：需要移动大量对象，处理效率比较低。优点在于不会产生内存碎片。</p><p><img src="/img/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95.png" alt="标记整理算法"></p><p>Java虚拟机为什么要划分为新生代和老年代？<br>分代收集可以让我们根据各个年代的特点选择合适的垃圾收集算法。在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><img src="/img/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="垃圾收集器"></p><h3 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1.Serial收集器"></a>1.Serial收集器</h3><p>Serial收集器是一个单线程工作的收集器。它在进行收集时，必须暂停所有工作线程，直到它收集结束。</p><p><img src="/img/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="Serial收集器"></p><p>Serial收集器对运行在客户端模式下的虚拟机来说是很好的选择。因为这种场景下内存不会特别大，停顿时间可以接收</p><h3 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2.ParNew收集器"></a>2.ParNew收集器</h3><p>多线程版本的Serial收集器。</p><p>适用于服务端模式的新生代垃圾收集。除了Serial之外，只有它能和CMS配合使用。也可以理解为，ParNew合并入CMS，成为它专门处理新生代的组成部分。</p><p><img src="/img/ParNew%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="ParNew收集器"></p><p><strong>并行和并发区分</strong>：  </p><ul><li>并行：并行描述的是多条垃圾收集器线程之间的关系</li><li>并发：并发描述的是垃圾收集器线程与用户线程之间的关系<h3 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3.Parallel Scavenge收集器"></a>3.Parallel Scavenge收集器</h3>吞吐量优先收集器</li></ul><p>其他垃圾收集器的目标是尽可能缩短垃圾收集时用户线程的停顿时间。而此收集器的目标是达到一个可以控制的吞吐量。吞吐量是指CPU用于运行用户代码的时间和总时间（运行用户代码时间+运行垃圾收集时间）的比值。</p><p>顿时间越短就越适合需要与用户交互或需要保证服务响应质量的程序，良好的响应速度能提升用户体验；而高吞吐量则可以最高效率地利用处理器资源，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的分析任务。</p><p>垃圾收集停顿时间的缩短是以牺牲吞吐量和新生代空间为代价获取的。（新生代空间变小，虽然每次的垃圾回收时间缩短，但是垃圾回收变得频繁，进而导致吞吐量下降）</p><h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4.Serial Old收集器"></a>4.Serial Old收集器</h3><p>Serial的老年代版本，同样是一个单线程收集器。它有两大用途：</p><ul><li><p>在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用</p></li><li><p>作为 CMS 收集器的后备方案</p><h3 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5.Parallel Old收集器"></a>5.Parallel Old收集器</h3><p>Parallel Scavenge收集器的老年代版本</p></li></ul><p><img src="/img/Parallel_Scavenge%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="Parallel Scavenge收集器"></p><p>在注重吞吐量或者处理器资源较为稀缺的场合，可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合</p><h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6.CMS收集器"></a>6.CMS收集器</h3><p>CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的老年代收集器。它是基于标记-清除算法实现的。</p><p>分为以下四个步骤：</p><ol><li>初始标记：仅仅标记一下GC Roots能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程。耗时最长但是不需要停顿，可以与用户线程并发运行</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。需要停顿。</li><li>并发清除：清除掉已经标记的死亡对象，不需要停顿。</li></ol><p>由于在整个过程中耗时最长的并发标记和并发清除阶段中，垃圾收集器线程都可以和用户线程一起工作，所以从总体上说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p><p><img src="/img/CMS%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="CMS收集器"></p><p>缺点如下：</p><ol><li>基于标记-清除算法，会产生很多内存碎片。往往会出现老年代还有大量空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次Full GC的情况。</li><li>无法处理浮动垃圾。浮动垃圾是指并发标记和并发清理阶段由于用户线程继续运行而产生的垃圾。这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留到下一次垃圾收集时清理。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS，这样停顿时间就长了。</li><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，在并发阶段，它虽然不会导致用户线程停顿，但却会因为占用了一部分线程（或者说处理器的计算能力）而导致应用程序变慢，降低总吞吐量。<h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7.G1收集器"></a>7.G1收集器</h3>G1(Garbage First)收集器是一款面向服务端应用的垃圾收集器。在多CPU和大内存场景下有很好的性能。</li></ol><p>G1收集器不像其他收集器一样只对新生代或老年代进行回收，它可以直接对新生代和老年代一起回收。衡量标准不再是它属于哪一个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大。这就是G1收集器的Mixed GC模式。</p><p>G1不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），收集器能够对扮演不同角色的Region采用不同的策略处理。</p><p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>G1收集器的工作步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收<br>除了并发标记以外，其余步骤都要完全暂停用户线程<br><img src="/img/G1%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="G1收集器"></li></ul><p>G1收集器的特点：</p><ul><li>可预测的停顿：G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定消耗在 GC 上的时间不得超过 N 毫秒</li><li>空间整合：G1从整体来看是基于“标记-整理”算法实现的收集器，但从局部（两个Region之间）上看又是基于“标记-复制”算法实现，无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存。这种特性有利于程序长时间运行，在程序为大对象分配内存时不容易因无法找到连续内存空间而提前触发下一次收集</li></ul><h2 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h2><ul><li>对象优先在新生代的Eden上分配，当Eden空间不够时，发起MinorGC</li><li>大对象直接进入老年代</li><li>长期存活的对象进入老年代</li></ul><hr><h1 id="三、类加载机制"><a href="#三、类加载机制" class="headerlink" title="三、类加载机制"></a>三、类加载机制</h1><p>在Class文件中描述的各类信息，最终都需要加载到虚拟机中才能被运行和使用。而虚拟机如何加载这些Class文件、Class文件中的信息进入到虚拟机中会发生什么变化，这些是类加载机制要处理的内容。</p><p>虚拟机的类加载机制：Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类。</p><p>在Java中，类加载是在程序运行期间完成的。即，第一次使用到一个类时才对其进行加载，而不是一次性加载所有类（会占用很大的内存）</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="/img/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="类的生命周期"></p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>类的生命周期中前五个阶段：加载、验证、准备、解析、初始化构成了类加载过程。</p><h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h3><p>在加载阶段，Java虚拟机完成了以下三件事情：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流（可以通过ZIP包、网络、数据库等途径获取）</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表该类的Class对象，作为方法区中该类各种数据的访问入口</li></ul><p>数组类型不通过类加载器创建，它由 Java 虚拟机直接创建。此外所有的类都由类加载器加载，加载的作用就是将 .class文件加载到内存。</p><p>加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了。</p><h3 id="2-验证"><a href="#2-验证" class="headerlink" title="2.验证"></a>2.验证</h3><p>确保Class文件的字节流中包含的信息符合要求，不会危害虚拟机自身的安全。</p><p>Class文件并不一定只能从Java源码编译而来，虽然Java语言本身相对安全，但Java无法做到的事情在字节码层面上却有可能实现。所以如果虚拟机不检查输入的字节流的话，很可能会因为载入了有错误或有恶意企图的字节码流而导致系统收到攻击。</p><h3 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a>3.准备</h3><p>准备阶段是正式为类中定义的变量（静态变量）在方法区中分配内存并设置类变量初始值（通常为零值）的阶段。</p><p>注意：这个阶段只为静态变量分配内存，实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。因为实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p><p>在准备阶段设置的初始值一般为零值，例如下面的value变量在这个阶段将被初始化为0(之后的初始化阶段才会被具体赋值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> value = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>特殊情况：如果value是常量，那么它就会被初始化为表达式所定义的值123</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> value = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><h3 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a>4.解析</h3><p>解析阶段是Java虚拟机将常量池内的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程，也就是得到类或者字段、方法在内存中的指针或者偏移量。</p><p>符号引用就是一组符号来描述目标，可以是任何字面量。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p><p>例如：在程序执行方法时，系统需要明确知道这个方法所在的位置。Java虚拟机为每个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就可以直接调用该方法了。通过解析阶段符号引用就可以直接转变为目标方法在类中方法表的位置，从而使得方法可以被调用。</p><h3 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h3><p>在初始化阶段，Java虚拟机才真正开始执行类中编写的Java代码，将主导权从虚拟机移交给应用程序。</p><p>初始化阶段是执行类构造器 &lt; clinit &gt;() 的过程。在准备阶段，类变量已经赋过一次系统要求的初始零值，而在初始化阶段，根据使用者通过程序制定的主观计划去初始化类变量和其它资源。</p><p>&lt; clinit &gt;() 是由编译器自动收集类中所有静态变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        i = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 给变量赋值可以正常编译通过</span><br>        System.out.print(i);  <span class="hljs-comment">// 这句编译器会提示“非法向前引用”</span><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>虚拟机会保证一个类的 &lt; clinit &gt;() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 &lt; clinit &gt;() 方法，其它线程都会阻塞等待，直到活动线程执行 &lt; clinit &gt;() 方法完毕。</p><h2 id="类加载器与双亲委派模型"><a href="#类加载器与双亲委派模型" class="headerlink" title="类加载器与双亲委派模型"></a>类加载器与双亲委派模型</h2><p>Java虚拟机的设计者将类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己去决定如何去获取所需的类。实现这个动作的代码被称为“类加载器”（Class Loader)</p><p>每一个类加载器，都有一个独立的类命名空间。即使两个类来源于同一个Class文件，被同一个Java虚拟机加载，但只要加载它们的类加载器不同，那这两个类就必定不相等。（两个类相互独立）</p><h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><p>从Java虚拟机的角度看，类加载器只分为以下两种：</p><ul><li>启动类加载器（Bootstrap ClassLoader)：使用C++实现，是虚拟机自身的一部分。</li><li>其他类加载器：使用Java语言实现，独立于虚拟机之外，全部继承自抽象类java.lang.ClassLoader</li></ul><p>从Java开发人员的角度看，类加载器可以分为以下的三层类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader): 这个加载器将存放在 <JAVA_HOME>\lib 目录下的，能被虚拟机识别的类库加载到虚拟机内存中（按照文件名识别，如 rt.jar）。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</li><li>扩展类加载器（Extension ClassLoader)：这个加载器将 <JAVA_HOME>/lib/ext 目录中的、或者被 java.ext.dir 系统变量所指定的路径中所有的类库加载到虚拟机内存中。由于类加载器是Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件。</li><li>应用程序类加载器（Application ClassLoader)：也称为“系统类加载器”，它负责加载用户类路径（ClassPath）上所有的类库。开发者同样可以直接在代码中使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>Java应用通过以上三种类加载器的相互配合来完成类加载，此外用户也可以加入自定义的类加载器来进行拓展。类加载器的层次关系如下所示，这种关系被称为双亲委派模型：</p><p><img src="/img/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.jpg" alt="双亲委派模型"></p><p>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器。注意：类加载器的父子关系不是以继承(is-a)来实现的，而是以组合(has-a)来实现的。</p><p><strong>工作过程</strong>：<br>每个类加载器都先将类加载请求委派给父类加载器去处理，所以最后所有的加载请求都传送到最顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，自加载器才会尝试自己去完成加载。</p><p>Java官方API文档的描述如下：</p><blockquote><p>The Java platform uses a delegation model for loading classes. The basic idea is that every class loader has a “parent” class loader. When loading a class, a class loader first “delegates” the search for the class to its parent class loader before attempting to find the class itself.</p></blockquote><p><strong>好处</strong><br>Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系，可以使基础类得到统一。</p><p>例如：存放在rt.jar中的类java.lang.Object，无论哪一个类加载器要加载这个类，最终都将委派给处于模型顶端的启动类加载器进行加载，因此能保证程序中加载的所有的Object类都是同一个类（正如前述：相同的类文件被不同的类加载器加载产生的是两个不同的类）。</p><p>反之，如果没有双亲委派模型，如果编写另外一个 java.lang.Object 并放到 ClassPath 中，它将会被应用程序类加载器加载，这样程序中就会有多个Object类，造成混乱。</p><p><strong>实现</strong><br>双亲委派模型的代码全部集中在java.lang.ClassLoader的loadClass()方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassLoader parent;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException<br>    &#123;<br>        <span class="hljs-comment">// 首先，检查请求的类是否已经被加载过了</span><br>        Class c = findLoadedClass(name);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                c = findBootstrapClassOrNull(name);<br>            &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                <span class="hljs-comment">// 如果父类加载器抛出ClassNotFoundException</span><br>                <span class="hljs-comment">// 说明父类加载器无法完成加载请求</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 在父类加载器无法加载时</span><br>                <span class="hljs-comment">// 再调用本身的findClass方法来进行类加载</span><br>                c = findClass(name);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resolve) &#123;<br>            resolveClass(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ClassNotFoundException(name);<br>    &#125;<br>&#125;<br>loadClass()方法的运行逻辑：先检查请求加载的类是否已经被加载过，若没有则调用父加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。只有当父加载器加载失败，抛出ClassNotFoundException异常时，才调用自己的findClass()方法尝试进行加载。<br></code></pre></td></tr></table></figure><p><strong>自定义类加载器</strong><br>除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader。如果我们要自定义自己的类加载器，就需要继承 ClassLoader。</p><ul><li>如果想打破双亲委派模型，就需要重写loadClass()方法，因为双亲委派模型的逻辑是由loadClass()方法体现的。</li><li>如果不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2019.</li><li><a href="https://github.com/CyC2018/CS-Notes">Cyc2018/CS-Nodes</a></li><li><a href="https://github.com/Snailclimb/JavaGuide">Snailclimb/JavaGuide</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程与线程</title>
    <link href="/2021/02/15/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/02/15/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>在任何多道程序设计系统中，CPU由一个进程快速切换至另一个进程，使得每个进程各运行几十或几百个毫秒。严格地说，在某一瞬间，CPU只能运行一个进程。但在1秒钟期间，它可能运行多个进程，这样就产生并行的错觉。</p><h2 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h2><p>一个进程是某种类型的一个活动，它有程序、输入、输出以及状态。单个处理器可以被若干个进程共享，它使用某种调度算法决定何时停止一个进程的工作，并转而为另一个进程提供服务。</p><p><img src="/img/%E5%9B%BE2.1.jpg" alt="avatar"></p><p>停留在后台处理诸如电子邮件、Web页面、新闻、打印之类活动的进程成为守护进程。</p><h3 id="进程的层次："><a href="#进程的层次：" class="headerlink" title="进程的层次："></a>进程的层次：</h3><p>当进程创建了另一个进程后，父进程和子进程就以某种形式继续保持关联。子进程自身可以创建更多的进程，组成一个进程的层次结构。（注意：父进程和子进程有着不同的地址空间）</p><p>在UNIX中，进程和它的所有子女以及后裔共同组成一个进程组。当用户从键盘发出一个信号时，该信号被送给当前与键盘相关的进程组的所有成员。而Windows中没有进程层次的概念。</p><h3 id="进程的状态："><a href="#进程的状态：" class="headerlink" title="进程的状态："></a>进程的状态：</h3><p>进程的三个状态为：</p><ul><li>运行态（该时刻进程实际占用CPU）</li><li>就绪态（可运行，但由于其他进程正在运行而暂时停止）</li><li>阻塞态（除非某种外部事件发生，否则进程不能运行）</li></ul><p><img src="/img/%E5%9B%BE2.2.jpg" alt="avatar"></p><p>调度程序的主要工作就是决定应当运行哪个进程、何时运行以及它应该运行多长时间（即/img/图中的转换2和转换3）</p><h3 id="进程的实现："><a href="#进程的实现：" class="headerlink" title="进程的实现："></a>进程的实现：</h3><p>为了实现进程模型，操作系统维护着一张进程表（process table)。每个进程占用一个进程表项。该表象包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配情况、所打开文件的状态和调度信息，以及其他在进程中运行态转换到就绪态或阻塞态时必须保存的信息，从而保证该进程随后能再次启动，就像从未被中断过一样</p><h2 id="2-线程"><a href="#2-线程" class="headerlink" title="2.线程"></a>2.线程</h2><h3 id="2-1-线程概述"><a href="#2-1-线程概述" class="headerlink" title="2.1 线程概述"></a>2.1 线程概述</h3><p>线程是独立调度的基本单位。传统的操作系统中，每个进程有一个地址空间，并且只有一个控制线程。但由于以下原因需要使用多线程：  </p><ol><li>多个线程之间共享同一个地址空间和所有可用数据。</li><li>由于线程比进程更轻量级，所以它们比进程更容易创建，也更容易撤销。</li><li>若多个线程都是CPU密集的，那么并不能获得性能的增强。但如果存在着大量的计算和大量的I/O处理，拥有多个线程允许这些活动彼此重叠进行，可以加快应用程序执行的速度。</li></ol><p>例如：假设字处理软件被编写为含有两个线程的程序。一个线程与用户交互，而另一个线程在后台重新进行格式处理。一旦第一页的语句被删除掉，交互线程就立即通知格式化线程对整本书重新进行处理。进一步考虑，可以再增加一个处理磁盘备份的线程。<br>如果程序是单线程的，那么在进行磁盘备份时，来自键盘和鼠标的交互命令就会被忽略，直到备份工作停止为止。如果使用三个线程，程序设计模型就很简单了。第一个和线程只是和用户交互；第二个线程在得到通知时进行文档的重新格式化；第三个线程周期性地将RAM中的内容写到磁盘上。<br>但是在这里若使用三个进程是行不通的，这是因为三个线程都需要在同一个文件上进行操作。通过让三个线程代替三个进程，三个线程共享公共内存，于是它们都可以访问同一个正在编辑的文件。</p><p>再例如，对于那些必须处理极大量数据的应用。通常的单线程处理方式是，读进一块数据、对其处理、然后再写出数据。这里的问题是，如果只能使用阻塞系统调用，那么在数据写入和数据输出时，会阻塞进程。而在有大量计算需要处理的时候，让CPU空转显然是浪费，应该尽可能避免。<br>但多线程提供了一个解决方案，有关的进程可以用一个输入线程、一个处理线程和一个输出线程构造。输入线程把数据读入到输入缓存区中，处理线程从输入缓存区读取数据、处理数据、并把结果放到输出缓存区中；处理线程从输入缓存区中读取数据、处理数据、并把结果放到输出缓存区中；输出线程再把这些结果写道磁盘上。按照这种方式工作，输入、处理和输出可以全部同时进行。当然，这种模型只有当系统调用只阻塞调用线程而不是调用进程时，才能正常工作。  </p><h3 id="2-2-经典的线程模型"><a href="#2-2-经典的线程模型" class="headerlink" title="2.2 经典的线程模型"></a>2.2 经典的线程模型</h3><p>理解进程的一个角度是：用某种方法把相关的资源集中在一起，进程有存放程序正文和数据以及其他资源的地址空间。另一个概念是：进程拥有一个执行的线程(thread)。在线程中有一个程序计数器，用来记录接着要执行哪一条指令。线程拥有寄存器，用来保存线程当前的工作变量。线程还有一个堆栈，用来记录执行历史，其中每一帧保存了一个已调用的但是还没有从中返回的过程。</p><p>可以这样理解：**<em>进程用于把资源集中在一起，而线程则是在CPU上被调度执行的实体。**</em><br>即：在同一进程环境中，允许彼此之间有较大独立性的多个线程执行。在同一个进程中并行运行多个线程，是在同一台计算机上并行运行多个进程的模拟。在前一种情形下，多个线程共享同一个地址空间和其他资源。而在后一种情形中，多个进程共享物理内存、磁盘、打印机和其他资源。</p><p><img src="/img/%E5%9B%BE2.3.jpg" alt="avatar"></p><p>进程中的不同线程不像不同进程之间那样存在着很大的独立性。所有的线程都有完全一样的地址空间，这意味着它们也共享同样的全局变量。由于各个线程都可以访问进程地址空间中的每一个内存地址，所以一个线程可以读、写、甚至清除另一个线程的堆栈。</p><ul><li>线程概念试/img/图实现的是：共享一组资源的多个线程的执行能力，以便这些线程可以为完成某一个任务而共同工作。</li><li>由于每一个线程都会调用不同的过程，从而有一个各自不同的执行历史，因此每个线程都有其自己的堆栈</li><li>所有线程都是平等的，不论有无层次关系。</li></ul><h3 id="2-3-线程的实现方式"><a href="#2-3-线程的实现方式" class="headerlink" title="2.3 线程的实现方式"></a>2.3 线程的实现方式</h3><ul><li>在用户空间实现线程：此时，每个进程都有一个其专用的线程表(thread table)，用来跟踪该进程中的线程。</li><li>在内核实现线程：每个进程中没有线程表。相反，在内核中有用来记录系统中所有线程的线程表。</li></ul><p><img src="/img/%E5%9B%BE2.4.jpg" alt="avatar"></p><h2 id="3-进程间通信"><a href="#3-进程间通信" class="headerlink" title="3.进程间通信"></a>3.进程间通信</h2><h3 id="3-1-临界区"><a href="#3-1-临界区" class="headerlink" title="3.1 临界区"></a>3.1 临界区</h3><p>即：**<em>对共享内存进行访问的程序片段**</em></p><p>如果两个或多个进程同时读写某些共享数据，其最后的结果会取决于进程运行的精确时序，称为竞争条件(race condition)。</p><p>要避免竞争条件，关键是要找出某种途径来阻止多个进程同时读写共享的数据。换言之，我们需要的是互斥(mutual exclusion),即以某种手段确保当一个进程使用一个共享变量或文件时，其他进程不能做同样的操作。</p><h3 id="3-2-同步与互斥"><a href="#3-2-同步与互斥" class="headerlink" title="3.2 同步与互斥"></a>3.2 同步与互斥</h3><ul><li>互斥： 当一个进程在临界区内更新共享内存时，其他进程将不会进入其临界区。即：多个进程在同一时刻只有一个进程能进入临界区。</li><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。</li></ul><p>注：连续测试一个变量直到某个值出现为止，称为忙等待(busy waiting)。由于这种方式浪费CPU时间，所以通常应该避免。</p><h3 id="3-3-信号量"><a href="#3-3-信号量" class="headerlink" title="3.3 信号量"></a>3.3 信号量</h3><p>信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。如果每个进程在进入临界区前都执行一个down操作，并在退出后都执行一个up操作，就能够实现互斥。</p><ul><li>  <strong>down</strong>   : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；</li><li>  <strong>up</strong>  ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。</li></ul><p>down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。所谓原语，即原子操作，是指一组相关联的操作要么都不间断地执行，要么都不执行。</p><p>如果信号量的取值只能为 0 或者 1，那么就成为了   <strong>互斥量（Mutex）</strong>  ，0 表示临界区已经加锁，1 表示临界区解锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> semaphore;<br>semaphore mutex = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P1</span><span class="hljs-params">()</span> </span>&#123;<br>    down(&amp;mutex);<br>    <span class="hljs-comment">// 临界区</span><br>    up(&amp;mutex);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P2</span><span class="hljs-params">()</span> </span>&#123;<br>    down(&amp;mutex);<br>    <span class="hljs-comment">// 临界区</span><br>    up(&amp;mutex);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-互斥量"><a href="#3-4-互斥量" class="headerlink" title="3.4 互斥量"></a>3.4 互斥量</h3><p>互斥量（mutex）是信号量的一个简化版本。<br>互斥量是一种可以处于两态之一的变量：解锁和加锁。0表示解锁，其他所有的值则表示加锁。互斥量使用两个过程，当一个线程（或进程）需要访问临界区时，它调用mutex_lock。如果该互斥量当前是解锁的（即临界区可用），此调用成功，调用线程可以自由进入临界区，并且互斥量被自动锁定以防止其他线程进入。另一方面，如果该互斥量当前已经加锁，则调用线程被阻塞，直到在临界区中的线程完成并调用mutex_unlock。</p><p><font size=3>   <strong>使用信号量实现生产者-消费者问题</strong>   </font> </br></p><p>问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。</p><p>因为缓冲区属于临界资源，因此需要使用一个互斥量 mutex 来控制对缓冲区的互斥访问。</p><p>为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号量：empty 记录空缓冲区的数量，full 记录满缓冲区的数量。其中，empty 信号量是在生产者进程中使用，当 empty 不为 0 时，生产者才可以放入物品；full 信号量是在消费者进程中使用，当 full 信号量不为 0 时，消费者才可以取走物品。</p><p>注意，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行 down(mutex) 再执行 down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生产者睡眠。消费者不能进入临界区，因为生产者对缓冲区加锁了，消费者就无法执行 up(empty) 操作，empty 永远都为 0，导致生产者永远等待下，不会释放锁，消费者因此也会永远等待下去，造成死锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> semaphore;<br>semaphore mutex = <span class="hljs-number">1</span>;<br>semaphore empty = N;<br>semaphore full = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">producer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(TRUE) &#123;<br>        <span class="hljs-keyword">int</span> item = produce_item();<br>        down(&amp;empty);<br>        down(&amp;mutex);<br>        insert_item(item);<br>        up(&amp;mutex);<br>        up(&amp;full);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">consumer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(TRUE) &#123;<br>        down(&amp;full);<br>        down(&amp;mutex);<br>        <span class="hljs-keyword">int</span> item = remove_item();<br>        consume_item(item);<br>        up(&amp;mutex);<br>        up(&amp;empty);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-屏障"><a href="#3-5-屏障" class="headerlink" title="3.5 屏障"></a>3.5 屏障</h3><p>屏障这一同步机制是准备用于进程组而不是用于双进程的生产者-消费者类情形的。它规定：除非所有的进程都就绪准备着手下一个阶段，否则任何进程都不能进入下一个阶段。</p><p>可以在通过每个阶段的结尾安置屏障(barrier)来实现这种行为，当一个进程到达屏障时，它就被屏障阻拦，直到所有进程都到达该屏障为止。</p><p><img src="/img/%E5%9B%BE2.5.jpg" alt="avatar"></p><h2 id="4-调度"><a href="#4-调度" class="headerlink" title="4.调度"></a>4.调度</h2><p>如果只有一个CPU可用，那么就必须选择下一个要运行的进程。在操作系统中，完成选择工作的这一部分称为调度程序(scheduler)，该程序使用的算法称为调度算法(scheduler algorithm)。</p><p>调度算法分为两类：</p><ul><li>非抢占式调度算法：先挑选一个进程，然后让该进程运行直至被阻塞，或者直到该进程自动释放CPU,即使该进程运行了若干个小时，它也不会被强迫挂起。</li><li>抢占式调度算法：先挑选一个进程，并且让该进程运行某个固定时段的最大值。如果在该时段结束时，该进程仍在运行，它就被挂起，而调度程序挑选另一个进程运行（如果存在一个就绪进程）。进行抢占式调度处理，需要在时间间隔的末端发生时钟中断，以便把CPU控制返回给调度程序。</li></ul><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><h3 id="4-1-批处理系统"><a href="#4-1-批处理系统" class="headerlink" title="4.1 批处理系统"></a>4.1 批处理系统</h3><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p><p><strong>1 先来先服务 first-come first-serverd（FCFS）</strong>  </p><p>非抢占式的调度算法，按照请求的顺序进行调度。</p><p>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p><p><strong>2 短作业优先 shortest job first（SJF）</strong>  </p><p>非抢占式的调度算法，按估计运行时间最短的顺序进行调度。</p><p>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p><p><strong>3 最短剩余时间优先 shortest remaining time next（SRTN）</strong>  </p><p>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</p><h3 id="4-2-交互式系统"><a href="#4-2-交互式系统" class="headerlink" title="4.2. 交互式系统"></a>4.2. 交互式系统</h3><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><p><strong>1 轮转调度</strong><br>每个进程被分配一个时间片，允许该进程在该时间段内运行。如果在时间片结束时该进程还在运行，则将剥夺CPU并分配给另一个进程。如果该进程在时间片结束前阻塞或结束，则CPU立即进行切换。</p><p>这个时间片若设计得过短，则会导致过多的进程切换，降低了CPU效率。若设计过程又可能引起对短的交互请求的响应时间边长。</p><p><strong>2 优先级调度</strong><br>核心思想：为每个进程分配一个优先级，按优先级进行调度。  </p><p>将一组进程按优先级分为若干类，并在各类之间采用优先级调度，而在各类进程的内部采用轮转调度。<br>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p><p><strong>3 多级队列</strong><br>属于最高优先级类的进程运行1个时间片，属于次高优先级类的进程运行2个时间片，再次以及运行4个时间片.以此类推，当一个进程用完分配的时间片后，它被移到下一个类。</p><h3 id="4-3-实时系统"><a href="#4-3-实时系统" class="headerlink" title="4.3 实时系统"></a>4.3 实时系统</h3><p>实时系统要求一个请求在一个确定时间内得到响应。<br>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p><h3 id="4-4-线程调度"><a href="#4-4-线程调度" class="headerlink" title="4.4 线程调度"></a>4.4 线程调度</h3><p>首先，对于用户级线程。由于内核并不知道有线程的存在，所以它还是像以前那样操作。在这种情况下，线程无时间片，进程有时间片。多道线程并不存在时钟中断，所以这个线程可以按其意愿任意运行多长时间。如果该线程用完了进程的全部时间片，内核就会选择另一个进程运行。</p><p>其次，对于内核级线程。内核选择一个特定的线程运行，它不用考虑该线程属于哪个进程。对被选择的线程赋予一个时间片，而且超过的时间片，就会强制挂起线程。</p><p><img src="/img/%E5%9B%BE2.6.jpg" alt="avatar"></p><p>此外，从进程A的一个线程切换到进程B的一个线程，其代价高于运行进程A的第2个线程（因为必须修改内存映像，清除内存高速缓存的内容）</p><p>五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。</p><h2 id="5-经典的IPC问题"><a href="#5-经典的IPC问题" class="headerlink" title="5.经典的IPC问题"></a>5.经典的IPC问题</h2><h3 id="5-1-生产者-消费者问题"><a href="#5-1-生产者-消费者问题" class="headerlink" title="5.1 生产者-消费者问题"></a>5.1 生产者-消费者问题</h3><p>如3.4节所述</p><h3 id="5-2-哲学家就餐问题"><a href="#5-2-哲学家就餐问题" class="headerlink" title="5.2 哲学家就餐问题"></a>5.2 哲学家就餐问题</h3><p>五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。  </p><p><img src="/img/%E5%9B%BE2.7.jpg" alt="avatar"></p><p>一种错误的解法时，如果所有哲学家同时拿起左手边的筷子，那么所有哲学家都在等待其它哲学家吃完并释放自己手中的筷子，导致死锁。</p><p>为了防止死锁的发生，可以设置两个条件：</p><ul><li>必须同时拿起左右两根筷子；</li><li>只有在两个邻居都没有进餐的情况下才允许进餐。</li></ul><h3 id="5-3-读者-写者问题"><a href="#5-3-读者-写者问题" class="headerlink" title="5.3 读者-写者问题"></a>5.3 读者-写者问题</h3><p>允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。</p><p>一个整型变量 count 记录在对数据进行读操作的进程数量，一个互斥量 count_mutex 用于对 count 加锁，一个互斥量 data_mutex 用于对读写的数据加锁。</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6 小结"></a>6 小结</h2><p>为了隐蔽中断的影响，操作系统提供了一个由并行运行的顺序进程组成的概念模型。进程可以动态地创建和终止。每个进程都有自己的地址空间。</p><p>在一个进程中使用多个控制线程是有益的。这些线程被独立调度，每个线程都有自己的堆栈，但在一个进程中的所有线程共享一个公共地址空间。线程可以在用户空间或内核中实现。</p><p>进程之间通过进程间通信原语彼此童心，如信号量、管程和消息。这些原语用来确保同一时刻不会有两个进程在临界中。进程可以处在运行、就绪和阻塞状态。</p><p>进程间通信原语可以用来解决诸如生产者-消费者问题、哲学家就餐问题和读者-写者问题等。</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
